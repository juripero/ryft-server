// Code generated by go-bindata.
// sources:
// index.html
// swagger.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\xfd\x93\xda\x36\xf3\xff\x3d\x7f\x85\xea\x4c\x92\x26\xc3\x8b\x6d\x38\xde\xee\x8e\xef\x70\x40\xda\x9b\x01\x2e\x39\xb8\x26\x99\xb6\xd3\x11\xb6\x00\x35\xc6\x76\x65\xf9\x38\x2e\x93\xff\xfd\xbb\x92\x6d\x6c\x83\x0d\x34\x79\xb8\x79\xda\x79\xcc\x5c\xc0\xd2\xea\xe5\xb3\xbb\xda\xfd\x48\x6a\x2f\x7e\xe8\xdd\x74\x27\x9f\xde\xf5\xd1\x82\x2f\xad\xf6\xb3\x8b\xe0\x0b\xc1\x73\xb1\x20\xd8\x0c\x7e\xc2\xcb\x92\x70\x8c\x8c\x05\x66\x1e\xe1\x97\x8a\xcf\x67\xc5\x86\x52\x8e\x6a\xa1\x9e\x53\x6e\x91\x36\xb5\x4d\xf2\x70\x51\x0e\x5e\xa2\xa6\x1e\x5f\xc7\x6f\xa2\xff\x02\x9a\xfa\x9c\x3b\x76\x01\x51\xdb\xf5\x79\x01\x79\xc4\x22\x06\x7c\x73\xf2\xc0\x31\x23\x18\x7d\xd9\x74\x8c\xd0\xcc\xb1\x79\x71\x86\x97\xd4\x5a\xb7\xd0\xcf\xc4\xba\x27\x9c\x1a\xb8\x38\x22\x3e\x29\x74\x18\xc5\x56\x41\x19\xd1\xe5\xd4\xf7\xd0\x18\xdb\x1e\x1a\x28\x05\x0f\xbe\x8b\x1e\x61\x74\x76\x1e\xf6\xf3\x35\xfc\x9e\x3a\xe6\x3a\xd5\xb9\xe1\x58\x0e\x6b\xa1\xe7\x55\xf9\x6c\x8b\x3f\x5f\x31\xec\xa6\xe4\x97\x98\xcd\xa9\xdd\x42\x2a\xc2\x3e\x77\xce\x53\x35\x0f\xc5\x15\x35\xf9\xa2\x85\x34\x4d\x55\xdd\x87\x54\x25\xb5\xa3\xca\x66\x6d\xab\xce\xb9\x27\x6c\x66\x39\xab\x16\x5a\x50\xd3\x24\x76\xb2\xce\xc5\xa6\x49\xed\xb9\x18\x4f\x7c\xf4\xad\xa6\x61\x97\x8d\xb3\x17\x3b\x33\x77\xf1\x9c\x14\xa5\x1d\x32\xe6\x5f\xe4\x8e\xdb\x42\x95\x4a\xdc\xdb\xa6\x9d\x01\xda\x26\x36\x4f\x35\x9a\x62\xe3\xf3\x9c\x39\xbe\x6d\x16\x23\x7d\xbd\x95\x4f\x72\x2e\x53\x87\x99\x04\xaa\x34\xf7\x01\x79\x8e\x45\x4d\xf4\xbc\x2b\x9f\x5d\xa1\x22\xc3\x26\xf5\xbd\x16\xd2\x41\x36\xf1\x97\x94\x04\x8d\x60\xde\x42\xb6\x63\x93\xf3\x6d\x67\xf0\xe8\x23\x81\x81\x2a\xe9\x16\x16\xb5\x49\x71\x41\xe8\x7c\x01\xed\xb4\x46\xba\xb2\xfc\x26\xb2\x9c\xd0\x61\xa0\xcc\xfa\x8b\xf3\x37\xe5\x2c\x65\x4b\x91\xca\x8b\x64\x7b\xb0\x91\xf0\x3a\xab\x88\x2d\x3a\x87\x5e\x40\x81\xb9\xaa\x6b\x23\x93\xde\xa7\x14\x68\x52\xcf\xb5\xf0\x3a\x0d\x67\xa7\x1d\x5d\xce\x0f\xa9\xbd\xdf\x13\x9f\x13\xaa\x3d\xe1\xc5\xf5\x6d\x27\x4e\xe9\x27\x17\x05\x6e\x81\x21\x3e\x67\x2e\x32\x55\xad\xeb\x9d\x4a\xb2\x4b\xb1\xe0\x8b\x26\x31\x1c\x86\x39\x75\xec\x03\x0a\x0a\xba\x6e\x2d\xc4\x8a\x49\x0d\xb0\xd3\x0d\xe8\x8c\x30\xe1\x10\xb9\x7d\xb9\x25\x93\x78\x06\xa3\xae\x68\x70\x48\xed\xbd\xab\x7e\xe7\x6d\xf3\x80\xda\xaf\xce\xba\xfd\x7e\x7d\xd7\x59\x45\xf4\x6b\x21\xca\xc1\x73\x8c\x7c\x7f\x3d\xdb\xb6\x43\xe0\xad\x5a\xe0\xad\x8d\x1c\x4b\xd4\xf7\x18\xc2\xb7\x72\x22\x97\xf8\x54\xf6\x99\x10\x5a\x5a\x34\xd5\x38\x8e\x43\x59\x93\xd4\xf7\xf4\xb5\xd0\x52\x1d\x95\xdf\x84\xbe\x38\x75\x20\x03\x2c\xd3\x0a\x94\x4f\x7a\x4d\x46\x16\xd0\xe5\x93\x13\x09\x74\xb2\xdc\xa9\x59\x85\x8a\xb5\x1d\xb6\xc4\x56\xbe\xde\xd3\x4d\xa5\x23\x85\x4b\xdc\x80\xe9\x13\x96\x85\x57\xcd\xb0\x45\x0c\xa8\xba\x4f\x1b\x7a\xe6\xc2\xa8\xc8\x27\x2f\xce\x95\xce\xbe\x03\x5f\x23\xdb\xaf\x2a\x61\x14\xcc\x88\x12\xf9\x96\xf9\x66\xd4\x95\x4c\xd4\xcd\xb7\x35\x5d\xcf\x58\x30\x01\xea\x3d\x98\xa7\x8e\x65\x66\xfa\x61\x00\x4a\xdb\xe7\xdb\xe9\x74\x7e\x94\xae\x1a\xa2\xd7\xec\xac\xfc\xfd\x8b\xef\xc8\xfe\xb6\xd6\xe3\xf7\x4c\x8d\xe3\x69\x8a\x14\x44\xa4\x45\x55\x13\x19\x4f\x0a\x15\x21\x67\x39\x3e\x68\x66\x46\x1f\x88\x99\xe1\x2a\x60\x49\x0b\xbb\x1e\x98\x2b\xfa\xb5\xab\xbf\x80\x6b\x24\xe3\x5b\xce\x8c\xb8\x59\xd8\x29\x5a\xa4\x23\x73\xae\x83\xf6\xae\xc4\xe7\x7c\xd7\xc9\xa6\x16\x44\xf3\x1c\x17\x53\x4b\xcd\xb4\x93\x6d\x94\x57\x4d\xdb\x27\x19\x15\x2c\x32\xe3\x87\x80\x2c\x72\xf2\x49\x90\xde\x10\x23\x2e\xc1\x1c\x41\xf6\x01\xa5\x49\x87\x78\xfe\x56\x13\x9f\xa3\x1c\xfe\x30\x6d\x08\x53\x93\xba\x3f\x99\x7a\x78\xe9\x16\x76\x56\x07\x23\x47\x30\xbf\x4c\x0a\x12\x73\x14\xbd\x77\xd5\xc8\x12\x08\x33\xa1\x34\x59\x46\x75\xe4\x87\x60\xd5\xcd\x5f\xde\x42\xa9\x67\xf2\xe0\x66\x7d\x97\x07\x27\xe1\x7e\x89\xd9\x8d\xf4\x76\xf1\x1a\x2e\xfe\x8a\x24\x3b\x11\x4f\x9b\x5a\x0e\x78\x0d\x5a\x2d\x28\x27\x45\xcf\xc5\x06\x4c\x1b\x54\x13\x75\x1e\x33\x76\xb9\x09\xd8\x8d\x31\xa0\x45\x68\x65\xe7\x6f\x63\x94\xae\xe3\x33\x0a\x2c\x66\x44\x56\x4a\x21\x7c\x29\x2c\x1d\xdb\x91\xa3\xe5\xdb\x3a\xd8\x2f\xc5\xa8\xc2\x8d\x53\xec\x81\x07\x77\x50\xca\xc0\x37\xa8\x89\x7f\x62\x18\x38\x92\x12\xee\xa0\x36\xdb\xaa\x3d\x7b\xa7\xcd\x18\xa5\x39\x23\xc4\xce\x61\x78\x8d\x86\x9a\x1f\x7a\x4a\x53\xcb\x27\x39\x0d\x45\xd3\xfc\x86\xc1\xd6\xe8\x1b\x48\x75\x49\x2c\xd8\xb4\x36\x82\x9d\xc5\xde\x85\x5c\x62\xc2\x2b\xb2\x9a\xc9\x8a\x03\x01\x00\xb8\xa5\x63\x64\xc7\xff\xfc\xbc\xc4\x88\x68\x55\x48\x97\x80\x5f\x7c\x8b\x9e\x83\x69\x58\x34\x77\x1e\x7a\x32\x6f\x6c\x9a\x7b\xd4\x24\x53\xcc\xfe\x7e\xf4\xfa\x8f\x6c\x06\x2b\x62\xd3\x15\xff\x65\x6c\x06\x93\x26\x13\xcf\x26\x1c\x88\xec\x92\xce\x83\x7b\x37\x16\xe2\xd9\xb3\xa1\x13\x4f\x18\x51\xf4\x8c\x9d\x75\xa4\xa5\xad\x14\x6f\x51\x2f\x24\xfb\x45\xbe\x76\xc9\xee\x88\x61\x3a\x8c\xb2\x57\x06\x93\x2e\x0a\x80\xad\x9d\x5d\x7e\x32\x8f\x1e\x9b\xec\x13\x93\xc4\x99\x1e\x54\x93\xcf\x79\xd6\x7a\xa2\xb6\xa4\x45\x41\x10\xcc\x61\x67\xdb\xbb\xf5\x7d\xf4\x2c\x45\xb2\xf4\x6a\x1e\xf7\xd9\x89\xf6\xc7\x6d\x0e\x93\x48\x33\xb6\x86\x59\x19\x4c\x17\x9f\x0c\xb2\xf0\xbc\xda\x6d\x56\xaf\x2a\xfb\x86\x80\x35\x85\x0d\x4e\xef\xc9\x96\x5a\x8f\x3a\x22\xf9\x3b\xc3\x1c\x0a\x1f\xe1\x8f\x8b\x72\xe2\x74\xed\xa2\x1c\x1f\xd9\x5d\x88\xa3\xae\xcd\x11\x9c\x38\x90\xa0\xe6\xa5\x12\x06\x08\x45\x1c\xf4\x69\x6d\x74\xbb\x86\xd8\x38\x26\x4c\x28\x0d\x1a\x6b\xa2\x58\x6f\x8f\x09\x66\xc6\x02\x11\xdb\x74\x1d\x0a\xd1\xa4\xec\x05\x05\x2e\x66\x78\x49\x60\x4f\xe4\xa1\x16\x48\xeb\x20\x2d\x03\x8d\x18\xe5\x82\x27\x86\xe6\x2c\x79\x30\xb8\x40\x72\x8a\x97\x4a\x98\x79\x85\x7b\x2b\xed\x21\xe1\x0b\xc7\xbc\x28\xf3\xc5\x61\xd9\x6b\x91\xf5\x90\x58\x55\x07\xe4\x65\x16\x57\xda\x77\x8c\x1e\x10\xac\x06\x82\xbd\xf8\x08\x20\x6e\x00\xbf\xe4\xfc\x45\x49\x02\x53\x4a\x9f\x49\x84\xe2\xd5\x6c\x5f\xe0\xf6\x5f\x3e\x61\xeb\x8b\x32\x6e\x43\x4b\x73\xbb\xde\xe3\x0c\xdc\x3c\xab\xe6\xa7\xfe\x24\x52\xf1\xff\xc9\x2e\x2e\xbf\xbc\xbf\xeb\xdf\x7e\xfa\x9a\x25\x3c\x96\xdd\x00\xc5\x14\x21\xd8\x25\x06\x9d\xad\x83\x77\x60\x1c\x81\x95\x00\x10\x98\x88\xe2\x12\xba\x25\x7f\xf9\x94\x11\x13\xe8\xbb\x48\x4a\x91\xf5\x92\xdd\x46\x58\x77\x8c\x26\x01\x89\x76\xde\x2e\xa0\x3c\x38\x7b\xc1\xbc\x04\xfe\x75\x2e\x3b\xbc\xfc\xf2\xf6\x7a\xd0\xff\xba\xdb\x36\x30\xb3\x89\x39\x06\x2c\x60\x6f\x07\x4d\x23\x54\xc4\x2c\xa1\xae\xb3\x5c\x8a\x1a\x01\x84\x03\x2a\x11\x70\x91\x33\x93\xe8\x3c\xe4\x30\x08\x60\x0c\xc8\x90\x03\x54\xca\x2b\xc5\xbd\x1f\x80\xe8\x3f\x3e\x42\x78\xf2\x72\x60\xfa\xe0\xff\x8d\xef\x41\x19\x14\x44\x83\x5c\x7e\xf9\xa5\x33\xb8\xcb\xc2\x3e\x0e\x6c\x29\x0d\x29\xc4\xd7\x91\x39\x21\x2a\x73\x6c\x1b\x04\xfd\xaa\x96\x4a\xfa\xd9\xd9\xef\xe8\x68\x6c\xc6\xc9\x6c\x27\x0b\x0c\xef\x92\x33\x9f\xec\xf6\xd3\xc5\x9e\xb0\x9b\xed\x51\x19\x28\x67\x16\x9e\x97\x50\x8f\xcc\xb0\x6f\x71\xf4\x6a\x86\x2d\x8f\xbc\x3a\xde\x40\xe2\x7c\x83\x9f\x0e\x88\xbb\x3c\x0f\x86\x80\x92\x9b\xdb\x61\x67\x92\x61\x9c\x77\xd1\xd2\x81\x3c\xc7\x82\xb5\x06\xc8\x0d\xe1\x84\xc1\x28\x25\x84\x92\x06\xa4\xb1\x23\x07\x7d\xa3\x57\x0f\x4b\xeb\x95\xf0\xd1\x57\x0c\xaf\x5e\xfd\x18\x2a\xe3\xf5\xd1\x5a\xf0\x7c\xc6\x20\x16\x9b\x12\x6e\x9e\xa3\x6a\xb5\xef\xb6\xa9\x1c\xc7\x97\xe3\xe4\xfb\x6a\xac\x8e\x44\x18\x82\x45\x27\xb1\xdb\xfe\x72\x0a\x35\xb0\x2e\xc5\x65\x11\xe4\x4a\x91\x2e\xa6\x04\xf4\x40\x64\x3d\x68\x03\xbc\x1a\xf6\x1e\x08\xcf\x82\x2e\xa2\x32\xd9\xd9\x8a\x02\xa9\x9c\x0a\x96\xc9\x7d\x66\x83\x82\x57\x0b\xa0\xfd\xb1\x52\xa3\xc1\x98\x4c\x07\x88\x7a\x08\x14\x2a\x99\xc2\xd1\x0e\x45\x89\x65\x9e\x76\x65\x84\x0e\x05\x36\x0f\xeb\xc5\x88\x42\xa0\x3f\xe8\x8d\x4b\xa5\x52\xbe\x4e\x77\x54\x6a\x13\x62\x82\x16\x3e\x93\xb5\x07\x1a\x00\xb5\x78\xe0\x37\xc9\xd0\xbe\x19\xea\x68\x5f\xb2\x1d\xf3\x74\x51\x5d\x16\xc8\x11\xbe\xc1\x7f\x64\x3b\x60\x49\x3e\x90\x0e\x11\xee\xaa\xbf\xc7\x71\xa3\x5a\x40\x74\x16\x48\x5c\xaa\xc8\x5b\x7b\x9c\x2c\x03\x6f\xf1\x21\xda\x98\xa1\xd4\x3d\x86\x0d\xe6\x8e\x26\xe0\xdf\x20\x7b\xc3\x8f\x80\xb0\x5c\xfc\x50\x2c\x22\xc1\x75\xfa\x0f\x30\x61\x99\xe5\xe0\x05\x15\x8b\x82\x01\x55\xda\x23\x87\xc7\x4b\x9c\x81\xae\x09\xa4\x1a\x12\x88\x82\x64\x05\xa4\x5c\x50\x25\x5a\x30\x32\xbb\x54\xd2\x9a\xf9\xf1\xb6\xf3\xe1\x8f\x49\xff\xe3\xe4\x85\xae\x76\x6f\x46\x93\xce\xf5\x68\x0c\x3f\x5f\xe8\xba\x26\xfe\x79\xfd\x32\x50\x97\x8b\x3d\x08\x91\x73\x58\x1d\x25\xfe\xc0\x5f\x26\x17\x9e\xa6\xbe\x8c\x33\x86\xaa\x08\x24\x39\x43\xa0\x68\x00\xa4\x68\xaa\xf2\x3a\x61\x8d\xad\xee\xb7\xd7\x36\x0c\x91\x4e\x4c\x2a\x38\x04\x02\x8f\x70\x25\xf3\x11\x87\x25\xed\x5f\xa5\x06\x63\x1a\xaa\xfc\x21\x6f\x77\x95\x56\x8a\x9a\x42\xb9\x18\x11\x4a\x95\x32\x03\x3a\x09\x14\xbd\x9c\x1e\x5c\x29\xa4\xc5\x9d\xd9\x0c\xd2\x3b\x34\xd0\xeb\x5b\x35\x16\x34\xe2\x0b\x51\xa3\x6f\xd5\x6c\x26\x0a\x95\xea\xa6\xea\x6b\x2c\xa5\x88\x68\x2b\x26\xf1\xe9\xc3\x6a\x7e\xa7\x6b\xae\xf9\xd3\xdc\xbb\xee\xf5\x57\x83\x49\xe7\x61\x30\xe9\x9f\x0d\xff\x9c\x7b\xc3\xce\xe5\xa5\xf2\x2c\xd1\xf2\x84\xe0\xaa\x95\x13\x80\x1b\x4e\x3e\xaf\x6f\xba\xab\xd5\x70\xd2\xe7\xc3\x47\x01\xee\x4e\x1b\x8d\xd5\x87\xe1\x9f\xfd\xf5\xe0\x09\xc1\x69\x6a\xe3\x04\xe8\x06\x93\xeb\x33\x61\xaa\x51\xef\xce\x4b\xa0\x5b\x0f\x1f\xaf\x1f\x9f\x14\x5d\xed\x14\x8e\x39\x98\x0c\x57\x81\x23\x76\x92\xe8\x1e\x47\xbd\xa1\xfa\x94\xe8\xf4\x4a\xf5\x34\x9e\xa9\x0d\xe9\x8e\x67\xaa\xa3\xc9\x7b\xed\x29\xd1\x55\xaa\xa7\x40\x07\x76\xd3\x02\xcf\x7c\x9f\xb4\x9d\x36\xfa\xf3\x4e\x7f\x4a\x74\xd5\xfa\x69\xd6\x5d\x5f\x0d\xd0\x7d\x4e\xa2\xd3\x47\x8f\x9f\x2a\x4f\x89\xee\xac\xd6\x3c\x0d\xba\xb5\x44\x37\x49\xa1\x13\x31\xf3\x49\xa3\x4a\xad\x76\x8a\x8c\xf0\xdf\x82\xae\x5e\x57\xff\xc5\xe8\x1a\xcd\x53\xa2\xbb\x49\xaf\x3b\x78\x37\x9e\x34\xaa\x34\x6b\xb5\xd3\x64\x73\x2d\x40\x77\xb7\x95\xef\xae\x93\x19\xe1\xd9\xef\x17\x65\x49\x37\x25\xf1\x1e\x7f\x33\xe9\xee\x77\x6f\x6e\x7b\xa5\xeb\x1e\x50\xed\xfe\xfb\xbb\xce\x60\xc3\xb9\xd5\x4a\x55\x6b\x54\x12\xcc\xfb\x4d\xc9\x35\x18\x5d\x92\x3d\x9c\xfb\x65\xbc\xad\xca\xa4\xdf\xd1\x60\x28\x18\x4a\xb0\xef\x60\x98\x14\x07\xdf\x0c\x74\x98\x7d\x6f\x6d\x1b\x63\x32\x1e\x50\xf1\xc0\xd0\x4a\x87\xc1\xfe\x4f\x58\x4c\x91\x87\x28\xa1\x41\x95\x2b\x82\x65\xa1\x5a\xd1\x2a\x9b\x32\x71\x78\x2f\x0b\x6b\xfa\xc7\x8f\x68\x8c\xc6\x13\x34\xe8\x7c\xb8\xed\x8f\xba\x7d\xd4\xf9\xa5\x1f\xc9\x89\xb3\x9a\x91\xdc\xb2\x0b\xe1\x9f\x3f\xe9\x7a\xa5\x56\xdf\xf4\x22\x8e\xdc\x7c\x9b\xf2\x75\x87\x11\x69\xd4\xaa\x1e\x55\xf5\x30\x97\xce\xa6\x56\xcb\xda\x59\x59\x57\xb5\x33\xa4\x69\xad\xb3\x66\x4b\x55\xd1\xbb\xe1\x46\x2a\x3e\x60\x15\xc2\xbd\x9b\x61\x7f\x3c\xb9\xee\xa2\xab\xce\x64\x02\xfb\x47\x34\xbe\x1e\xbe\x1b\x6c\x26\xd3\xa3\x62\x03\x6a\x04\x60\xd4\xcd\x2c\x7a\xce\x12\x60\x53\x43\x14\x8b\x13\xa7\xa8\xfc\xed\xd5\x75\x17\xf6\x83\x52\xba\x71\x15\x95\x5e\xf7\x44\xc1\xc6\x20\x51\xe9\x5d\xf7\x36\x98\x6e\xa3\x16\x95\x0d\x30\xa7\xdc\x0f\x3a\xa8\x6a\xa5\x7a\x43\x6b\xd6\xb4\x5a\xa3\xb1\xa9\x77\x0c\x1c\xcd\xfc\x37\xe5\xc7\xa4\x48\x01\x15\x1b\xf5\x52\x4d\x53\x9b\x8d\x6a\x5d\x3d\x7b\xfd\x9b\xb2\xdd\x68\x0b\xf9\x78\x72\xdb\xef\x4f\x62\x21\x7b\xbe\x19\x3a\xd5\x53\x24\xf1\x0e\x1c\x07\xb3\xf5\x64\xed\x4a\x99\x50\x5f\x51\xed\x9d\x6b\x8a\x23\xd0\x1b\x3b\xb4\x80\xae\x87\x16\xd0\x5b\xd5\x7a\x4b\x4b\x5a\xe0\x03\x66\xa6\x90\xd2\xd5\xa8\xe4\x63\xd7\x71\x18\xf8\x61\x68\x40\x4d\x6b\x68\x7a\x6d\xa3\xa8\x4f\x5b\xb5\x8d\x5a\xa5\x59\xdb\x4c\xeb\x13\xac\x83\xa0\x37\x6d\x53\x96\x11\x8e\x76\x43\x91\xb1\xa0\x06\x9e\x3b\xe1\x8a\x48\x84\xa2\x38\x0c\x25\x42\x6c\x1c\x80\x6a\xcd\x44\xd6\xcc\x88\x3e\x5f\x9f\x7d\x8d\xe2\x87\xbc\xbb\xe8\xca\xc3\x83\xe8\xea\x22\xbc\xa5\x90\x9b\x7d\xb7\x3d\x71\xc2\xb3\x05\x62\x91\xa5\xcd\x3d\x79\x72\x50\x36\x52\x2d\x4a\xe8\x83\xc3\x3e\x7b\x68\x45\xf9\x02\x61\xcb\x4a\x5e\x7a\xe0\xa9\x73\x4f\x4a\x48\xac\x4b\x79\x52\xf0\xbf\xeb\x8f\xe8\xf5\xbb\xaf\x3f\xa4\x11\xfe\x25\xb7\x1f\x19\x58\xfe\x7d\x97\x1f\xc7\x80\xfc\xc7\xdd\x7d\x1c\x0d\xea\x69\xae\x3e\xbe\xf5\xa0\xf6\x68\x18\xff\x80\x73\x5a\xa0\x7d\x41\x48\x3f\x4c\x08\x93\xb0\x43\x8a\xb6\x73\x04\x8b\x05\x0f\xbc\xb9\xcd\xab\x9e\x66\xd0\xc4\x80\x00\x66\x74\x9e\x38\x7c\xc5\x4a\xdc\x69\xa2\x78\x9a\x49\x07\x13\xe4\xce\x65\xa4\xfd\x45\x91\xd7\x1f\x04\x72\x9a\x26\xfe\x2b\x28\x30\x84\x28\x06\x1d\x98\xf4\x3e\xd2\x4e\xa4\x96\xe0\xff\xce\xf9\xff\x00\x00\x00\xff\xff\x82\xf9\x7c\xf3\xb5\x33\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 13237, mode: os.FileMode(436), modTime: time.Unix(1452271910, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xff\x4f\xdb\x46\x14\xff\xbd\x7f\xc5\xc9\x9b\xd4\x4d\x6a\x13\xa0\x0b\xed\xf8\x8d\x51\xd0\x50\x3b\xe8\x12\xa4\x4d\x5a\xa7\xe9\xb0\x9f\xe3\xdb\xec\x3b\x73\x77\x26\xa4\x13\xff\xfb\xde\x9d\x6d\x48\xe2\xd8\x3e\x43\x08\xe9\x14\x34\xad\xc4\x7e\x77\xef\xbd\xcf\xfb\xfe\xc8\xbf\x2f\x08\xfe\x78\x6a\x42\xc7\x63\x90\xde\x01\xf1\xf6\x7a\x3b\xde\xab\xfc\x29\xe3\xa1\xc0\x47\x39\x8d\x7d\x12\x80\xf2\x25\x4b\x35\x13\xdc\xd0\xea\x08\x48\x9a\xc9\x54\x28\x20\x22\x24\x3a\x62\x8a\xd0\x34\x8d\x99\x4f\x0d\x09\xc1\x8f\x5a\x10\x5f\x02\xd5\x40\x86\xc7\xa3\x0b\xe2\x0b\xce\xc1\xd7\x42\x9a\x17\xe6\xf8\x70\x1a\x6a\x72\xce\x81\x44\x54\x06\x13\x2a\xa1\x60\x6e\xd9\x69\xa6\x63\x30\x8c\x2c\x95\xb9\xa0\x37\xfb\xfa\x1a\xa4\x2a\x24\xd9\x45\xa9\xed\x8b\xdb\x42\xf6\x48\x28\x6d\x5e\x0c\xf6\x7a\x6f\x7a\x83\x1f\x7b\xbb\x6f\x77\x0f\xde\xbd\xdd\x1f\x94\xba\xa5\x54\x47\x6a\x5e\xb9\xbe\x2f\x32\xae\xe7\x9e\xd9\xe7\x63\xa8\x3e\x5c\x86\xc6\x31\x0f\x52\xc1\xb8\x26\xa1\x51\x0f\x75\xcb\xef\x7b\x55\x3d\xa8\xe9\xd8\xf0\xfe\xa3\xf2\xc6\xbe\xcd\x8f\x55\xde\xfd\xb9\xe4\x22\x95\x25\x09\x95\x53\xc3\xfd\xa8\x8e\x99\x48\x41\x5a\x73\x9c\x06\x86\xae\x56\xa8\x94\x4a\x9a\x80\x46\x4c\x6b\x45\xab\x62\x70\xaf\xd2\x34\xb5\x96\x52\x5a\x32\x3e\x5e\x72\xff\x1d\xe5\xcd\xeb\xb1\x78\xcd\x91\x95\x21\xff\x35\x03\x14\xbf\x81\x7a\x01\xe3\x11\x50\xe9\x47\xe4\xca\x1c\x7b\x65\x81\x86\x1b\x9a\xa4\x31\x1c\x90\xef\xc8\xf0\xf0\xb7\xbf\x2e\x8e\x7f\xbf\x20\x47\xe7\x67\x17\x87\xa7\x67\x23\xf2\xd9\xe3\x6c\x1c\xe9\xcf\x1e\xf9\xbe\x89\x49\x29\xcd\x55\x9b\x34\x8c\x3b\x91\x49\xb8\xca\x98\x04\x83\xb7\x96\x19\x2c\x25\xbc\x5d\x7e\xde\x01\x62\x2a\x25\x6d\x96\x52\x43\xa2\x96\xba\xec\xd2\xfb\x0a\x93\xd5\x12\xd7\x48\x6a\xef\x98\x33\xe6\x09\x8b\x41\x75\x31\xa6\xc8\xa4\x0f\x24\x6c\x3b\x56\xde\xdf\x4a\xb8\x11\xe6\xc1\x0c\x00\x26\x97\x36\x08\x80\x7e\x9b\x50\x9b\x9e\x32\xa4\x7e\xe7\x1c\x2d\x27\xd9\x97\x2f\x8c\x83\xea\x02\xf2\xa9\xb2\xb9\x28\x2c\x8f\xe6\x89\x1a\x88\xb2\x91\xd4\x23\xbf\x00\x55\x19\x82\x41\x68\x4e\x98\xd0\x1b\x96\x64\x09\xf9\x99\x26\x09\xba\x05\x09\x98\xd2\x94\xfb\xd0\x73\xb2\x90\x8b\x80\xb3\x56\x5a\x31\xf6\x97\x42\xc4\x40\xb9\x33\xa0\x47\x54\xc1\x08\xb8\x62\x9a\x5d\x43\x07\x50\xcd\x39\x44\xb0\x38\x48\xc2\x98\x36\xa6\xbc\x92\x9d\xbf\x6e\x5c\x0a\x63\xe2\xbd\x3f\x34\x30\x46\x3b\x17\x54\x3b\x0d\x54\x6b\xf0\xef\x33\x11\x74\x4a\x20\x87\xbe\x85\xdf\x1e\x23\x75\x05\xf0\xee\x70\xc9\x85\xb7\x71\xd9\x20\x07\xfd\x28\x7c\x1a\x77\x40\xe4\x13\x48\x03\x7e\x11\xdd\x44\xf0\x78\x8a\xff\xcb\x3b\x33\x3f\xce\x14\x96\x77\x92\x40\x72\x09\xb2\x47\xde\x43\x48\xb3\x58\x93\x97\x21\x8d\x15\xbc\x74\x0a\xf0\xb8\x4d\x9e\x76\xec\x9c\x1a\x1b\x09\x2a\x15\x5c\x41\x7d\x19\xf3\xf6\x76\x76\x1a\x6b\xdc\xf2\xd6\x61\x58\x5c\x7c\xfe\xc1\x74\xa7\xb4\x04\x0a\xf9\x19\x28\x18\x27\x14\xff\x33\x05\x96\x4c\x98\x8e\xcc\x27\x88\x51\x77\xae\x6d\xe2\xbc\xa6\x92\x89\x4c\x11\x2c\x99\x99\xaf\x33\xd9\x98\x33\x94\x1f\x41\x42\xdd\xeb\xb0\xb8\xfc\x1b\x5b\xe3\x86\x1b\x2d\xf5\xb7\x12\x42\x43\xfd\x4d\x3f\x80\x10\x03\xd7\xa8\xa7\xfa\xd6\xf9\x4b\xdd\x1a\x4a\x79\x17\x77\x46\x00\xad\x83\x74\x42\xf9\x58\x4a\x6c\xca\xee\xcd\xb7\x21\xf8\x58\xb1\x1e\x8c\x4f\xe5\xe9\xfc\x93\xfb\x4f\x33\x48\x7a\xfd\xdc\xb5\x56\x38\x4f\x14\x17\x76\x1e\x28\x8a\x73\x4e\x81\xb7\x30\x2d\xd4\xb3\x5c\xcd\xb8\xb0\xed\x65\xeb\x08\x37\xa2\x97\xed\x38\xcd\x9d\xe4\x75\xbf\x3b\x6a\xf6\x1c\x41\x97\x52\x58\x9f\xec\x6d\x2e\x10\xb6\x72\xdb\xa0\x42\xfe\x7f\xef\x34\x1f\xea\x31\x0c\xe2\xc0\x31\x60\xda\x28\x9f\x50\xab\x8d\x4d\x53\x1f\x60\xea\x84\xde\x3f\x2d\x74\x9b\xe3\x11\xdb\x8d\xd0\xc2\x8f\xd3\x78\xb7\x3f\x18\x3c\xe3\x84\xb7\xbb\xef\x6c\xde\x51\x86\x9d\x58\xc6\x83\x16\x97\x58\x34\x72\x0a\x3e\xc3\x0c\x90\xaf\x28\x78\x66\x06\x18\xd3\x8f\xfb\x11\x76\x21\xbe\x69\x42\xc8\x25\xa0\x4c\x50\xac\x30\xb4\x6f\x5a\xf7\x80\xd0\xd0\x0c\x3c\xf7\xcf\x74\x84\x65\x66\xc2\xe2\x18\xc9\xb1\x49\xc5\x0e\x9e\x43\x40\x26\x11\x70\x4b\xc4\x78\x9a\x69\xa2\x0a\x66\x78\x10\x01\x31\x63\x82\xa4\x13\xa2\xe1\xc6\x69\xba\x54\x6e\x0a\x3e\xe9\xb0\xbf\x37\x18\x7c\x0d\xe3\xfe\x76\x9d\x55\x73\xe5\x76\x6d\x33\x73\x78\xbb\xb6\xd9\x88\xb5\xcd\xda\xb0\x1b\x69\xaa\x3b\x65\x04\x8e\x08\x05\x65\x06\x20\xca\x1c\x37\x8b\x9c\x72\x07\xf1\x30\xc4\x54\x9b\x14\xdb\x45\xd7\x1d\x7f\xd7\x45\xce\xe2\x68\x33\xbb\xb3\x2a\xab\xb1\xca\x2b\x35\xfe\x6b\x5a\xb9\xb6\xbe\xca\x5e\xbb\x8a\xfd\xd0\x3c\x66\xdb\x05\xda\x46\x2c\xd0\xf2\x1d\x89\xfb\xfe\xac\x79\x0b\x96\xdf\xe6\x14\x94\x33\x7f\x56\xaf\xdb\x03\xd5\x2e\xeb\xb4\xc8\xbd\x96\x24\x58\xaf\xfa\x65\xf2\x36\xcc\x89\x9a\xe2\xef\x49\x63\x4c\x2d\xee\xdf\xea\xd6\x44\x8f\x5c\xbf\x95\x59\xce\x7c\x0b\xa2\xc9\xc3\xdc\x67\xb8\x05\x38\x2e\x4c\x8f\x26\xe2\x00\x55\x37\x3c\x0c\x2a\x79\x80\x63\xcb\xce\xe2\x80\xd8\x79\x19\x13\xcd\x4c\x72\xee\xbf\x5c\x73\x81\x72\x2e\x8e\x1d\x2a\xd9\x02\x0c\xc3\x5c\xe7\xdc\xfa\xa5\xd9\x49\x28\x45\x42\x2c\x57\x62\x9a\x9a\xa2\xdc\x4b\x9c\x43\xf0\xfe\xb2\xde\x3b\x4e\x93\xb6\xa4\x7d\x95\x65\xea\x23\x76\xe2\xa6\xd4\x58\x17\xb7\xd3\x5a\x80\x3a\x99\xef\x06\xb1\x22\xfb\xf3\x99\x08\xda\x94\x3c\x68\xf3\xc1\xb6\x4e\x3c\x7b\x9d\xb0\xbf\x95\x5f\xf6\x9a\x11\x60\x4e\xcb\xf9\x16\xa3\x5a\x49\x1a\x15\x9e\x8d\xb2\x6a\x82\xf5\x8a\x36\x65\x5e\xc5\x85\xd0\xf1\x52\x69\xf2\xb9\x66\x35\x71\xe3\x05\x54\xd3\x21\xd5\x55\xd1\x2a\x22\xd6\x6d\x0c\x97\xb8\x94\x17\x64\x79\x09\x69\xbf\x35\xdf\xa4\xd4\x58\x7a\x66\x1e\xc4\xc2\xf6\x66\xcf\x8d\x79\x48\x2f\x25\xf3\xdf\x3f\x89\x62\x25\xe6\xcf\xa1\x97\x16\x9a\xc6\x3f\x4d\xf5\x3a\xd8\x3b\x34\x47\x0b\x0d\xeb\x4a\x5d\x3b\x9f\x11\x5a\x5c\x9b\x06\x81\x8d\x38\x1a\x7f\x6a\x71\xf2\x05\x51\xe6\x95\xeb\x18\x30\xa5\x68\xad\x26\x68\xda\xd8\x3b\x6c\xeb\xdd\x73\xa1\x3b\x10\x4d\xf7\x3f\x3e\x51\x2e\x6b\x63\xed\x0c\xdb\x0a\x55\xa3\x8a\x6d\x16\xb9\xa3\x6b\x4d\x65\x15\xbe\x8f\xf9\x23\x48\x6b\x8a\xab\x70\x6b\x8c\xc9\x3b\xea\xd6\xd8\x74\x11\xce\x31\x05\x56\x44\x7c\x0c\x20\x0e\xe9\xa9\xc2\x6f\x8d\x90\xb4\x65\xee\x67\x92\xed\x61\x83\xe9\x7c\x0f\xd8\x31\xf5\xb6\x65\xb8\x7c\x6a\x5a\x63\x86\x6b\xf2\x3a\xb7\x3c\xb3\x7c\x4e\xdf\x60\x81\xed\xd8\xfb\xf0\xce\xc4\xc1\x45\xe6\xdb\xe0\x8e\x2e\xf2\x3c\xa5\x35\x01\xa5\xe8\x78\xc5\x1d\x9b\x8f\x23\xdc\x13\x20\x9d\x77\xff\x2f\x6e\x5f\xfc\x17\x00\x00\xff\xff\xa7\x7e\x8c\x89\xc0\x32\x00\x00")

func swaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerJson,
		"swagger.json",
	)
}

func swaggerJson() (*asset, error) {
	bytes, err := swaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger.json", size: 12992, mode: os.FileMode(436), modTime: time.Unix(1453810123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"swagger.json": swaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"swagger.json": &bintree{swaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

