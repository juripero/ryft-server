#!/bin/bash

#
# RyftOne command line maintenance tool
#

tailLines="-40"

#
# initial state 
#
status=0				# error counter, used as exit status 
hostname=`hostname`
redAttributeON="\\033[1;31m"
greenAttributeON="\\033[1;32m"
attributesOFF="\\033[0m"
finalStatus=0
sleepValue=5
ryft_statusCount=0
problemCounter=0
debug=0

function usage() {
	echo 
	echo "usage:	ryft_status [-help|-?|-v|-verbose|-smoke|-start|-stop|-m|-menu|-fix]"
	echo
	echo "ryft_status -help"
	echo "          this usage display"
	echo "ryft_status -v"
	echo "          -verbose output"
	echo "ryft_status -smoke"
        echo "		checks status then runs smoke test when resources available"
	echo "ryft_status -start"
	echo "		checks status then start processes" 
	echo "ryft_status -stop"
	echo "		checks status and stop processes" 
	echo "ryft_status -m"
	echo "          -menu option"
	echo "ryft_status -fix"
	echo "          -fix problem when recommended by ryft_status"
	echo
	echo "Returns # of problems found as exit code"
	echo

}


ryft_boot_enabled() {
	local returnValue=0
	local i=$1

	initctl show-config $i >>/dev/null 2>&1 
	if [ $? = 0 ]
	then
		x=`initctl show-config $i | grep -q "^  start on" && echo -n boot_on || echo -n boot_off`
		#echo "x=$x"
		if [ $x = "boot_on" ]
		then
			returnValue=1
		fi
	fi
	echo $returnValue
}

function ryft_boot_status() {
	echo
	printf "%-15s" "SERVICE" "BOOT_STATUS" "RUNNING_STATUS" 
	echo
	for i in ryft-server-d ryftwebapidemo consul
	do
		printf "%-15s" $i
		initctl show-config $i >>/dev/null 2>&1 
		if [ $? = 0 ]
		then
			# running processes must be newer than override file to be visible
			x=`initctl show-config $i | grep -q "^  start on" && echo -n boot_on || echo -n boot_off`
			#echo "x=$x"
			if [ $x = "boot_on" ]
			then
				printf "${greenAttributeON}%-15s${attributesOFF}" $x
			else
				printf "${redAttributeON}%-15s${attributesOFF}" $x
			fi

			# sensing file instead
			#printf "%-15s" `cat /etc/init/$i.*| grep -q "^manual" && echo -n boot_off || echo -n boot_on`
	
			x=`service $i status|cut -d' ' -f2-`
			y=`echo "$x"| grep process`
			if [ $? = 0 ]
			then
				printf "${greenAttributeON}%-15s${attributesOFF}" $x
			else
				printf "${redAttributeON}%-15s${attributesOFF}" $x
			fi
			echo
		else
			printf "${redAttributeON}%-15s${attributesOFF}\n" "not_installed" 
		fi
	done
	# ryft1_odbcd
	odbcd_workaround=1
	if [ $odbcd_workaround = 1 ]
	then
		printf "%-15s" ryft1_odbcd 
		printf "${greenAttributeON}%-15s${attributesOFF}" manual
		ryft_ps >/tmp/ryft_status_$$
		runningCount=`cat /tmp/ryft_status_$$|egrep ryft1_odbcd|wc -l`
		if [ $runningCount -gt 0 ]
		then
			ryft1_odbcd_status=`cat /tmp/ryft_status_$$|egrep ryft1_odbcd|awk '{print $2}'`
			printf "${greenAttributeON}%-15s${attributesOFF}" "process $ryft1_odbcd_status"
		fi
        fi
}


#########################

# 0=off, 1=on, 2=higher
debug=0
function ryft_ays()
{
  if [ ! -z "$1" ]
  then
	echo $1
  fi
  read -p "Are you sure? " -n 1 -r
  echo    # (optional) move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    return 0
  else
    return 1
  fi
}

function ryft_menu()
{
  local hostname=`hostname`

  # input parameters
  local MENU_TITLE="$1"

  declare -a MENU_TEXT=("${!2}")
  if [ $debug -gt 1 ] 
  then
  	echo "MENU_TEXT=${MENU_TEXT[@]}"
  fi

  declare -a MENU_ACTIONS=("${!3}")
  if [ $debug -gt 1 ] 
  then
  	echo "MENU_ACTIONS=${MENU_ACTIONS[@]}"
  fi

  local MENU_COMMAND=""
  if [ ! -z "$4" ]
  then
	MENU_COMMAND="$4"               
  fi

  # sanity check since these arrays must be coordinated
  if [ ${#MENU_TEXT[@]} -ne ${#MENU_ACTIONS[@]} ]
  then
	echo "menu \"$MENU_TITLE\" has a configuration problem"
	echo
	return
  fi

  # sanity check for max size
  local ryft_menu_max_entries=33
  if [ ${#MENU_TEXT[@]} -gt $ryft_menu_max_entries ]
  then
	echo "menu \"$MENU_TITLE\" has too many entries. Max $ryft_menu_max_entries"
	echo
	return
  fi

  while [ true ]
  do  	
    if [ MENU_COMMAND != "" ]
    then
	eval ${MENU_COMMAND}
    fi

    echo
  
    # Display items
    local -i I=0
    #                        1         2         3
    #               123456789012345678901234567890123
    local alphabet="0123456789ABCDEFGHIJKLMNOPQRSTUVW"
    echo "########> " $hostname $MENU_TITLE " <########"
    while [ $I -lt ${#MENU_ACTIONS[@]} ]
    do
	select=${alphabet:$I:1}
        echo "$select) ${MENU_TEXT[$I]}"
        #echo "$I) ${MENU_TEXT[$I]}"
        (( I += 1 ))
    done

    # Read keyboard silently, one character at a time, 
    # and save the value in $SELECTION
    local SELECTION
    read -s -n1 SELECTION
    if [ $debug -gt 0 ]
    then
	echo "debug SELECTION=${SELECTION}"
    fi

    # Convert the ascii value of $SELECTION into a numeric index
    local ORD_VALUE=$(LC_CTYPE=C printf '%d' "'$SELECTION")
    (( ORD_VALUE -= 48 ))
    if [ $debug -gt 0 ]
    then
	echo "debug ord_value=${ORD_VALUE}"
    fi
    
    # 0, x, X
    if [ $ORD_VALUE -lt 0 -o $ORD_VALUE -eq 40 -o $ORD_VALUE -eq 72 ] 
    then
	echo "selected ${ORD_VALUE} exit"
	echo
        return
    fi 

    # A..W map to 10+
    if [ $ORD_VALUE -gt 48 -a $ORD_VALUE -lt 72 ] 
    then
	# like hexadecimal
	# A 49 -> 10
	# B 50 -> 11
	# C 51 -> 12
	(( ORD_VALUE -= 39 ))
    fi

    # a..w map to 10+
    if [ $ORD_VALUE -gt 16 -a $ORD_VALUE -lt 40 ] 
    then
	# like hexadecimal
	# a 17 -> 10
	# b 18 -> 11
	# b 19 -> 11
	(( ORD_VALUE -= 7 ))
    fi
	
    # Check if the index is valid
    if [ $ORD_VALUE -ge 0 -a $ORD_VALUE -lt ${#MENU_ACTIONS[@]} ]
    then
	# valid selection returns or evaluates action
	echo "selected ${SELECTION} ${MENU_TEXT[${ORD_VALUE}]}"
	echo
  	
	# 0 ?
	if [ $ORD_VALUE -eq 0 ] 
	then
		return
	else
        	eval ${MENU_ACTIONS[${ORD_VALUE}]}
	fi
    else
        # invalid selection
        echo "-> ${SELECTION} is an INVALID SELECTION"
	echo
    fi
  done
}

#################################

function ryft_start
{
    local serviceList=$1
    local service
    for service in `echo $serviceList`
    do
	# start process if not already running
	echo -e "${greenAttributeON}service $service status | grep process${attributesOFF}"
	service $service status|grep process
	if [ $? != 0 -o $service = "ryft1_odbcd" ]
	then
	    if [ $service = "ryft1_odbcd" ]
	    then
    		ryft_showCommand "sudo /usr/local/ryft/bin/x8664/ryft1_odbcctl -s"
	    else
    		ryft_showCommand "sudo service $service start"
	    fi
	fi
	echo
    done
}

function ryft_start_menu
{
    local START_MENU_TITLE="Ryft Start Menu"

    local -a START_MENU_TEXT
    START_MENU_TEXT[0]="Exit"
    START_MENU_TEXT[1]="Start ALL"
    START_MENU_TEXT[2]="Start ryft-server-d"
    START_MENU_TEXT[3]="Start ryftwebapidemo"
    START_MENU_TEXT[4]="Start ryft1_odbcd"
    START_MENU_TEXT[5]="Start consul"
    
    local -a START_MENU_ACTIONS
    START_MENU_ACTIONS[0]="exit"
    START_MENU_ACTIONS[1]="ryft_separator; ryft_start \"ryft-server-d ryftwebapidemo ryft1_odbcd consul\"; ryft_separator"
    START_MENU_ACTIONS[2]="ryft_start ryft-server-d"
    START_MENU_ACTIONS[3]="ryft_start ryftwebapidemo"
    START_MENU_ACTIONS[4]="ryft_start ryft1_odbcd"
    START_MENU_ACTIONS[5]="ryft_start consul"

    local START_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$START_MENU_TITLE" START_MENU_TEXT[@] START_MENU_ACTIONS[@] "${START_MENU_COMMAND}"
}

################################

function ryft_stop
{
    local serviceList=$1
    local service
    for service in `echo $serviceList`
    do
	# stop process if running 
	echo -e "${greenAttributeON}service $service status | grep process${attributesOFF}"
	service $service status|grep process
	if [ $? = 0 -o $service = "ryft1_odbcd" ]
	then
	    if [ $service = "ryft1_odbcd" ]
	    then
    		ryft_showCommand "sudo /usr/local/ryft/bin/x8664/ryft1_odbcctl -k"
	    else
    		ryft_showCommand "sudo service $service stop"
	    fi
	fi
	echo
    done
}

function ryft_stop_menu
{
    local STOP_MENU_TITLE="Ryft Stop Menu"

    local -a STOP_MENU_TEXT
    STOP_MENU_TEXT[0]="Exit"
    STOP_MENU_TEXT[1]="Stop ALL"
    STOP_MENU_TEXT[2]="Stop ryft-server-d"
    STOP_MENU_TEXT[3]="Stop ryftwebapidemo"
    STOP_MENU_TEXT[4]="Stop ryft1_odbcd"
    STOP_MENU_TEXT[5]="Stop consul"
    
    local -a STOP_MENU_ACTIONS
    STOP_MENU_ACTIONS[0]="exit"
    STOP_MENU_ACTIONS[1]="ryft_separator; ryft_stop \"ryft-server-d ryftwebapidemo ryft1_odbcd consul\"; ryft_separator";
    STOP_MENU_ACTIONS[2]="ryft_stop ryft-server-d"
    STOP_MENU_ACTIONS[3]="ryft_stop ryftwebapidemo"
    STOP_MENU_ACTIONS[4]="ryft_stop ryft1_odbcd"
    STOP_MENU_ACTIONS[5]="ryft_stop consul"

    local STOP_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$STOP_MENU_TITLE" STOP_MENU_TEXT[@] STOP_MENU_ACTIONS[@] "${STOP_MENU_COMMAND}"
}

###################################

function ryft_restart
{
    local serviceList=$1
    local service
    for service in `echo $serviceList`
    do
	if [ $service = "ryft1_odbcd" ]
	then
    		ryft_showCommand "sudo /usr/local/ryft/bin/x8664/ryft1_odbcctl -s"
	else
    		ryft_showCommand "sudo service $service restart"
	fi
    done
}
function ryft_restart_menu
{
    RESTART_MENU_TITLE="Ryft Restart Menu"

    local -a RESTART_MENU_TEXT
    RESTART_MENU_TEXT[0]="Exit"
    RESTART_MENU_TEXT[1]="Restart ALL"
    RESTART_MENU_TEXT[2]="Restart ryft-server-d"
    RESTART_MENU_TEXT[3]="Restart ryftwebapidemo"
    RESTART_MENU_TEXT[4]="Restart ryft1_odbcd"
    RESTART_MENU_TEXT[5]="Restart consul"

    local -a RESTART_MENU_ACTIONS
    RESTART_MENU_ACTIONS[0]="exit"
    RESTART_MENU_ACTIONS[1]="ryft_restart \"ryft-server-d ryftwebapidemo ryft1_odbcd consul\""
    RESTART_MENU_ACTIONS[2]="ryft_restart ryft-server-d"
    RESTART_MENU_ACTIONS[3]="ryft_restart ryftwebapidemo"
    RESTART_MENU_ACTIONS[4]="ryft_restart ryft1_odbcd"
    RESTART_MENU_ACTIONS[5]="ryft_restart consul"

    local RESTART_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$RESTART_MENU_TITLE" RESTART_MENU_TEXT[@] RESTART_MENU_ACTIONS[@] "${RESTART_MENU_COMMAND}"
}

#######################################0

function ryft_boot_off
{
    local serviceList=$1
    local service
    local f
    for service in `echo $serviceList`
    do
	# disable start at boot
    	echo "boot_off $service"
	f=/etc/init/${service}.override
	echo -e "${greenAttributeON}echo \"manual\" | sudo tee ${f}${attributesOFF}"
	echo "manual"|sudo tee ${f}

	# restart process if running	
	echo -e "${greenAttributeON}service $service status | grep process${attributesOFF}"
	service $service status|grep process
	if [ $? = 0 ]
	then
    		ryft_showCommand "sudo service $service restart"
	fi
	echo
    done
}
function ryft_boot_on
{
    local serviceList=$1
    local service
    local f

    for service in `echo $serviceList`
    do
	# enable start at boot
    	echo "boot_on $service"
	f=/etc/init/${service}.override
        ryft_showCommand "sudo rm -f ${f}"

	# restart process if running
	echo -e "${greenAttributeON}service $service status | grep process${attributesOFF}"
	service $service status|grep process
	if [ $? = 0 ]
	then
    		ryft_showCommand "sudo service $service restart"
	fi
	echo
    done
}

function ryft_boot_toggle
{
    local serviceList=$1
    local service
    local f

    for service in `echo $serviceList`
    do
        f=/etc/init/${service}.override
        if [ -f $f ]
        then
            ryft_boot_on $service
        else
            ryft_boot_off $service
        fi
    done
}

function ryft_boot_toggle_menu
{
    local BOOT_TOGGLE_MENU_TITLE="Ryft Boot Toggle Menu"
    
    local -a BOOT_TOGGLE_MENU_TEXT
    BOOT_TOGGLE_MENU_TEXT[0]="Exit"
    BOOT_TOGGLE_MENU_TEXT[1]="Boot toggle ALL"
    BOOT_TOGGLE_MENU_TEXT[2]="Boot toggle ryft_server_d"
    BOOT_TOGGLE_MENU_TEXT[3]="Boot toggle ryftwebapidemo"
    BOOT_TOGGLE_MENU_TEXT[4]="Boot toggle ryft1_odbcd"
    BOOT_TOGGLE_MENU_TEXT[5]="Boot toggle consul"
    
    local -a BOOT_TOGGLE_MENU_ACTIONS
    BOOT_TOGGLE_MENU_ACTIONS[0]="exit"
    BOOT_TOGGLE_MENU_ACTIONS[1]="ryft_separator; ryft_boot_toggle \"ryft-server-d ryftwebapidemo ryft1_odbcd consul\"; ryft_separator;"
    BOOT_TOGGLE_MENU_ACTIONS[2]="ryft_boot_toggle ryft-server-d"
    BOOT_TOGGLE_MENU_ACTIONS[3]="ryft_boot_toggle ryftwebapidemo"
    BOOT_TOGGLE_MENU_ACTIONS[4]="ryft_boot_toggle ryft1_odbcd"
    BOOT_TOGGLE_MENU_ACTIONS[5]="ryft_boot_toggle consul"

    local BOOT_TOGGLE_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$BOOT_TOGGLE_MENU_TITLE" BOOT_TOGGLE_MENU_TEXT[@] BOOT_TOGGLE_MENU_ACTIONS[@] "${BOOT_TOGGLE_MENU_COMMAND}"
}

function ryft_boot_on_menu
{
    local BOOT_ON_MENU_TITLE="Ryft Boot On Menu"

    local -a BOOT_ON_MENU_TEXT
    BOOT_ON_MENU_TEXT[0]="Exit"
    BOOT_ON_MENU_TEXT[1]="Boot on ALL"
    BOOT_ON_MENU_TEXT[2]="Boot on ryft_server_d"
    BOOT_ON_MENU_TEXT[3]="Boot on ryftwebapidemo"
    BOOT_ON_MENU_TEXT[4]="Boot on ryft1_odbcd"
    BOOT_ON_MENU_TEXT[5]="Boot on consul"
    
    local -a BOOT_ON_MENU_ACTIONS
    BOOT_ON_MENU_ACTIONS[0]="exit"
    BOOT_ON_MENU_ACTIONS[1]="ryft_separator; ryft_boot_on \"ryft-server-d ryftwebapidemo ryft1_odbcd consul\"; ryft_separator;"
    BOOT_ON_MENU_ACTIONS[2]="ryft_boot_on ryft-server-d"
    BOOT_ON_MENU_ACTIONS[3]="ryft_boot_on ryftwebapidemo"
    BOOT_ON_MENU_ACTIONS[4]="ryft_boot_on ryft1_odbcd"
    BOOT_ON_MENU_ACTIONS[5]="ryft_boot_on consul"
    
    local BOOT_ON_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$BOOT_ON_MENU_TITLE" BOOT_ON_MENU_TEXT[@] BOOT_ON_MENU_ACTIONS[@] "${BOOT_ON_MENU_COMMAND}"
}

function ryft_boot_off_menu
{
    local BOOT_OFF_MENU_TITLE="Ryft Boot Off Menu"

    local -a BOOT_OFF_MENU_TEXT
    BOOT_OFF_MENU_TEXT[0]="Exit"
    BOOT_OFF_MENU_TEXT[1]="Boot off ALL"
    BOOT_OFF_MENU_TEXT[2]="Boot off ryft_server_d"
    BOOT_OFF_MENU_TEXT[3]="Boot off ryftwebapidemo"
    BOOT_OFF_MENU_TEXT[4]="Boot off ryft1_odbcd"
    BOOT_OFF_MENU_TEXT[5]="Boot off consul"

    local -a BOOT_OFF_MENU_ACTIONS
    BOOT_OFF_MENU_ACTIONS[0]="exit"
    BOOT_OFF_MENU_ACTIONS[1]="ryft_separator; ryft_boot_off \"ryft-server-d ryftwebapidemo ryft1_odbcd consul\"; ryft_separator"
    BOOT_OFF_MENU_ACTIONS[2]="ryft_boot_off ryft-server-d"
    BOOT_OFF_MENU_ACTIONS[3]="ryft_boot_off ryftwebapidemo"
    BOOT_OFF_MENU_ACTIONS[4]="ryft_boot_off ryft1_odbc"
    BOOT_OFF_MENU_ACTIONS[5]="ryft_boot_off consul"

    local BOOT_OFF_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$BOOT_OFF_MENU_TITLE" BOOT_OFF_MENU_TEXT[@] BOOT_OFF_MENU_ACTIONS[@] "${BOOT_OFF_MENU_COMMAND}"
}

#######################################0

function ryft_ryftone_maintenance_menu
{
    local MAINTENANCE_MENU_TITLE="RyftOne Maintenance Menu"

    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="Smoke test"
    MAINTENANCE_MENU_TEXT[2]="Cpc"
    MAINTENANCE_MENU_TEXT[3]="Recycle"
    MAINTENANCE_MENU_TEXT[4]="File system check/repair (fsck_rhfs -y -Y)"
    MAINTENANCE_MENU_TEXT[5]="Hardware reset rhfs ccc"
    MAINTENANCE_MENU_TEXT[6]="Poweroff"
    
    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="~ryftuser/ryft/regression/util/smoke.sh"
    MAINTENANCE_MENU_ACTIONS[2]="~ryftuser/ryft/regression/util/cpc"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_ays \"Requested action restarts rhfsd, which temporarily dismounts /ryftone filsystem.\" && ~ryftuser/ryft/regression/util/recycle"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_ays \"Requested action performs /ryftone file system check/repair\" && sudo fsck_rhfs -y -Y"
    MAINTENANCE_MENU_ACTIONS[6]="ryft_ays \"Requested action permanently removes all /ryftone filesystem data.\" && ryft_ays \"Double checking...\" && sudo ~ryftuser/ryft/regression/util/hw_reset_rhfs_ccc.shx || echo \"not sure\""
    MAINTENANCE_MENU_ACTIONS[7]="ryft_ays \"Requested action will power down the ryftone.\" && sudo poweroff || echo \"not sure\""

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

#######################################0

function ryft_ryft_server_d_maintenance_menu
{
    local processName=ryft-server-d
    local configFile=/etc/ryft-rest.conf

    local MAINTENANCE_MENU_TITLE="$processName Maintenance Menu"
	
    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="$processName restart"
    MAINTENANCE_MENU_TEXT[2]="$processName stop"
    MAINTENANCE_MENU_TEXT[3]="$processName boot_on"
    MAINTENANCE_MENU_TEXT[4]="$processName boot_off"
    MAINTENANCE_MENU_TEXT[5]="$processName configuration	(cat $configFile)"
    
    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="ryft_restart $processName"
    MAINTENANCE_MENU_ACTIONS[2]="ryft_stop $processName"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_boot_on $processName"
    MAINTENANCE_MENU_ACTIONS[4]="ryft_boot_off $processName"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_separator; cat $configFile || echo \"File Not Found. Using default configuration\"; ryft_separator"

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

#######################################0

function ryft_consul_maintenance_menu
{
    local processName=consul
    local configFile=/etc/consul.conf

    local MAINTENANCE_MENU_TITLE="$processName Maintenance Menu"
	
    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="$processName restart"
    MAINTENANCE_MENU_TEXT[2]="$processName stop"
    MAINTENANCE_MENU_TEXT[3]="$processName boot_on"
    MAINTENANCE_MENU_TEXT[4]="$processName boot_off"
    MAINTENANCE_MENU_TEXT[5]="$processName configuration	(cat $configFile)"
    
    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="ryft_restart $processName"
    MAINTENANCE_MENU_ACTIONS[2]="ryft_stop $processName"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_boot_on $processName"
    MAINTENANCE_MENU_ACTIONS[4]="ryft_boot_off $processName"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_separator; cat $configFile; ryft_separator"

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

#######################################0

function ryft_ryft1_odbcd_maintenance_menu
{
    local processName=ryft1_odbcd
    local configFile=/usr/local/ryft/bin/x8664/.ryftone.server.ini

    local MAINTENANCE_MENU_TITLE="$processName Maintenance Menu"
	
    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="$processName restart"
    MAINTENANCE_MENU_TEXT[2]="$processName stop"
    MAINTENANCE_MENU_TEXT[3]="$processName boot_on"
    MAINTENANCE_MENU_TEXT[4]="$processName boot_off"
    MAINTENANCE_MENU_TEXT[5]="$processName configuration	(cat $configFile)"
    
    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="ryft_restart $processName"
    MAINTENANCE_MENU_ACTIONS[2]="ryft_stop $processName"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_boot_on $processName"
    MAINTENANCE_MENU_ACTIONS[4]="ryft_boot_off $processName"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_separator; cat $configFile; ryft_separator"

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

#######################################0

function ryft_ryftwebapidemo_maintenance_menu
{
    local processName=ryftwebapidemo
    local configFile=/opt/ryft-demo/conf/ryft.properties

    local MAINTENANCE_MENU_TITLE="$processName Maintenance Menu"
	
    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="$processName restart"
    MAINTENANCE_MENU_TEXT[2]="$processName stop"
    MAINTENANCE_MENU_TEXT[3]="$processName boot_on"
    MAINTENANCE_MENU_TEXT[4]="$processName boot_off"
    MAINTENANCE_MENU_TEXT[5]="$processName configuration	(cat $configFile)"
    
    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="ryft_restart $processName"
    MAINTENANCE_MENU_ACTIONS[2]="ryft_stop $processName"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_boot_on $processName"
    MAINTENANCE_MENU_ACTIONS[4]="ryft_boot_off $processName"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_separator; cat $configFile; echo; ryft_separator"

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

#######################################0

function ryft_maintenance_menu
{
    local MAINTENANCE_MENU_TITLE="Maintenance Menu"

    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="RyftONE Maintenance"
    MAINTENANCE_MENU_TEXT[2]="ryft-server-d Maintenance"
    MAINTENANCE_MENU_TEXT[3]="ryftwebapidemo Maintenance"
    MAINTENANCE_MENU_TEXT[4]="ryft1_odbcd Maintenance"
    MAINTENANCE_MENU_TEXT[5]="consul Maintenance"
    
    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="ryft_ryftone_maintenance_menu"
    MAINTENANCE_MENU_ACTIONS[2]="ryft_ryft_server_d_maintenance_menu"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_ryftwebapidemo_maintenance_menu"
    MAINTENANCE_MENU_ACTIONS[4]="ryft_ryft1_odbcd_maintenance_menu"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_consul_maintenance_menu"

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

####################################
function ryft_showCommand() {
	echo -e "${greenAttributeON}$1${attributesOFF}"
	$1
}

function ryftone_clean_logs()
{
	ryft_showCommand "sudo service rhfsd stop" 
	ryft_showCommand "sudo service ccc_mgr stop" 
	ryft_showCommand "sudo service tlogd stop" 
	ryft_showCommand "sudo rm -f /var/log/ryft/ryftone.log"
	ryft_showCommand "sudo service tlogd start" 
	ryft_showCommand "sudo service rhfsd start"
	ryft_showCommand "sleep 2s" 
	ryft_showCommand "sudo service ccc_mgr start" 
}

function ryft_separator() 
{
    echo "-----------------------------------------------"
}

function ryft_logs_menu
{
    local ryftoneLog=/var/log/ryft/ryftone.log
    local ryft_server_dLog=~ryftuser/ryft-server-d-start.log
    local ryftwebapidemoLog=/tmp/apidemo.log
    local ryft1_odbcdLog=/usr/local/ryft/bin/x8664/ryftone_server.log
    local consulLog=/var/log/consul
    
    local LOGS_MENU_TITLE="Ryft Logs Menu"

    local -a LOGS_MENU_TEXT
    LOGS_MENU_TEXT[0]="Exit"
    LOGS_MENU_TEXT[1]="RyftOne log              (tail ${tailLines} $ryftoneLog)"
    LOGS_MENU_TEXT[2]="ryft-server-d log        (tail ${tailLines} $ryft_server_dLog)"
    LOGS_MENU_TEXT[3]="ryftwebapidemo log       (tail ${tailLines} $ryftwebapidemoLog)"
    LOGS_MENU_TEXT[4]="ryft1_odbcd log          (tail ${tailLines} $ryft1_odbcdLog)"
    LOGS_MENU_TEXT[5]="consul log               (tail ${tailLines} $consulLog)"
    LOGS_MENU_TEXT[6]="RyftOne diagnostic dump  (sudo ryft_diagnostics_dump)"
    LOGS_MENU_TEXT[7]="RyftOne clean log        (from Admin Guide - TroubleShooting Section)"
    
    local -a LOGS_MENU_ACTIONS
    LOGS_MENU_ACTIONS[0]="exit"
    LOGS_MENU_ACTIONS[1]="ryft_separator; tail ${tailLines} $ryftoneLog; ryft_separator"
    LOGS_MENU_ACTIONS[2]="ryft_separator; tail ${tailLines} $ryft_server_dLog; ryft_separator"
    LOGS_MENU_ACTIONS[3]="ryft_separator; tail ${tailLines} $ryftwebapidemoLog; ryft_separator"
    LOGS_MENU_ACTIONS[4]="ryft_separator; tail ${tailLines} $ryft1_odbcdLog; ryft_separator"
    LOGS_MENU_ACTIONS[5]="ryft_separator; tail ${tailLines} $consulLog; ryft_separator"
    LOGS_MENU_ACTIONS[6]="ryft_separator; ryft_showCommand \"sudo ryft_diagnostics_dump\" && ryft_separator; echo -n \" diagnostic dump filename is:\" && ls -t *.bz2|head -1; ryft_separator"
    LOGS_MENU_ACTIONS[7]="ryft_ays \"Requested action restarts rhfsd, which temporarily dismounts /ryftone filsystem.\" && ryft_separator && ryftone_clean_logs && ryft_separator"

    local LOGS_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$LOGS_MENU_TITLE" LOGS_MENU_TEXT[@] LOGS_MENU_ACTIONS[@] "$LOGS_MENU_COMMAND" 
}


function ryft_main_menu
{
    local MAIN_MENU_TITLE="Ryft Menu"

    local -a MAIN_MENU_TEXT
    MAIN_MENU_TEXT[0]="Exit"
    MAIN_MENU_TEXT[1]="Start Menu"
    MAIN_MENU_TEXT[2]="Stop Menu"
    MAIN_MENU_TEXT[3]="Restart Menu"
    MAIN_MENU_TEXT[4]="Boot on Menu"
    MAIN_MENU_TEXT[5]="Boot off Menu"
    #MAIN_MENU_TEXT[6]="boot toggle Menu"
    MAIN_MENU_TEXT[6]="Maintenance Menu"
    MAIN_MENU_TEXT[7]="Ryft logs Menu"
    
    local -a MAIN_MENU_ACTIONS
    MAIN_MENU_ACTIONS[0]="exit"
    MAIN_MENU_ACTIONS[1]="ryft_start_menu"
    MAIN_MENU_ACTIONS[2]="ryft_stop_menu"
    MAIN_MENU_ACTIONS[3]="ryft_restart_menu"
    MAIN_MENU_ACTIONS[4]="ryft_boot_on_menu"
    MAIN_MENU_ACTIONS[5]="ryft_boot_off_menu"
    #MAIN_MENU_ACTIONS[6]="ryft_boot_toggle_menu"
    MAIN_MENU_ACTIONS[6]="ryft_maintenance_menu"
    MAIN_MENU_ACTIONS[7]="ryft_logs_menu"

    local MAIN_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAIN_MENU_TITLE" MAIN_MENU_TEXT[@] MAIN_MENU_ACTIONS[@] "$MAIN_MENU_COMMAND" 
}

####################################
	
#status=$((status+1))

#
# process input parameters
#
verbose=0
smokeFlag=0
helpFlag=0
startFlag=0
stopFlag=0
menuFlag=0
fixFlag=0
while [[ $# > 0 ]]; do
	okay=0

	if [ "$1" = "-v" -o "$1" = "-verbose" ]
	then
		verbose=1
		okay=1
	fi

	if [ "$1" == "-smoke" ]
	then
		#echo "smoke test enabled"
		smokeFlag=1
		okay=1
	fi
	
	if [ "$1" == "-start" ]
	then
		#echo "start enabled"
		startFlag=1
		okay=1
	fi

	if [ "$1" == "-stop" ]
	then
		stopFlag=1
		okay=1
	fi

	if [ "$1" == "-help" -o "$1" == "-?" ]
	then
		#echo "help enabled"
		helpFlag=1
		okay=1
	fi
	
	if [ "$1" == "-m" -o "$1" == "-menu" ]
	then
		menuFlag=1
		okay=1
		ryft_main_menu
		exit
	fi
	
	if [ "$1" == "-fix" ]
	then
		fixFlag=1
		okay=1
	fi

	if [ $okay = 0 ]
	then
		usage
		exit 0
	fi

	shift
done


#
# ryft process detection
#
ryft_ps_filename=/tmp/ryft_ps_$$
ryft_status_filename=/tmp/ryft_status_$$
ryft_status_verbose=/tmp/ryft_status_verbose_$$
ryft_ryftone_files=/tmp/ryft_ryftone_files_$$
detect_process() {
	returnValue=`cat $ryft_ps_filename|egrep "$1"|wc -l`
	echo $returnValue
}

#
# cleanup
#
cleanup() {
	rm -f $ryft_ps_filename
	rm -f $ryft_status_filename
	rm -f $ryft_status_verbose
	rm -f $ryft_ryftone_files
}

#
# ryft status items
#


#
# filesystem won't mount
#
filesystem_filecount=1
filesystem_filecount_reset() {
	filesystem_filecount=1
}
filesystem_filecount_fix() {
	local stat=0

	if [ -e /ryftone ]
	then
		local suffix=`date "+%Y%m%d-%H%M%S"`
		echo "#move /ryftone"

		echo "sudo mv /ryftone /ryftone.$suffix"
		sudo mv /ryftone /ryftone.$suffix
		stat=$?
	fi

	if [ $stat = 0 ]
	then
		echo "#create new /ryftone"

		echo "sudo mkdir /ryftone" &&
		sudo mkdir /ryftone &&
		echo "sudo chmod 775 /ryftone" &&
		sudo chmod 775 /ryftone &&
		echo "sudo chown ryftone.ryftone /ryftone"
		sudo chown ryftone.ryftone /ryftone
		stat=$?

		if [ $stat = 0 ]
		then
			sudo service rhfsd start &&
			sudo service ccc_mgr start 
			#stat=$?
		fi
	fi

	if [ $stat != 0 ]
	then
		echo "Encountered an error creating /ryftone "
	fi
}
show_filesystem_filecount_error() {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* /ryftone filesystem not found or will not mount with files present. ${attributesOFF}Issue following command to fix problem (existing files will be moved to /ryftone.<YYYYmmdd-HHMMSS>):"
	echo "	'ryft_status -fix"
	if [ $filesystem_filecount != 0 ]
	then
		echo "The following /ryftone files were found: "
		cat $ryft_ryftone_files|sed 's/^/	/g'
	else
		echo "No /ryftone files were found."
	fi
}


#
filesystem_status=0
filesystem_error=0
show_filesystem_error () {
	#echo "*** /ryftone filesystem is not mounted.  To correct, try commands: '~/ryft/regression/util/cpc; ~/ryft/regression/util/recycle'  ***"
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* /ryftone filesystem is not mounted or smoke test failed.${attributesOFF}"
	echo "Follow corrective actions in following order:"
	echo "1. command: '(cd ~ryftuser/ryft/regression/util;./cpc;./recycle)'"
	echo "   Repeat command if 'ryft_status' doesn't indicate OKAY"
        echo "   If ryft_status is not OKAY, issue 'sudo fsck_rhfs -y -Y'"
 	echo "   If ryft_status is not OKAY, advance to step #2."
	echo "   If OKAY, 'ryft_status -smoke' should show no problems."
	echo "   if 'ryft_status -smoke' problems persist, advance to next step."
	echo
	#echo "         1         2         3         4         5         6         7         8"
	#echo "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
	echo "2. command: 'sudo poweroff;' then remote/manually power on"
	echo "   'ryft_status -smoke' should show no problems when problem is resolved."
	echo "   if 'ryft_status -smoke' problems persist, repeat steps 1 and 2 one time."
	echo "   if 'ryft_status -smoke' problems persist, advance to next step."
	echo
	echo "3. do 3 times 'sudo ~/ryft/regression/util/hw_reset_rhfs_ccc.sh; sudo poweroff;'"
	echo "   ***NOTE***: this process will require restoring /ryftone filesystem data" 
	echo "   perform 'ryft_status -smoke' after completing 3 hw_reset, poweroff cycles'"
	echo "   if 'ryft_status -smoke' problems persist, call customer support"
	echo "   If OKAY, restore /ryftone filesystem data"
	echo
	#echo "         1         2         3         4         5         6         7         8"
	#echo "12345678901234567890123456789012345678901234567890123456789012345678901234567890"

}


#
tlogd_status=0
tlogd_error=0
tlogd_status_reset() {
	tlogd_status=0
	tlogd_error=0
}
show_tlogd_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* tlogd is not running. ${attributesOFF}To start tlogd issue command: "
	echo "	'~ryftuser/ryft/regression/util/recycle'"
}

#
rhfsd_status=0
rhfsd_error=0
show_rhfsd_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* rhfsd is not running. ${attributesOFF}To start rhfsd issue command: "
	echo "	'~ryftuser/ryft/regression/util/recycle'"
}

#
ccc_mgr_status=0
ccc_mgr_error=0
show_ccc_mgr_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* ccc_mgr is not running. ${attributesOFF}To start ccc_mgr, issue command: "
	echo "	'~ryftuser/ryft/regression/util/recycle'"
}

ryftServer=NotInstalled
test -e /usr/bin/ryft-server
if [ $? == 0 ] 
then
	ryftServer=Installed
fi
ryftServer_boot=`ryft_boot_enabled ryft-server-d`
ryftServer_status=0
ryftServer_error=0
ryftServer_startCommand="sudo service ryft-server-d start"
ryftServer_stopCommand="sudo service ryft-server-d stop"
ryftServer_start() {
	echo "--------------------"
	echo "starting ryft-server-d with $ryftServer_startCommand"
	${ryftServer_startCommand}
	if [ $? != 0 ]
	then
		echo -e "${redAttributeON}* problem starting ryft-server. ${attributesOFF}"
	fi
}
ryftServer_stop() {
	echo "--------------------"
	echo "stopping ryft-server-d with $ryftServer_stopCommand"
	${ryftServer_stopCommand}
	if [ $? != 0 ]
	then
		echo -e "${redAttributeON}* problem stopping ryft-server. ${attributesOFF}"
	fi
}
show_ryftServer_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* ryft-server-d is not running.${attributesOFF} To start ryft-server-d, issue command: "
	echo "	'$ryftServer_startCommand'"
}


ryft1_odbcd=NotInstalled
test -d /usr/local/ryft/bin
if [ $? == 0 ] 
then
	ryft1_odbcd=Installed
fi
ryft1_odbcd_boot=`ryft_boot_enabled ryft1_odbcd`
if [ $debug != 0 ]
then
	echo "ryft1_odbcd=$ryft1_odbcd"
fi
ryft1_odbcd_status=0
ryft1_odbcd_error=0
ryft1_odbcd_startCommand="/usr/local/ryft/bin/x8664/ryft1_odbcctl -s"
ryft1_odbcd_start() {
	echo "--------------------"
	echo "starting ryft1_odbcd with $ryft1_odbcd_startCommand"
	${ryft1_odbcd_startCommand}
}
ryft1_odbcd_stopCommand="/usr/local/ryft/bin/x8664/ryft1_odbcctl -k"
ryft1_odbcd_stop() {
	echo "--------------------"
	echo "stoppng ryft1_odbcd with $ryft1_odbcd_stopCommand"
	${ryft1_odbcd_stopCommand}
}
show_ryft1_odbcd_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* ryft1_odbcd is not running.${attributesOFF} To start ryft1_odbcd, issue command"
	echo "	'$ryft1_odbcd_startCommand'"
	#echo "or one of following:"
	#echo "	'su ryftuser -c /usr/local/ryft/bin/x8664/ryft1_odbcctl -s"
	#echo "	'sudo service ryft1_odbcd start'"
}

#
consul=NotInstalled
test -d /opt/consul/bin
if [ $? == 0 ] 
then
	consul=Installed
fi
if [ $debug != 0 ]
then
	echo "consul=$consul"
fi
consul_boot=`ryft_boot_enabled consul`
consul_status=0
consul_error=0
consul_startCommand="sudo service consul start"
consul_start() {
	echo "--------------------"
	echo "starting consul with $consul_startCommand"
	${consul_startCommand}
}
consul_stopCommand="sudo service consul stop"
consul_stop() {
	echo "--------------------"
	echo "stopping consul with $consul_stopCommand"
	${consul_stopCommand}
}
show_consul_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* consul is not running.${attributesOFF} To start consul, issue command: "
	echo "	'$consul_startCommand'"
}

apidemo=NotInstalled
test -d ~ryftuser/ryft/apidemo || test -d /opt/ryft-demo
if [ $? == 0 ] 
then
	apidemo=Installed
fi
if [ $debug != 0 ]
then
	echo "apidemo=$apidemo"
fi
apidemo_boot=`ryft_boot_enabled ryftwebapidemo`
apidemo_status=0
apidemo_error=0
apidemo_startCommand="sudo service ryftwebapidemo start"
apidemo_start() {
	echo "--------------------"
	echo "starting apidemo with $apidemo_startCommand"
	${apidemo_startCommand}
}
apidemo_stopCommand="sudo service ryftwebapidemo stop"
apidemo_stop() {
	echo "--------------------"
	echo "stopping apidemo with $apidemo_stopCommand"
	${apidemo_stopCommand}
}
show_apidemo_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* apidemo is not running.${attributesOFF} To start, issue command:"
	echo "	'$apidemo_startCommand'"
}


showErrorDisplay() {
	echo 
	echo "show error display ---------------------------"
	if [ $ryft1Server == "Installed" ]
	then
		show_ryftServer_error 
	fi
	if [ $ryft1_odbcd == "Installed" ]
	then
		show_ryft1_odbcd_error 
	fi
	if [ $consul == "Installed" ]
	then
		show_consul_error
	fi
	if [ $apidemo == "Installed" ]
	then
		show_apidemo_error
	fi

	show_tlogd_error
	show_rhfsd_error
	show_ccc_mgr_error
	show_filesystem_error 

	echo "show error display ---------------------------"
}
showCommandDisplay() {
	echo 
	echo "show command display ---------------------------"

	echo

	echo "ryftwebapidemo start/stop process"
	echo "	$apidemo_startCommand"
	echo "	$apidemo_stopCommand"
	echo "ryftwebapidemo boot_on/boot_off process"
	echo "	sudo rm -f /etc/init/ryftwebapidemo.override"
	echo "	echo \"manual\" | sudo tee /etc/init/ryftwebapidemo.override"

	echo
	
	echo "ryft-server-d start/stop process"
	echo "	$ryftServer_startCommand"
	echo "	$ryftServer_stopCommand"
	echo "ryft-server-d boot_on/boot_off process"
	echo "	sudo rm -f /etc/init/ryft-server-d.override"
	echo "	echo \"manual\" | sudo tee /etc/init/ryft-server-d.override"

	echo

	echo "consul start/stop process"
	echo "	sudo service consul start"
	echo "	sudo service consul stop"
	echo "consul boot_on/boot_off process"
	echo "	sudo rm -f /etc/init/consul.override"
	echo "	echo \"manual\" | sudo tee /etc/init/consul.override"

	echo 

	echo "ryft1_odbcd start/stop process"
	echo "	" $ryft1_odbcd_startCommand
	echo "	" $ryft1_odbcd_stopCommand
	echo "ryft1_odbcd boot_on/boot_off process"
	echo "	 sudo rm -f /etc/init/ryft1_odbcd.override"
	echo "	 echo \"manual\" | sudo tee /etc/init/ryft1_odbcd.override"

	echo

	echo "show command display ---------------------------"
}


if [ $helpFlag = 1 ]
then
	usage
	showErrorDisplay
	showCommandDisplay
	exit 0
fi

ryft_status() {
	expectedProcessCount=3		# rhfsd, ccc_mgr, tlogd

	#
	# start status colleciton
	#
	ryft_ps >$ryft_ps_filename

	#
	# reset status and error conditions
	#
	status=0

	filesystem_filecount_reset

	filesystem_status=0
	filesystem_error=0

	tlogd_status_reset

	rhfsd_status=0
	rhfsd_error=0

	ccc_mgr_status=0
	ccc_mgr_error=0

	ryftServer_status=0
	ryftServer_error=0
	ryftServer_boot=`ryft_boot_enabled ryft-server-d`
	if [ $ryftServer_boot = 1 ]
	then
		expectedProcessCount=$((expectedProcessCount+1))
	fi

	ryft1_odbcd_status=0
	ryft1_odbcd_error=0
	ryft1_odbcd_boot=`ryft_boot_enabled ryft1_odbcd`
	if [ $ryft1_odbcd_boot = 1 ]
	then
		expectedProcessCount=$((expectedProcessCount+1))
	fi

	consul_status=0
	consul_error=0
	consul_boot=`ryft_boot_enabled consul`
	if [ $consul_boot = 1 ]
	then
		expectedProcessCount=$((expectedProcessCount+1))
	fi

	apidemo_status=0
	apidemo_error=0
	apidemo_boot=`ryft_boot_enabled ryftwebapidemo`
	if [ $apidemo_boot = 1 ]
	then
		expectedProcessCount=$((expectedProcessCount+1))
	fi

	ryft_statusCount=$((ryft_statusCount+1))
	if [ $ryft_statusCount != 1 ]
	then
		#echo "--------------------"
		echo "$hostname status"
		echo "--------------------"
	fi

	#
	# /ryftone filesystem status
	#
	#echo
	(echo "$hostname Filesystem" `date` 
	df -h|egrep '^Filesystem|/storage|/ryftone' >$ryft_status_filename
	cat $ryft_status_filename
	)>>$ryft_status_verbose
	ryftoneMounted=`cat $ryft_status_filename|grep "/ryftone"|grep "/dev/fuse"|wc -l`
	if [ $ryftoneMounted != 1 ]
	then
		filesystem_error=1
		status=$((status+1))

		filesystem_filecount=`find /ryftone 2>/dev/null|wc -l`
		if [ $filesystem_filecount != 1 ]
		then
			#status=$((status+1))
			find /ryftone/ >$ryft_ryftone_files 2>/dev/null
		fi
	fi
	
	#
	# ryft process status
	#
	(echo
	processCount=`cat $ryft_ps_filename|tail -n +1|wc -l`
	if [ $processCount != $expectedProcessCount ]
	then
		echo "$hostname Processes processCount=$processCount, but expecting $expectedProcessCount processes" 
	else
		echo "$hostname Processes" 
	fi
	cat $ryft_ps_filename 
	)>>$ryft_status_verbose
	
	tlogd_status=`detect_process "tlogd"`
	#echo "tlogd_status=$tlogd_status"
	rhfsd_status=`detect_process "rhfsd"`
	# echo "rhfsd_status=$rhfsd_status"
	ccc_mgr_status=`detect_process "ccc_mgr"`
	# echo "ccc_mgr_status=$ccc_mgr_status"
	ryftServer_status=`detect_process "ryft-server"`
	#echo "ryftServer_status=$ryftServer_status"
	ryft1_odbcd_status=`detect_process "ryft1_odbcd"`
	# echo "ryft1_odbcd_status=$ryft1_odbcd_status"
	consul_status=`detect_process "/opt/consul/bin/consul"`
	# echo "consul_status=$consul_status"
	apidemo_status=`detect_process 'java\s+-cp\s+conf:lib/\*\s+com.metasys.ryft.DemoApp'`
	#echo "apidemo_status=$apidemo_status"
	
	if [ $tlogd_status = 0 ]
	then
		tlogd_error=1
		status=$((status+1))
	fi
	if [ $rhfsd_status = 0 ]
	then
		rhfsd_error=1
		if [ $filesystem_filecount = 1 ]
		then
			status=$((status+1))
		fi
	fi
	if [ $ccc_mgr_status = 0 ]
	then
		ccc_mgr_error=1
		status=$((status+1))
	fi

	#echo "ryftServer=$ryftServer, ryftServer_boot=$ryftServer_boot, ryftServer_status=$ryftServer_status"
	if [ $ryftServer = "Installed"  -a $ryftServer_boot != 0  -a $ryftServer_status = 0 ]
	then
		ryftServer_error=1
		status=$((status+1))
	fi

	#echo "ryft1_odbcd=$ryft1_odbcd, ryft1_odbcd_boot=$ryft1_odbcd_boot, ryft1_odbcd_status=$ryft1_odbcd_status"
	if [ $ryft1_odbcd = "Installed" -a $ryft1_odbcd_boot != 0 -a $ryft1_odbcd_status = 0 ]
	then
		ryft1_odbcd_error=1
		status=$((status+1))
	fi

	#echo "consul=$consul, consul_boot=$consul_boot, consul_status=$consul_status"
	if [ $consul = "Installed"      -a $consul_boot != 0      -a $consul_status = 0 ]
	then
		consul_error=1
		status=$((status+1))
	fi

	#echo "apidemo=$apidemo, apidemo_boot=$apidemo_boot, apidemo_status=$apidemo_status"
	if [ $apidemo = "Installed"      -a $apidemo_boot != 0    -a $apidemo_status = 0 ]
	then
		apidemo_error=1
		status=$((status+1))
	fi

	#
	# ryft memory status
	#	
	(echo 
	echo "$hostname Memory" 
	free -h 
	)>>$ryft_status_verbose

	if [ $verbose = 1 ]
	then
		cat $ryft_status_verbose
	fi

	#
	# -smoke only processed when requested AND when other things look ok
	#
	if [ $smokeFlag = 1 -a $tlogd_status != 0 -a $rhfsd_status != 0 -a $ccc_mgr_status != 0 ]
	then
		~ryftuser/ryft/regression/util/smoke.sh|tee $ryft_status_filename
		faildetect=`cat $ryft_status_filename|grep FAILED|wc -l`
		passdetect=`cat $ryft_status_filename|egrep "1 tests.*PASSED"|wc -l`
		if [ $faildetect != 0 -o $passdetect = 0 ]
		then
			echo "*** smoke.sh failed ***"
			filesystem_error=1
			status=$((status+1))
		fi
	fi


	if [ $status = 0 ]
	then
		#
		# OKAY
		#
		#echo -e "$hostname ryft_status " ${greenAttributeON}OKAY${attributesOFF}
		echo
		echo -e "${greenAttributeON}$hostname ryft_status OKAY${attributesOFF}"
	else
		#
		# PROBLEMS
		#
		echo
		PROBLEMS=`[ $status = 1 ] && echo "PROBLEM" || echo "PROBLEMS"`
		#echo -e "$hostname ryft_status " "found ${redAttributeON}$status $PROBLEMS${attributesOFF}"
		echo -e "${redAttributeON}$hostname ryft_status found $status $PROBLEMS${attributesOFF}"

		#
		# error handling
		#
		if [ $filesystem_filecount != 1 ]
		then
			show_filesystem_filecount_error
		else
			if [ $filesystem_error != 0 ]
			then
				show_filesystem_error
			fi
			if [ $rhfsd_error != 0 ]
			then
				show_rhfsd_error
			fi
		fi
		if [ $ccc_mgr_error != 0 ]
		then
			show_ccc_mgr_error
		fi
		if [ $tlogd_error != 0 ]
		then
			show_tlogd_error
		fi
	
		if [ $ryftServer_error != 0 ]
		then
			show_ryftServer_error
		fi
		if [ $ryft1_odbcd_error != 0 ]
		then
			show_ryft1_odbcd_error
		fi
		if [ $consul_error != 0 ]
		then
			show_consul_error
		fi
		if [ $apidemo_error != 0 ]
		then
			show_apidemo_error
		fi
		
		count=`echo "$ryftServer_error + $ryft1_odbcd_error + $consul_error + $apidemo_error" | bc` 
		message=""
		#echo "### count=$count"
		if [ $count != 0 -a $tlogd_error = 0 -a $filesystem_error = 0 -a $rhfsd_error = 0 -a $ccc_mgr_error = 0 ] 
		then
			message="( try '${redAttributeON}ryft_status -start${attributesOFF}' to correct. )"
	
		fi
		#echo "### message=$message"
		#echo -e "$hostname ryft_status " "found ${redAttributeON}$status $PROBLEMS${attributesOFF} $message"
		echo
		echo -e "${redAttributeON}$hostname ryft_status found $status $PROBLEMS${attributesOFF} $message"
	fi
}
ryft_status


#
# stopFlag detection
#
if [ $stopFlag = 1 ]
then
	#
	# any processes we can stop?
	#
	count=`echo "$ryftServer_status + $ryft1_odbcd_status + $consul_status + $apidemo_status" | bc` 
	echo "********************"
	echo -e "${redAttributeON}$hostname Stopping $count services${attributesOFF}"
	echo "********************"
	finalStatus=1
	if [ $count != 0 ]
		then
	
		if [ $ryftServer_error = 0 -a $stopFlag = 1 ]
		then
			ryftServer_stop
		fi
		if [ $ryft1_odbcd = "Installed" -a $ryft1_odbcd_error = 0 -a $stopFlag = 1 ]
		then
			ryft1_odbcd_stop
		fi
		if [ $consul = "Installed" -a $consul_error = 0 -a $stopFlag = 1 ]
		then
			consul_stop
		fi
		if [ $apidemo = "Installed" -a $apidemo_error = 0 -a $stopFlag = 1 ]
		then
			apidemo_stop
		fi
	fi
	if [ $count != 0 ]
	then
		sleep $sleepValue 
		finalStatus=0
		ryft_status
	fi
fi

#
# fixFlag detection
#
if [ $fixFlag = 1 ]
then
	#
	# fix case where /ryftone will not mount due to files present 
	#
	if [ $filesystem_filecount != 1 -a $filesystem_error != 0 -a $rhfsd_error != 0 ] 
	then
		filesystem_filecount_fix

		sleep $sleepValue 
		finalStatus=0

		ryft_status
	fi

	#
	# fix by starting missing processes
	#
	count=`echo "$ryftServer_error + $ryft1_odbcd_error + $consul_error + $apidemo_error" | bc` 
	if [ $count != 0 -a $filesystem_error = 0 -a $rhfsd_error = 0 -a $ccc_mgr_error = 0 ] 
	then
		if [ $ryftServer_error != 0 ]
		then
			ryftServer_start
		fi
		if [ $ryft1_odbcd_error != 0 ]
		then
			ryft1_odbcd_start
		fi
		if [ $consul_error != 0 ]
		then
			consul_start
		fi
		if [ $apidemo_error != 0 ]
		then
			apidemo_start
		fi

		ryft_status
	fi
fi

#
# startFlag detection
#
if [ $startFlag = 1 ]
then
	echo "********************"
	#
	# requested to start problem processes
	#
	okayToStart=0
	count=`echo "$ryftServer_error + $ryft1_odbcd_error + $consul_error + $apidemo_error" | bc` 
	if [ $filesystem_error = 0 -a $rhfsd_error = 0 -a $ccc_mgr_error = 0 ] 
	then
		# should be okay to start since filesystem, rhfsd and ccc_mgr appear okay
		okayToStart=1
		echo -e "${redAttributeON}$hostname Starting $count services${attributesOFF}"
	else
		echo -e "${redAttributeON}$hostname Unable to process -start when filesystem, rhfsd, or ccc_mgr have problems${attributesOFF}"
	fi
	echo "********************"
	finalStatus=1
	if [ $okayToStart = 1 -a $count != 0 ]
	then
		if [ $ryftServer_error != 0 -a $startFlag = 1 ]
		then
			ryftServer_start
		fi
		if [ $ryft1_odbcd_error != 0 -a $startFlag = 1 ]
		then
			ryft1_odbcd_start
		fi
		if [ $consul_error != 0 -a $startFlag = 1 ]
		then
			consul_start
		fi
		if [ $apidemo_error != 0 -a $startFlag = 1 ]
		then
			apidemo_start
		fi
	fi

	if [ $okayToStart = 1 -a $count != 0 ]
	then
		sleep $sleepValue 
		finalStatus=0
		ryft_status
	fi

fi

cleanup

if [ $finalStatus = 1 ]
then
	if [ $status = 0 ]
	then
		#
		# OKAY
		#
		#echo -e "$hostname ryft_status " ${greenAttributeON}OKAY${attributesOFF}
		echo	
		echo -e "${greenAttributeON}$hostname ryft_status OKAY${attributesOFF}"
	else
		#
		# PROBLEMS
		#
		PROBLEMS=`[ $status = 1 ] && echo "PROBLEM" || echo "PROBLEMS"`
		#echo -e "$hostname ryft_status " "found ${redAttributeON}$status $PROBLEMS${attributesOFF}"
		echo
		echo -e "${redAttributeON}$hostname ryft_status found $status $PROBLEMS${attributesOFF}"
	fi
fi
exit $status


