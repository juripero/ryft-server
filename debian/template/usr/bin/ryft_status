#!/bin/bash

#
# RyftOne command line maintenance tool
#


#
# rhfs?
#
rhfs=0
test -e /dev/smca
if [ $? == 0 ]
then
	filesystem=`df -h /ryftone|tail -1|awk '{print $1}'`
	if [ "${filesystem}" == "/dev/fuse" -o "${filesystem}" == "" ]
	then
		rhfs=1
	fi
fi

#
# get OSVersion{Major,Minor}
#
OSVersionMajor=`lsb_release -a 2>/dev/null|grep Release|cut -d':' -f2-|sed 's/^\s*//'g|cut -d'.' -f1`
OSVersionMinor=`lsb_release -a 2>/dev/null|grep Release|cut -d':' -f2-|sed 's/^\s*//'g|cut -d'.' -f2`

#
# is there a smoke test?
#
if [ $rhfs == 1 ]
then
	smokePath=/usr/bin/smoke
else
	smokePath=/usr/bin/smokex
fi
test -e $smokePath
if [ $? != 0 ]
then
    smokePath=""
fi

#
# constants
#
ryftsudo=""
if [ $OSVersionMajor == 14 ]
then
	initctl show-config ssh >>/dev/null 2>&1 
else
	systemctl status ssh >>/dev/null 2>&1 
fi
if [ $? -ne 0 ]
then
	ryftsudo="sudo"
fi
tailLines="-40"
if [ $rhfs == 1 ]
then
    ryftoneLog=/var/log/ryft/ryftone.log
    ryftoneLogPattern="/var/log/ryft/ryftone.log*"
else
    # f1 && x86 aws
    ryftoneLog=/var/log/blacklynx/ryft.log
    ryftoneLogPattern=/var/log/blacklynx/ryft.log
fi
ryft_server_dLog=/var/log/blacklynx/server.log
ryft_server_dLogPattern=/var/log/blacklynx/server.log
ryftwebapidemoLog=/var/log/ryft/ryft-demo.log
ryftwebapidemoLogPattern=/var/log/ryft/ryft-demo.log
ryftodbcdLog=/var/log/blacklynx/ryftone_server.log
ryftodbcdLogPattern="/var/log/blacklynx/ryftone_server*.log"
consulLog=/var/log/consul
consulAlertsLog=/var/log/consul-alerts

# ryft-server-d commands
x=ryft-server-d
if [ $OSVersionMajor == 14 ]
then
    ryftServer_restartCommand="sudo service $x start"
    ryftServer_startCommand="sudo service $x start"
    ryftServer_stopCommand="sudo service $x stop"
    ryftServer_bootOnCommand="sudo rm -f /etc/init/$x.override"
    ryftServer_bootOffCommand="echo \"manual\" | sudo tee /etc/init/$x.override"
else
    ryftServer_restartCommand="sudo systemctl restart $x"
    ryftServer_startCommand="sudo systemctl start $x"
    ryftServer_stopCommand="sudo systemctl stop $x"
    ryftServer_bootOnCommand="sudo systemctl enable $x.service"
    ryftServer_bootOffCommand="sudo systemctl disable $x.service"
fi

# ryftodbcd commands
x=ryftodbcd
if [ $OSVersionMajor == 14 ]
then
    ryft1_odbcd_restartCommand="sudo service $x restart"
    ryft1_odbcd_startCommand="sudo service $x start"
    ryft1_odbcd_stopCommand="sudo service $x stop"
    ryft1_odbcd_bootOnCommand="sudo rm -f /etc/init/$x.override"
    ryft1_odbcd_bootOffCommand="echo \"manual\" | sudo tee /etc/init/$x.override"
else
    ryft1_odbcd_restartCommand="sudo systemctl restart $x"
    ryft1_odbcd_startCommand="sudo systemctl start $x"
    ryft1_odbcd_stopCommand="sudo systemctl stop $x"
    ryft1_odbcd_bootOnCommand="sudo systemctl enable $x.service"
    ryft1_odbcd_bootOffCommand="sudo systemctl disable $x.service"
fi

# consul commands
x=consul
if [ $OSVersionMajor == 14 ]
then
    consul_restartCommand="sudo service $x restart"
    consul_startCommand="sudo service $x start"
    consul_stopCommand="sudo service $x stop"
    consul_bootOnCommand="sudo rm -f /etc/init/$x.override"
    consul_bootOffCommand="echo \"manual\" | sudo tee /etc/init/$x.override"
else
    consul_restartCommand="sudo systemctl restart $x"
    consul_startCommand="sudo systemctl start $x"
    consul_stopCommand="sudo systemctl stop $x"
    consul_bootOnCommand="sudo systemctl enable $x.service"
    consul_bootOffCommand="sudo systemctl disable $x.service"
fi

# consul-alert commands
x=consul-alerts
if [ $OSVersionMajor == 14 ]
then
    consulAlerts_restartCommand="sudo service $x restart"
    consulAlerts_startCommand="sudo service $x start"
    consulAlerts_stopCommand="sudo service $x stop"
    consulAlerts_bootOnCommand="sudo rm -f /etc/init/$x.override"
    consulAlerts_bootOffCommand="echo \"manual\" | sudo tee /etc/init/$x.override"
else
    consulAlerts_restartCommand="sudo systemctl restart $x"
    consulAlerts_startCommand="sudo systemctl start $x"
    consulAlerts_stopCommand="sudo systemctl stop $x"
    consulAlerts_bootOnCommand="sudo systemctl enable $x.service"
    consulAlerts_bootOffCommand="sudo systemctl disable $x.service"
fi

# ryftwebapidemo commands
x=ryftwebapidemo
if [ $OSVersionMajor == 14 ]
then
    apidemo_restartCommand="sudo service $x restart"
    apidemo_startCommand="sudo service $x start"
    apidemo_stopCommand="sudo service $x stop"
    apidemo_bootOnCommand="sudo rm -f /etc/init/$x.override"
    apidemo_bootOffCommand="echo \"manual\" | sudo tee /etc/init/$x.override"
else
    apidemo_restartCommand="sudo systemctl restart $x"
    apidemo_startCommand="sudo systemctl start $x"
    apidemo_stopCommand="sudo systemctl stop $x"
    apidemo_bootOnCommand="sudo systemctl enable $x.service"
    apidemo_bootOffCommand="sudo systemctl disable $x.service"
fi

# elasticsearch commands
x=elasticsearch
if [ $OSVersionMajor == 14 ]
then
    elasticsearch_restartCommand="sudo service $x restart"
    elasticsearch_startCommand="sudo service $x start"
    elasticsearch_stopCommand="sudo service $x stop"
    elasticsearch_bootOnCommand="sudo rm -f /etc/init/$x.override"
    elasticsearch_bootOffCommand="echo \"manual\" | sudo tee /etc/init/$x.override"
else
    elasticsearch_restartCommand="sudo systemctl restart $x"
    elasticsearch_startCommand="sudo systemctl start $x"
    elasticsearch_stopCommand="sudo systemctl stop $x"
    elasticsearch_bootOnCommand="sudo systemctl enable $x.service"
    elasticsearch_bootOffCommand="sudo systemctl disable $x.service"
fi

test -e /usr/bin/blnx-versions
if [ $? == 0 ]
then
    ryftVersionsPresent=1
else
    ryftVersionsPresent=0
fi

#
# initial state 
#
status=0				# error counter, used as exit status 
hostname=`hostname`
redAttributeON="\\033[1;31m"
greenAttributeON="\\033[1;32m"
attributesOFF="\\033[0m"
finalStatus=0
sleepValue=5
ryft_statusCount=0
problemCounter=0
debug=0

function usage() {
	echo 
    if [ "$smokePath" != "" ]
    then
    	echo "usage:	ryft_status [-help|-?|-v|-verbose|-smoke|-start|-stop|-m|-menu|-fix]"
    else
    	echo "usage:	ryft_status [-help|-?|-v|-verbose|-start|-stop|-m|-menu|-fix]"
    fi
	echo
	echo "ryft_status -help"
	echo "          this usage display"
	echo "ryft_status -v"
	echo "          -verbose output"
	echo "ryft_status -smoke"
    echo "		checks status then runs smoke test when resources available"
	echo "ryft_status -start"
	echo "		checks status then start processes" 
	echo "ryft_status -stop"
	echo "		checks status and stop processes" 
	echo "ryft_status -m"
	echo "          -menu option"
	echo "ryft_status -fix"
	echo "          -fix problem when recommended by ryft_status"
	echo
	echo "Returns # of problems found as exit code"
	echo

}

ryft_app_logs() {
	local dateHandle=`date '+%Y%m%d_%H%M'`
	local hostHandle=`hostname`
	local tarFile=/tmp/${hostHandle}_${dateHandle}_app_logs.tar
	local tarList=/tmp/${hostHandle}_${dateHandle}_app_logs_list.txt_$$
	local i
	
	# generate a list of log files
	rm -f $tarList
	echo "here's the log file list:" ${ryftoneLogPattern} ${ryft_server_dLogPatern} ${ryftwebapidemoLogPattern} ${ryftodbcdLogPattern} /var/log/consul
	for i in ${ryftoneLogPattern} ${ryft_server_dLogPatern} ${ryftwebapidemoLogPattern} ${ryftodbcdLogPattern} /var/log/consul
	do
		if [ -e $i ] 
		then
			echo $i >>$tarList 
		fi
	done
	
	# tar/bzip2 files
	local tarFileCount=`cat $tarList|wc -l`
	if [ $tarFileCount != 0 ] 
	then
		echo "gathering $tarFileCount files into ${tarFile}.bz2"

		# ryft_showCommand
		echo -e "${greenAttributeON}tar -cvjSf ${tarFile}.bz2 -T $tarList >/dev/null 2>&1${attributesOFF}"
		tar -cvjSf ${tarFile}.bz2 -T $tarList >/dev/null 2>&1

		# ryft_showCommand
		echo -e "${greenAttributeON}ls -al ${tarFile}.bz2${attributesOFF}"
		ls -al ${tarFile}.bz2
	else
		echo "No log files found for gathering"
	fi
	
	# ryft_showCommand
	echo -e "${greenAttributeON}rm ${tarList}${attributesOFF}"
	rm -f $tarList
}


ryft_boot_enabled() {
	local returnValue=0
	local i=$1

	#$ryftsudo initctl show-config $i >>/dev/null 2>&1 
	os_service_detect $i
	if [ $? = 0 ]
	then
		#x=`$ryftsudo initctl show-config $i | grep -q "^  start on" && echo -n boot_on || echo -n boot_off`
		x=`os_boot_status $i`
		#echo "x=$x"
		if [ $x = "boot_on" ]
		then
			returnValue=1
		fi
	fi
	echo $returnValue
}

function os_service_running() {
	if [ $OSVersionMajor == 14 ]
	then
		echo "$1"|grep process
	else
		echo "$1"|grep "(running)"
	fi
}

function os_service_status() {
	if [ $OSVersionMajor == 14 ]
	then
		$ryftsudo service $i status|cut -d' ' -f2-
	else
		#$ryftsudo systemctl status $i|grep Active|cut -d':' -f2-|cut -d' ' -f2-
        #$ryftsudo systemctl status $i 2>/dev/null|egrep -o "^\s+(\s+Active.*)|PID.*)"|xargs echo
        #$ryftsudo systemctl status $i 2>/dev/null|egrep -o "^\s+(\s+Active.*)"|xargs echo
        $ryftsudo systemctl is-active $i
	fi
}
function os_service_detect() {
	if [ $OSVersionMajor == 14 ]
	then
		$ryftsudo initctl show-config $1 >>/dev/null 2>&1 
	else
		$ryftsudo systemctl status $1 2>/dev/null|egrep "^(\s+Loaded: loaded.*|PID.*)" >/dev/null 2>&1 
	fi
}

function os_boot_status() {
	if [ $OSVersionMajor == 14 ]
	then
		$ryftsudo initctl show-config $1 | grep -q "^  start on" && echo -n boot_on || echo -n boot_off
	else
		$ryftsudo systemctl is-enabled $1 | grep -q "^enabled" && echo -n boot_on || echo -n boot_off
	fi
}

function ryft_boot_status() {
	echo
	printf "%-15s" "SERVICE" "BOOT_STATUS" "RUNNING_STATUS" 
	echo
	for i in ryft-server-d ryftwebapidemo ryftodbcd consul consul-alerts elasticsearch
	do
		printf "%-15s" $i
		#$ryftsudo initctl show-config $i >>/dev/null 2>&1 
		os_service_detect $i
		if [ $? = 0 ]
		then
			# running processes must be newer than override file to be visible
			#x=`$ryftsudo initctl show-config $i | grep -q "^  start on" && echo -n boot_on || echo -n boot_off`
			x=`os_boot_status $i`
			#echo "x=$x"
			if [ $x = "boot_on" ]
			then
				printf "${greenAttributeON}%-15s${attributesOFF}" $x
			else
				printf "${redAttributeON}%-15s${attributesOFF}" $x
			fi

			# sensing file instead
			#printf "%-15s" `cat /etc/init/$i.*| grep -q "^manual" && echo -n boot_off || echo -n boot_on`
	
			#x=`$ryftsudo service $i status|cut -d' ' -f2-`
			x=`os_service_status $1`
			#y=`echo "$x"| grep process`
			#y=`os_service_status "$x"`
			if [ $? = 0 ]
			then
				printf "${greenAttributeON}%-15s${attributesOFF}" "$x"
			else
				printf "${redAttributeON}%-15s${attributesOFF}" "$x"
			fi
			echo
		else
			printf "${redAttributeON}%-15s${attributesOFF}\n" "not_installed" 
		fi
	done
}


#########################

# 0=off, 1=on, 2=higher
debug=0
function ryft_ays()
{
  if [ ! -z "$1" ]
  then
	echo $1
  fi
  read -p "Are you sure? " -n 1 -r
  echo    # (optional) move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    return 0
  else
    return 1
  fi
}

function ryft_menu()
{
  local hostname=`hostname`

  # input parameters
  local MENU_TITLE="$1"

  declare -a MENU_TEXT=("${!2}")
  if [ $debug -gt 1 ] 
  then
  	echo "MENU_TEXT=${MENU_TEXT[@]}"
  fi

  declare -a MENU_ACTIONS=("${!3}")
  if [ $debug -gt 1 ] 
  then
  	echo "MENU_ACTIONS=${MENU_ACTIONS[@]}"
  fi

  local MENU_COMMAND=""
  if [ ! -z "$4" ]
  then
	MENU_COMMAND="$4"               
  fi

  # sanity check since these arrays must be coordinated
  if [ ${#MENU_TEXT[@]} -ne ${#MENU_ACTIONS[@]} ]
  then
	echo "menu \"$MENU_TITLE\" has a configuration problem"
	echo
	return
  fi

  # sanity check for max size
  local ryft_menu_max_entries=33
  if [ ${#MENU_TEXT[@]} -gt $ryft_menu_max_entries ]
  then
	echo "menu \"$MENU_TITLE\" has too many entries. Max $ryft_menu_max_entries"
	echo
	return
  fi

  while [ true ]
  do  	
    if [ MENU_COMMAND != "" ]
    then
	eval ${MENU_COMMAND}
    fi

    echo
  
    # Display items
    local -i I=0
    #                        1         2         3
    #               123456789012345678901234567890123
    local alphabet="0123456789ABCDEFGHIJKLMNOPQRSTUVW"
    echo "########> " $hostname $MENU_TITLE " <########"
    while [ $I -lt ${#MENU_ACTIONS[@]} ]
    do
	select=${alphabet:$I:1}
        echo "$select) ${MENU_TEXT[$I]}"
        #echo "$I) ${MENU_TEXT[$I]}"
        (( I += 1 ))
    done

    # Read keyboard silently, one character at a time, 
    # and save the value in $SELECTION
    local SELECTION
    read -s -n1 SELECTION
    if [ $debug -gt 0 ]
    then
	echo "debug SELECTION=${SELECTION}"
    fi

    # Convert the ascii value of $SELECTION into a numeric index
    local ORD_VALUE=$(LC_CTYPE=C printf '%d' "'$SELECTION")
    (( ORD_VALUE -= 48 ))
    if [ $debug -gt 0 ]
    then
	echo "debug ord_value=${ORD_VALUE}"
    fi
    
    # 0, x, X
    if [ $ORD_VALUE -lt 0 -o $ORD_VALUE -eq 40 -o $ORD_VALUE -eq 72 ] 
    then
	echo "selected ${ORD_VALUE} exit"
	echo
        return
    fi 

    # A..W map to 10+
    if [ $ORD_VALUE -gt 48 -a $ORD_VALUE -lt 72 ] 
    then
	# like hexadecimal
	# A 49 -> 10
	# B 50 -> 11
	# C 51 -> 12
	(( ORD_VALUE -= 39 ))
    fi

    # a..w map to 10+
    if [ $ORD_VALUE -gt 16 -a $ORD_VALUE -lt 40 ] 
    then
	# like hexadecimal
	# a 17 -> 10
	# b 18 -> 11
	# b 19 -> 11
	(( ORD_VALUE -= 7 ))
    fi
	
    # Check if the index is valid
    if [ $ORD_VALUE -ge 0 -a $ORD_VALUE -lt ${#MENU_ACTIONS[@]} ]
    then
	# valid selection returns or evaluates action
	echo "selected ${SELECTION} ${MENU_TEXT[${ORD_VALUE}]}"
	echo
  	
	# 0 ?
	if [ $ORD_VALUE -eq 0 ] 
	then
		return
	else
        	eval ${MENU_ACTIONS[${ORD_VALUE}]}
	fi
    else
        # invalid selection
        echo "-> ${SELECTION} is an INVALID SELECTION"
	echo
    fi
  done
}

#################################
function os_start
{
	if [ $OSVersionMajor == 14 ]
	then
		# start process if not already running
		# ryft_showCommand
		echo -e "${greenAttributeON}service ${1} status | grep process${attributesOFF}"
		$ryftsudo service ${1} status|grep process
		if [ $? != 0 ]
		then
	    	    ryft_showCommand "sudo service ${1} start"
		fi
	else
		ryft_showCommand "sudo systemctl start ${1}.service"
	fi
}
function os_stop
{
	if [ $OSVersionMajor == 14 ]
	then
		# stop process if running 
		# ryft_showCommand
		echo -e "${greenAttributeON}service ${1} status | grep process${attributesOFF}"
		$ryftsudo service ${1} status|grep process
		if [ $? = 0 ]
		then
	    	    ryft_showCommand "sudo service ${1} stop"
		fi
	else
		ryft_showCommand "sudo systemctl stop ${1}.service"
	fi
}

function os_restart
{
	if [ $OSVersionMajor == 14 ]
	then
		ryft_showCommand "sudo service ${1} restart"
	else
		ryft_showCommand "sudo systemctl restart ${1}.service"
	fi
}


function ryft_start
{
    local serviceList=$1
    local service
    for service in `echo $serviceList`
    do
	os_start $service
	echo
    done
}

function ryft_start_menu
{
    local START_MENU_TITLE="Ryft Start Menu"

    local -a START_MENU_TEXT
    START_MENU_TEXT[0]="Exit"
    START_MENU_TEXT[1]="Start ALL"
    START_MENU_TEXT[2]="Start ryft-server-d"
    START_MENU_TEXT[3]="Start ryftwebapidemo"
    START_MENU_TEXT[4]="Start ryftodbcd"
    START_MENU_TEXT[5]="Start consul"
    START_MENU_TEXT[6]="Start consul-alerts"
    START_MENU_TEXT[7]="Start elasticsearch"
    
    local -a START_MENU_ACTIONS
    START_MENU_ACTIONS[0]="exit"
    START_MENU_ACTIONS[1]="ryft_separator; ryft_start \"ryft-server-d ryftwebapidemo ryftodbcd consul consul-alerts elasticsearch\"; ryft_separator"
    START_MENU_ACTIONS[2]="ryft_start ryft-server-d"
    START_MENU_ACTIONS[3]="ryft_start ryftwebapidemo"
    START_MENU_ACTIONS[4]="ryft_start ryftodbcd"
    START_MENU_ACTIONS[5]="ryft_start consul"
    START_MENU_ACTIONS[6]="ryft_start consul-alerts"
    START_MENU_ACTIONS[7]="ryft_start elasticsearch"

    local START_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$START_MENU_TITLE" START_MENU_TEXT[@] START_MENU_ACTIONS[@] "${START_MENU_COMMAND}"
}

################################

function ryft_stop
{
    local serviceList=$1
    local service
    for service in `echo $serviceList`
    do
	os_stop $service
	echo
    done
}

function ryft_stop_menu
{
    local STOP_MENU_TITLE="Ryft Stop Menu"

    local -a STOP_MENU_TEXT
    STOP_MENU_TEXT[0]="Exit"
    STOP_MENU_TEXT[1]="Stop ALL"
    STOP_MENU_TEXT[2]="Stop ryft-server-d"
    STOP_MENU_TEXT[3]="Stop ryftwebapidemo"
    STOP_MENU_TEXT[4]="Stop ryftodbcd"
    STOP_MENU_TEXT[5]="Stop consul"
    STOP_MENU_TEXT[6]="Stop consul-alerts"
    STOP_MENU_TEXT[7]="Stop elasticsearch"
    
    local -a STOP_MENU_ACTIONS
    STOP_MENU_ACTIONS[0]="exit"
    STOP_MENU_ACTIONS[1]="ryft_separator; ryft_stop \"ryft-server-d ryftwebapidemo ryftodbcd consul consul-alerts elasticsearch\"; ryft_separator";
    STOP_MENU_ACTIONS[2]="ryft_stop ryft-server-d"
    STOP_MENU_ACTIONS[3]="ryft_stop ryftwebapidemo"
    STOP_MENU_ACTIONS[4]="ryft_stop ryftodbcd"
    STOP_MENU_ACTIONS[5]="ryft_stop consul"
    STOP_MENU_ACTIONS[6]="ryft_stop consul-alerts"
    STOP_MENU_ACTIONS[7]="ryft_stop elasticsearch"

    local STOP_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$STOP_MENU_TITLE" STOP_MENU_TEXT[@] STOP_MENU_ACTIONS[@] "${STOP_MENU_COMMAND}"
}

###################################

function ryft_restart
{
    local serviceList=$1
    local service
    for service in `echo $serviceList`
    do
    	os_restart $service
    done
}
function ryft_restart_menu
{
    RESTART_MENU_TITLE="Ryft Restart Menu"

    local -a RESTART_MENU_TEXT
    RESTART_MENU_TEXT[0]="Exit"
    RESTART_MENU_TEXT[1]="Restart ALL"
    RESTART_MENU_TEXT[2]="Restart ryft-server-d"
    RESTART_MENU_TEXT[3]="Restart ryftwebapidemo"
    RESTART_MENU_TEXT[4]="Restart ryftodbcd"
    RESTART_MENU_TEXT[5]="Restart consul"
    RESTART_MENU_TEXT[6]="Restart consul-alerts"
    RESTART_MENU_TEXT[7]="Restart elasticsearch"

    local -a RESTART_MENU_ACTIONS
    RESTART_MENU_ACTIONS[0]="exit"
    RESTART_MENU_ACTIONS[1]="ryft_restart \"ryft-server-d ryftwebapidemo ryftodbcd consul consul-alerts elasticsearch\""
    RESTART_MENU_ACTIONS[2]="ryft_restart ryft-server-d"
    RESTART_MENU_ACTIONS[3]="ryft_restart ryftwebapidemo"
    RESTART_MENU_ACTIONS[4]="ryft_restart ryftodbcd"
    RESTART_MENU_ACTIONS[5]="ryft_restart consul"
    RESTART_MENU_ACTIONS[6]="ryft_restart consul-alerts"
    RESTART_MENU_ACTIONS[7]="ryft_restart elasticsearch"

    local RESTART_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$RESTART_MENU_TITLE" RESTART_MENU_TEXT[@] RESTART_MENU_ACTIONS[@] "${RESTART_MENU_COMMAND}"
}

#######################################0
function os_boot_off
{
	if [ $OSVersionMajor == 14 ]
	then
		f=/etc/init/${1}.override
		# ryft_showCommand
		echo -e "${greenAttributeON}echo \"manual\" | sudo tee ${f}${attributesOFF}"
		echo "manual"|sudo tee ${f}

		# restart process if running	
		# ryft_showCommand
		echo -e "${greenAttributeON}service $service status | grep process${attributesOFF}"
		$ryftsudo service ${1} status|grep process
		if [ $? = 0 ]
		then
	    		ryft_showCommand "sudo service $service restart"
		fi
	else
    		ryft_showCommand "sudo systemctl disable ${1}.service"
	fi
}
function os_boot_on
{
	if [ $OSVersionMajor == 14 ]
	then
		f=/etc/init/${service}.override
	        ryft_showCommand "sudo rm -f ${f}"

		# restart process if running
		# ryft_showCommand
		echo -e "${greenAttributeON}service $service status | grep process${attributesOFF}"
		$ryftsudo service $service status|grep process
		if [ $? = 0 ]
		then
	    		ryft_showCommand "sudo service $service restart"
		fi
	else
    		ryft_showCommand "sudo systemctl enable ${1}.service"
	fi
}

function ryft_boot_off
{
    local serviceList=$1
    local service
    local f
    for service in `echo $serviceList`
    do
	# disable start at boot
    	echo "boot_off $service"
	os_boot_off ${service}
	echo
    done
}
function ryft_boot_on
{
    local serviceList=$1
    local service
    local f

    for service in `echo $serviceList`
    do
	# enable start at boot
    	echo "boot_on $service"
	os_boot_on $service
	echo
    done
}

function ryft_boot_toggle
{
    local serviceList=$1
    local service
    local f

    for service in `echo $serviceList`
    do
        f=/etc/init/${service}.override
        if [ -f $f ]
        then
            ryft_boot_on $service
        else
            ryft_boot_off $service
        fi
    done
}

function ryft_boot_toggle_menu
{
    local BOOT_TOGGLE_MENU_TITLE="Ryft Boot Toggle Menu"
    
    local -a BOOT_TOGGLE_MENU_TEXT
    BOOT_TOGGLE_MENU_TEXT[0]="Exit"
    BOOT_TOGGLE_MENU_TEXT[1]="Boot toggle ALL"
    BOOT_TOGGLE_MENU_TEXT[2]="Boot toggle ryft_server_d"
    BOOT_TOGGLE_MENU_TEXT[3]="Boot toggle ryftwebapidemo"
    BOOT_TOGGLE_MENU_TEXT[4]="Boot toggle ryftodbcd"
    BOOT_TOGGLE_MENU_TEXT[5]="Boot toggle consul"
    BOOT_TOGGLE_MENU_TEXT[6]="Boot toggle consul-alerts"
    BOOT_TOGGLE_MENU_TEXT[7]="Boot toggle elasticsearch"
    
    local -a BOOT_TOGGLE_MENU_ACTIONS
    BOOT_TOGGLE_MENU_ACTIONS[0]="exit"
    BOOT_TOGGLE_MENU_ACTIONS[1]="ryft_separator; ryft_boot_toggle \"ryft-server-d ryftwebapidemo ryftodbcd consul consul-alerts elasticsearch\"; ryft_separator;"
    BOOT_TOGGLE_MENU_ACTIONS[2]="ryft_boot_toggle ryft-server-d"
    BOOT_TOGGLE_MENU_ACTIONS[3]="ryft_boot_toggle ryftwebapidemo"
    BOOT_TOGGLE_MENU_ACTIONS[4]="ryft_boot_toggle ryftodbcd"
    BOOT_TOGGLE_MENU_ACTIONS[5]="ryft_boot_toggle consul"
    BOOT_TOGGLE_MENU_ACTIONS[6]="ryft_boot_toggle consul-alerts"
    BOOT_TOGGLE_MENU_ACTIONS[7]="ryft_boot_toggle elasticsearch"

    local BOOT_TOGGLE_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$BOOT_TOGGLE_MENU_TITLE" BOOT_TOGGLE_MENU_TEXT[@] BOOT_TOGGLE_MENU_ACTIONS[@] "${BOOT_TOGGLE_MENU_COMMAND}"
}

function ryft_boot_on_menu
{
    local BOOT_ON_MENU_TITLE="Ryft Boot On Menu"

    local -a BOOT_ON_MENU_TEXT
    BOOT_ON_MENU_TEXT[0]="Exit"
    BOOT_ON_MENU_TEXT[1]="Boot on ALL"
    BOOT_ON_MENU_TEXT[2]="Boot on ryft_server_d"
    BOOT_ON_MENU_TEXT[3]="Boot on ryftwebapidemo"
    BOOT_ON_MENU_TEXT[4]="Boot on ryftodbcd"
    BOOT_ON_MENU_TEXT[5]="Boot on consul"
    BOOT_ON_MENU_TEXT[6]="Boot on consul-alerts"
    BOOT_ON_MENU_TEXT[7]="Boot on elasticsearch"
    
    local -a BOOT_ON_MENU_ACTIONS
    BOOT_ON_MENU_ACTIONS[0]="exit"
    BOOT_ON_MENU_ACTIONS[1]="ryft_separator; ryft_boot_on \"ryft-server-d ryftwebapidemo ryftodbcd consul consul-alerts elasticsearch\"; ryft_separator;"
    BOOT_ON_MENU_ACTIONS[2]="ryft_boot_on ryft-server-d"
    BOOT_ON_MENU_ACTIONS[3]="ryft_boot_on ryftwebapidemo"
    BOOT_ON_MENU_ACTIONS[4]="ryft_boot_on ryftodbcd"
    BOOT_ON_MENU_ACTIONS[5]="ryft_boot_on consul"
    BOOT_ON_MENU_ACTIONS[6]="ryft_boot_on consul-alerts"
    BOOT_ON_MENU_ACTIONS[7]="ryft_boot_on elasticsearch"
    
    local BOOT_ON_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$BOOT_ON_MENU_TITLE" BOOT_ON_MENU_TEXT[@] BOOT_ON_MENU_ACTIONS[@] "${BOOT_ON_MENU_COMMAND}"
}

function ryft_boot_off_menu
{
    local BOOT_OFF_MENU_TITLE="Ryft Boot Off Menu"

    local -a BOOT_OFF_MENU_TEXT
    BOOT_OFF_MENU_TEXT[0]="Exit"
    BOOT_OFF_MENU_TEXT[1]="Boot off ALL"
    BOOT_OFF_MENU_TEXT[2]="Boot off ryft_server_d"
    BOOT_OFF_MENU_TEXT[3]="Boot off ryftwebapidemo"
    BOOT_OFF_MENU_TEXT[4]="Boot off ryftodbcd"
    BOOT_OFF_MENU_TEXT[5]="Boot off consul"
    BOOT_OFF_MENU_TEXT[6]="Boot off consul-alerts"
    BOOT_OFF_MENU_TEXT[7]="Boot off elasticsearch"

    local -a BOOT_OFF_MENU_ACTIONS
    BOOT_OFF_MENU_ACTIONS[0]="exit"
    BOOT_OFF_MENU_ACTIONS[1]="ryft_separator; ryft_boot_off \"ryft-server-d ryftwebapidemo ryftodbcd consul consul-alerts elasticsearch\"; ryft_separator"
    BOOT_OFF_MENU_ACTIONS[2]="ryft_boot_off ryft-server-d"
    BOOT_OFF_MENU_ACTIONS[3]="ryft_boot_off ryftwebapidemo"
    BOOT_OFF_MENU_ACTIONS[4]="ryft_boot_off ryftodbcd"
    BOOT_OFF_MENU_ACTIONS[5]="ryft_boot_off consul"
    BOOT_OFF_MENU_ACTIONS[6]="ryft_boot_off consul-alerts"
    BOOT_OFF_MENU_ACTIONS[7]="ryft_boot_off elasticsearch"

    local BOOT_OFF_MENU_COMMAND="ryft_boot_status; ryft_status"

    ryft_menu "$BOOT_OFF_MENU_TITLE" BOOT_OFF_MENU_TEXT[@] BOOT_OFF_MENU_ACTIONS[@] "${BOOT_OFF_MENU_COMMAND}"
}

#######################################0

function ryft_ipmi_menu
{
    local IPMI_MENU_TITLE="RyftOne IPMI Menu"

    local -a IPMI_MENU_TEXT
    IPMI_MENU_TEXT[0]="Exit"
    IPMI_MENU_TEXT[1]="lan print                (sudo ipmitool lan print)"
    IPMI_MENU_TEXT[2]="chassis power off        (sudo ipmitool chassis power off)"
    IPMI_MENU_TEXT[3]="chassis power cycle      (sudo ipmitool chassis power cycle)"
    
    local -a IPMI_MENU_ACTIONS
    IPMI_MENU_ACTIONS[0]="exit"
    IPMI_MENU_ACTIONS[1]="sudo ipmitool lan print"
    IPMI_MENU_ACTIONS[2]="ryft_ays \"Requested action will power down the ryftone.\" && sudo ipmitool chassis power off || echo \"not sure\""
    IPMI_MENU_ACTIONS[3]="ryft_ays \"Requested action will power cycle the ryftone.\" && sudo ipmitool chassis power cycle || echo \"not sure\""

    local IPMI_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$IPMI_MENU_TITLE" IPMI_MENU_TEXT[@] IPMI_MENU_ACTIONS[@] "$IPMI_MENU_COMMAND" 
}

#######################################0

function ryft_ryftone_maintenance_menu
{
    local MAINTENANCE_MENU_TITLE="RyftOne Maintenance Menu"
    local menu_select

    local -a MAINTENANCE_MENU_TEXT
    menu_select=0
    MAINTENANCE_MENU_TEXT[$menu_select]="Exit"
    menu_select=`menu_select_next $menu_select`
    if [ $ryftVersionsPresent == 1 ]
    then
        MAINTENANCE_MENU_TEXT[$menu_select]="BlackLynx Versions       (blnx-versions)"
        menu_select=`menu_select_next $menu_select`
    fi            
    MAINTENANCE_MENU_TEXT[$menu_select]="Reboot                   (sudo shutdown -rf now)"
    menu_select=`menu_select_next $menu_select`
    MAINTENANCE_MENU_TEXT[$menu_select]="Poweroff                 (sudo poweroff)"
    menu_select=`menu_select_next $menu_select`
    if [ "$smokePath" != "" ]
    then
        MAINTENANCE_MENU_TEXT[$menu_select]="Smoke test               ($smokePath)"
        menu_select=`menu_select_next $menu_select`
    fi
    if [ $rhfs == 1 ]
    then
        MAINTENANCE_MENU_TEXT[$menu_select]="Cpc                      (cpc)"
        menu_select=`menu_select_next $menu_select`
		MAINTENANCE_MENU_TEXT[$menu_select]="Recycle                  (sudo recycle)"
		menu_select=`menu_select_next $menu_select`
		MAINTENANCE_MENU_TEXT[$menu_select]="File system check/repair (sudo fsck_rhfs -y -Y)"
		menu_select=`menu_select_next $menu_select`
		MAINTENANCE_MENU_TEXT[$menu_select]="Hardware reset rhfs ccc  (sudo hw_reset_rhfs_ccc.sh)"
		menu_select=`menu_select_next $menu_select`
		MAINTENANCE_MENU_TEXT[$menu_select]="IPMI Menu"
		menu_select=`menu_select_next $menu_select`
    fi

    local -a MAINTENANCE_MENU_ACTIONS
    menu_select=0
    MAINTENANCE_MENU_ACTIONS[$menu_select]="exit"
    menu_select=`menu_select_next $menu_select`
    if [ $ryftVersionsPresent == 1 ]
    then
        MAINTENANCE_MENU_ACTIONS[$menu_select]="ryft_separator; blnx-versions; ryft_separator"
        menu_select=`menu_select_next $menu_select`
    fi            
    MAINTENANCE_MENU_ACTIONS[$menu_select]="ryft_ays 'Requested action will reboot the ryftone.' && sudo shutdown -rf now || echo 'not sure'"
    menu_select=`menu_select_next $menu_select`
    if [ $rhfs == 1 ]
    then
        MAINTENANCE_MENU_ACTIONS[$menu_select]="ryft_ays 'Requested action will power down the ryftone.' && ryft_ays 'Double checking...' && sudo poweroff || echo 'not sure'"
        menu_select=`menu_select_next $menu_select`
    else
        MAINTENANCE_MENU_ACTIONS[$menu_select]="ryft_ays 'Requested action will terminate the ryftone.' && ryft_ays 'Double checking...' && sudo poweroff || echo 'not sure'"
        menu_select=`menu_select_next $menu_select`
    fi
    if [ "$smokePath" != "" ]
    then
        MAINTENANCE_MENU_ACTIONS[$menu_select]="$smokePath"
        menu_select=`menu_select_next $menu_select`
    fi
    if [ $rhfs == 1 ]
    then
		MAINTENANCE_MENU_ACTIONS[$menu_select]="cpc"
		menu_select=`menu_select_next $menu_select`
		MAINTENANCE_MENU_ACTIONS[$menu_select]="ryft_ays 'Requested action restarts rhfsd, which temporarily dismounts /ryftone filsystem.' && sudo recycle"
		menu_select=`menu_select_next $menu_select`
		MAINTENANCE_MENU_ACTIONS[$menu_select]="ryft_ays 'Requested action performs /ryftone file system check/repair' && sudo fsck_rhfs -y -Y"
		menu_select=`menu_select_next $menu_select`
	
		MAINTENANCE_MENU_ACTIONS[$menu_select]="ryft_ays 'Requested action permanently removes all /ryftone filesystem data.' && ryft_ays 'Double checking...' && sudo hw_reset_rhfs_ccc.sh || echo 'not sure'"
		menu_select=`menu_select_next $menu_select`
		MAINTENANCE_MENU_ACTIONS[$menu_select]="ryft_ipmi_menu"
		menu_select=`menu_select_next $menu_select`
    fi

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

#######################################0

function ryft_ryft_server_d_maintenance_menu
{
    local processName=ryft-server-d
    local configFile=/etc/ryft-server.conf

    local MAINTENANCE_MENU_TITLE="$processName Maintenance Menu"
	
    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="$processName restart        ($ryftServer_restartCommand)"
    MAINTENANCE_MENU_TEXT[2]="$processName stop           ($ryftServer_stopCommand)"
    MAINTENANCE_MENU_TEXT[3]="$processName boot_on        ($ryftServer_bootOnCommand)"
    MAINTENANCE_MENU_TEXT[4]="$processName boot_off       ($ryftServer_bootOffCommand)"
    MAINTENANCE_MENU_TEXT[5]="$processName configuration  (cat $configFile)"
    MAINTENANCE_MENU_TEXT[6]="$processName log            (tail ${tailLines} $ryft_server_dLog)"
    
    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="ryft_restart $processName"
    MAINTENANCE_MENU_ACTIONS[2]="ryft_stop $processName"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_boot_on $processName"
    MAINTENANCE_MENU_ACTIONS[4]="ryft_boot_off $processName"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_separator; cat $configFile || echo \"File Not Found. Using default configuration\"; ryft_separator"
    MAINTENANCE_MENU_ACTIONS[6]="ryft_separator; tail ${tailLines} $ryft_server_dLog; ryft_separator"

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

#######################################0

function ryft_consul_maintenance_menu
{
    local processName=consul
    local configFile=/etc/consul.conf

    local MAINTENANCE_MENU_TITLE="$processName Maintenance Menu"
	
    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="$processName restart           ($consul_restartCommand)"
    MAINTENANCE_MENU_TEXT[2]="$processName stop              ($consul_stopCommand)"
    MAINTENANCE_MENU_TEXT[3]="$processName boot_on           ($consul_bootOnCommand)"
    MAINTENANCE_MENU_TEXT[4]="$processName boot_off          ($consul_bootOffCommand)"
    MAINTENANCE_MENU_TEXT[5]="$processName configuration     (cat $configFile)"
    MAINTENANCE_MENU_TEXT[6]="$processName log               (tail ${tailLines} $consulLog)"
    MAINTENANCE_MENU_TEXT[7]="$processName members           ($processName members)"
    MAINTENANCE_MENU_TEXT[8]="$processName force-leave Node  ($processName force-leave Node)"
    
    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="ryft_restart $processName"
    MAINTENANCE_MENU_ACTIONS[2]="ryft_stop $processName"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_boot_on $processName"
    MAINTENANCE_MENU_ACTIONS[4]="ryft_boot_off $processName"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_separator; cat $configFile; ryft_separator"
    MAINTENANCE_MENU_ACTIONS[6]="ryft_separator; tail ${tailLines} $consulLog; ryft_separator"
    MAINTENANCE_MENU_ACTIONS[7]="ryft_separator; consul members; ryft_separator"
    local node
    MAINTENANCE_MENU_ACTIONS[8]="ryft_separator; getNode ; ryft_separator"

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

#######################################0

function ryft_ryftodbcd_maintenance_menu
{
    local processName=ryftodbcd
    local configFile=/usr/local/ryft/bin/x8664/.ryftone.server.ini

    local MAINTENANCE_MENU_TITLE="$processName Maintenance Menu"
	
    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="$processName restart        ($ryft1_odbcd_restartCommand)"
    MAINTENANCE_MENU_TEXT[2]="$processName stop           ($ryft1_odbcd_stopCommand)"
    MAINTENANCE_MENU_TEXT[3]="$processName boot_on        ($ryft1_odbcd_bootOnCommand)"
    MAINTENANCE_MENU_TEXT[4]="$processName boot_off       ($ryft1_odbcd_bootOffCommand)"
    MAINTENANCE_MENU_TEXT[5]="$processName configuration  (cat $configFile)"
    MAINTENANCE_MENU_TEXT[6]="$processName log            (tail ${tailLines} $ryftodbcdLog)"
    
    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="ryft_restart $processName"
    MAINTENANCE_MENU_ACTIONS[2]="ryft_stop $processName"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_boot_on $processName"
    MAINTENANCE_MENU_ACTIONS[4]="ryft_boot_off $processName"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_separator; cat $configFile; ryft_separator"
    MAINTENANCE_MENU_ACTIONS[6]="ryft_separator; tail ${tailLines} $ryftodbcdLog; ryft_separator"

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

#######################################0

function ryft_ryftwebapidemo_maintenance_menu
{
    local processName=ryftwebapidemo
    local configFile=/opt/ryft-demo/conf/ryft.properties

    local MAINTENANCE_MENU_TITLE="$processName Maintenance Menu"
	
    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="$processName restart        ($apidemo_restartCommand)"
    MAINTENANCE_MENU_TEXT[2]="$processName stop           ($apidemo_stopCommand)"
    MAINTENANCE_MENU_TEXT[3]="$processName boot_on        ($apidemo_bootOnCommand)"
    MAINTENANCE_MENU_TEXT[4]="$processName boot_off       ($apidemo_bootOffCommand)"
    MAINTENANCE_MENU_TEXT[5]="$processName configuration  (cat $configFile)"
    MAINTENANCE_MENU_TEXT[6]="$processName log            (tail ${tailLines} $ryftwebapidemoLog)"

    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="ryft_restart $processName"
    MAINTENANCE_MENU_ACTIONS[2]="ryft_stop $processName"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_boot_on $processName"
    MAINTENANCE_MENU_ACTIONS[4]="ryft_boot_off $processName"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_separator; cat $configFile; echo; ryft_separator"
    MAINTENANCE_MENU_ACTIONS[6]="ryft_separator; tail ${tailLines} $ryftwebapidemoLog; ryft_separator"

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

#######################################0

function ryft_maintenance_menu
{
    local MAINTENANCE_MENU_TITLE="Maintenance Menu"

    local -a MAINTENANCE_MENU_TEXT
    MAINTENANCE_MENU_TEXT[0]="Exit"
    MAINTENANCE_MENU_TEXT[1]="RyftONE Maintenance"
    MAINTENANCE_MENU_TEXT[2]="ryft-server-d Maintenance"
    MAINTENANCE_MENU_TEXT[3]="ryftwebapidemo Maintenance"
    MAINTENANCE_MENU_TEXT[4]="ryftodbcd Maintenance"
    MAINTENANCE_MENU_TEXT[5]="consul Maintenance"
    
    local -a MAINTENANCE_MENU_ACTIONS
    MAINTENANCE_MENU_ACTIONS[0]="exit"
    MAINTENANCE_MENU_ACTIONS[1]="ryft_ryftone_maintenance_menu"
    MAINTENANCE_MENU_ACTIONS[2]="ryft_ryft_server_d_maintenance_menu"
    MAINTENANCE_MENU_ACTIONS[3]="ryft_ryftwebapidemo_maintenance_menu"
    MAINTENANCE_MENU_ACTIONS[4]="ryft_ryftodbcd_maintenance_menu"
    MAINTENANCE_MENU_ACTIONS[5]="ryft_consul_maintenance_menu"

    local MAINTENANCE_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAINTENANCE_MENU_TITLE" MAINTENANCE_MENU_TEXT[@] MAINTENANCE_MENU_ACTIONS[@] "$MAINTENANCE_MENU_COMMAND" 
}

####################################
function ryft_showCommand() {
	echo -e "${greenAttributeON}$1${attributesOFF}"
	$1
}

function ryftone_clean_logs()
{
	ryft_showCommand "sudo service rhfsd stop" 
	ryft_showCommand "sudo service ccc_mgr stop" 
	ryft_showCommand "sudo service tlogd stop" 
	ryft_showCommand "sudo rm -f /var/log/ryft/ryftone.log"
	ryft_showCommand "sudo service tlogd start" 
	ryft_showCommand "sudo service rhfsd start"
	ryft_showCommand "sleep 2s" 
	ryft_showCommand "sudo service ccc_mgr start" 
}

function ryft_separator() 
{
    echo "-----------------------------------------------"
}

function getNode
{
    local answer

    consul members
    echo	
    read -p "Enter force-leave Node (or 0 for exit) " answer
    if [ ! -z "$answer" -a "$answer" = "0" ]; then
	echo "skipping..."
    else
	echo "consul force-leave $answer"
    fi
}

function menu_select_next
{
    # needs sequencing beyond 0..9       
    next=$(($1 + 1))
    echo $next
}

function ryft_logs_menu
{
    
    local LOGS_MENU_TITLE="Ryft Logs Menu"
    local -a menu_select

    local -a LOGS_MENU_TEXT
    menu_select=0
    LOGS_MENU_TEXT[${menu_select}]="Exit"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_TEXT[${menu_select}]="RyftOne log              (tail ${tailLines} $ryftoneLog)"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_TEXT[${menu_select}]="ryft-server-d log        (tail ${tailLines} $ryft_server_dLog)"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_TEXT[${menu_select}]="ryftwebapidemo log       (tail ${tailLines} $ryftwebapidemoLog)"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_TEXT[${menu_select}]="ryftodbcd log            (tail ${tailLines} $ryftodbcdLog)"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_TEXT[${menu_select}]="consul log               (tail ${tailLines} $consulLog)"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_TEXT[${menu_select}]="consul-alerts log        (tail ${tailLines} $consulAlertsLog)"
    menu_select=`menu_select_next $menu_select`
    if [ $rhfs == 1 ]
    then
        LOGS_MENU_TEXT[${menu_select}]="RyftOne diagnostic dump  (sudo ryft_diagnostics_dump)"
        menu_select=`menu_select_next $menu_select`
        LOGS_MENU_TEXT[${menu_select}]="RyftOne clean log        (from Admin Guide - TroubleShooting Section)"
        menu_select=`menu_select_next $menu_select`
    fi
    LOGS_MENU_TEXT[${menu_select}]="RyftOne App Logs dump    (tar all application logs, menu selection #1,2,3,4,5)"
    menu_select=`menu_select_next $menu_select`
    
    local -a LOGS_MENU_ACTIONS
    menu_select=0
    LOGS_MENU_ACTIONS[${menu_select}]="exit"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_ACTIONS[${menu_select}]="ryft_separator; tail ${tailLines} $ryftoneLog; ryft_separator"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_ACTIONS[${menu_select}]="ryft_separator; tail ${tailLines} $ryft_server_dLog; ryft_separator"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_ACTIONS[${menu_select}]="ryft_separator; tail ${tailLines} $ryftwebapidemoLog; ryft_separator"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_ACTIONS[${menu_select}]="ryft_separator; tail ${tailLines} $ryftodbcdLog; ryft_separator"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_ACTIONS[${menu_select}]="ryft_separator; tail ${tailLines} $consulLog; ryft_separator"
    menu_select=`menu_select_next $menu_select`
    LOGS_MENU_ACTIONS[${menu_select}]="ryft_separator; tail ${tailLines} $consulAlertsLog; ryft_separator"
    menu_select=`menu_select_next $menu_select`
    if [ $rhfs == 1 ]
    then
	    LOGS_MENU_ACTIONS[${menu_select}]="ryft_separator; ryft_showCommand \"sudo ryft_diagnostics_dump\" && ryft_separator; echo -n \" diagnostic dump filename is:\" && ls -t *.bz2|head -1; ryft_separator"
	    menu_select=`menu_select_next $menu_select`
	    LOGS_MENU_ACTIONS[${menu_select}]="ryft_ays \"Requested action restarts rhfsd, which temporarily dismounts /ryftone filsystem.\" && ryft_separator && ryftone_clean_logs && ryft_separator"
	    menu_select=`menu_select_next $menu_select`
    fi
    LOGS_MENU_ACTIONS[${menu_select}]="ryft_separator; ryft_app_logs; ryft_separator; echo -n \" App Logs dump filename is:\" && ls -t /tmp/*app_logs.tar.bz2|head -1; ryft_separator"
    menu_select=`menu_select_next $menu_select`

    local LOGS_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$LOGS_MENU_TITLE" LOGS_MENU_TEXT[@] LOGS_MENU_ACTIONS[@] "$LOGS_MENU_COMMAND" 
}


function ryft_main_menu
{
    local MAIN_MENU_TITLE="Ryft Menu"
    local -a menu_select

    local -a MAIN_MENU_TEXT
    menu_select=0
    MAIN_MENU_TEXT[$menu_select]="Exit"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_TEXT[$menu_select]="Start Menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_TEXT[$menu_select]="Stop Menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_TEXT[$menu_select]="Restart Menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_TEXT[$menu_select]="Boot on Menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_TEXT[$menu_select]="Boot off Menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_TEXT[$menu_select]="Maintenance Menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_TEXT[$menu_select]="Ryft logs Menu"
    menu_select=`menu_select_next $menu_select`
    if [ $ryftVersionsPresent == 1 ]
    then
        MAIN_MENU_TEXT[$menu_select]="BlackLynx Versions"
        menu_select=`menu_select_next $menu_select`
    fi

    local -a MAIN_MENU_ACTIONS
    menu_select=0
    MAIN_MENU_ACTIONS[$menu_select]="exit"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_ACTIONS[$menu_select]="ryft_start_menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_ACTIONS[$menu_select]="ryft_stop_menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_ACTIONS[$menu_select]="ryft_restart_menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_ACTIONS[$menu_select]="ryft_boot_on_menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_ACTIONS[$menu_select]="ryft_boot_off_menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_ACTIONS[$menu_select]="ryft_maintenance_menu"
    menu_select=`menu_select_next $menu_select`
    MAIN_MENU_ACTIONS[$menu_select]="ryft_logs_menu"
    menu_select=`menu_select_next $menu_select`
    if [ $ryftVersionsPresent == 1 ]
    then
        MAIN_MENU_ACTIONS[$menu_select]="ryft_separator; blnx-versions; ryft_separator;"
        menu_select=`menu_select_next $menu_select`
    fi

    local MAIN_MENU_COMMAND="ryft_boot_status; ryft_status;"

    ryft_menu "$MAIN_MENU_TITLE" MAIN_MENU_TEXT[@] MAIN_MENU_ACTIONS[@] "$MAIN_MENU_COMMAND" 
}

####################################
	
#status=$((status+1))

#
# process input parameters
#
verbose=0
smokeFlag=0
helpFlag=0
startFlag=0
stopFlag=0
menuFlag=0
fixFlag=0
while [[ $# > 0 ]]; do
	okay=0

	if [ "$1" = "-v" -o "$1" = "-verbose" ]
	then
		verbose=1
		okay=1
	fi

	if [ "$smokePath" != "" -a "$1" == "-smoke" ]
	then
		#echo "smoke test enabled"
		smokeFlag=1
		okay=1
	fi
	
	if [ "$1" == "-start" ]
	then
		#echo "start enabled"
		startFlag=1
		okay=1
	fi

	if [ "$1" == "-stop" ]
	then
		stopFlag=1
		okay=1
	fi

	if [ "$1" == "-help" -o "$1" == "-?" ]
	then
		#echo "help enabled"
		helpFlag=1
		okay=1
	fi
	
	if [ "$1" == "-m" -o "$1" == "-menu" ]
	then
		menuFlag=1
		okay=1
		ryft_main_menu
		exit
	fi
	
	if [ "$1" == "-fix" ]
	then
		fixFlag=1
		okay=1
	fi

	if [ $okay = 0 ]
	then
		usage
		exit 0
	fi

	shift
done


#
# ryft process detection
#
ryft_ps_filename=/tmp/ryft_ps_$$
ryft_status_filename=/tmp/ryft_status_$$
ryft_status_verbose=/tmp/ryft_status_verbose_$$
ryft_ryftone_files=/tmp/ryft_ryftone_files_$$
detect_process() {
	if [ $rhfs == 0 -a "$1" == "rhfsd" ]
	then
		returnValue=1
	elif [ $rhfs == 0 -a "$1" == "tlogd" ]
	then
		returnValue=1
	elif [ $rhfs == 0 -a "$1" == "ccc_mgr" ]
	then
		returnValue=1
	else
		returnValue=`cat $ryft_ps_filename|egrep "$1"|wc -l`
	fi
	echo $returnValue
}

#
# cleanup
#
cleanup() {
	rm -f $ryft_ps_filename
	rm -f $ryft_status_filename
	rm -f $ryft_status_verbose
	rm -f $ryft_ryftone_files
}

#
# ryft status items
#


#
# filesystem won't mount
#
filesystem_filecount=1
filesystem_filecount_reset() {
	filesystem_filecount=1
}
filesystem_filecount_fix() {
	local stat=0

	if [ -e /ryftone ]
	then
		local suffix=`date "+%Y%m%d-%H%M%S"`
		echo "#move /ryftone"

		echo "sudo mv /ryftone /ryftone.$suffix"
		sudo mv /ryftone /ryftone.$suffix
		stat=$?
	fi

	if [ $stat = 0 ]
	then
		echo "#create new /ryftone"

		echo "sudo mkdir /ryftone" &&
		sudo mkdir /ryftone &&
		echo "sudo chmod 775 /ryftone" &&
		sudo chmod 775 /ryftone &&
		echo "sudo chown ryftone.ryftone /ryftone"
		sudo chown ryftone.ryftone /ryftone
		stat=$?

		if [ $stat = 0 ]
		then
			sudo service rhfsd start &&
			sudo service ccc_mgr start 
			#stat=$?
		fi
	fi

	if [ $stat != 0 ]
	then
		echo "Encountered an error creating /ryftone "
	fi
}
show_filesystem_filecount_error() {
	problemCounter=$((problemCounter+1))
	# ryft_showCommand
	echo -e "${redAttributeON}*${problemCounter}* /ryftone filesystem not found or will not mount with files present. ${attributesOFF}Issue following command to fix problem (existing files will be moved to /ryftone.<YYYYmmdd-HHMMSS>):"
	echo "	'ryft_status -fix"
	if [ $filesystem_filecount != 0 ]
	then
		echo "The following /ryftone files were found: "
		cat $ryft_ryftone_files|sed 's/^/	/g'
	else
		echo "No /ryftone files were found."
	fi
}


#
filesystem_status=0
filesystem_error=0
smoke_error=0
show_smoke_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* smoke test failed.${attributesOFF}"
	echo "Follow corrective actions in smoke test response"
    echo
}
show_filesystem_error () {
	#echo "*** /ryftone filesystem is not mounted.  To correct, try commands: 'cpc; sudo recycle'  ***"
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* /ryftone filesystem is not mounted or smoke test failed.${attributesOFF}"
	echo "Follow corrective actions in following order:"
	echo "1. command: '(cpc; sudo recycle)'"
	echo "   Repeat command if 'ryft_status' doesn't indicate OKAY"
 	echo "   If ryft_status is not OKAY, advance to step #2."
	echo "   If OKAY, 'ryft_status -smoke' should show no problems."
	echo "   if 'ryft_status -smoke' problems persist, advance to next step."
	echo
	#echo "         1         2         3         4         5         6         7         8"
	#echo "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
	echo "2. command: 'sudo poweroff;' then remote/manually power on"
	echo "   'ryft_status -smoke' should show no problems when problem is resolved."
	echo "   if 'ryft_status -smoke' problems persist, repeat steps 1 and 2 one time."
	echo "   if 'ryft_status -smoke' problems persist, advance to next step."
	echo
	echo "3. do 3 times 'sudo hw_reset_rhfs_ccc.sh; sudo poweroff;'"
	echo "   ***NOTE***: this process will require restoring /ryftone filesystem data" 
	echo "   perform 'ryft_status -smoke' after completing 3 hw_reset, poweroff cycles'"
	echo "   if 'ryft_status -smoke' problems persist, call customer support"
	echo "   If OKAY, restore /ryftone filesystem data"
	echo
	#echo "         1         2         3         4         5         6         7         8"
	#echo "12345678901234567890123456789012345678901234567890123456789012345678901234567890"
}


#
tlogd_status=0
tlogd_error=0
tlogd_status_reset() {
	tlogd_status=0
	tlogd_error=0
}
show_tlogd_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* tlogd is not running. ${attributesOFF}To start tlogd issue command: "
	echo "	'sudo recycle'"
}

#
rhfsd_status=0
rhfsd_error=0
show_rhfsd_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* rhfsd is not running. ${attributesOFF}To start rhfsd issue command: "
	echo "	'sudo recycle'"
}

#
ccc_mgr_status=0
ccc_mgr_error=0
show_ccc_mgr_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* ccc_mgr is not running. ${attributesOFF}To start ccc_mgr, issue command: "
	echo "	'sudo recycle'"
}

#
ryftServer=NotInstalled
test -e /usr/bin/ryft-server
if [ $? == 0 ] 
then
	ryftServer=Installed
fi
ryftServer_boot=`ryft_boot_enabled ryft-server-d`
ryftServer_status=0
ryftServer_error=0
ryftServer_start() {
	echo "--------------------"
	echo "starting ryft-server-d with $ryftServer_startCommand"
	${ryftServer_startCommand}
	if [ $? != 0 ]
	then
		echo -e "${redAttributeON}* problem starting ryft-server. ${attributesOFF}"
	fi
}
ryftServer_stop() {
	echo "--------------------"
	echo "stopping ryft-server-d with $ryftServer_stopCommand"
	${ryftServer_stopCommand}
	if [ $? != 0 ]
	then
		echo -e "${redAttributeON}* problem stopping ryft-server. ${attributesOFF}"
	fi
}
show_ryftServer_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* ryft-server-d is not running.${attributesOFF} To start ryft-server-d, issue command: "
	echo "	'$ryftServer_startCommand'"
}

#
ryft1_odbcd=NotInstalled
test -d /usr/local/ryft/bin
if [ $? == 0 ] 
then
	ryft1_odbcd=Installed
fi
ryft1_odbcd_boot=`ryft_boot_enabled ryftodbcd`
if [ $debug != 0 ]
then
	echo "ryft1_odbcd=$ryft1_odbcd"
fi
ryft1_odbcd_status=0
ryft1_odbcd_error=0
ryft1_odbcd_start() {
	echo "--------------------"
	echo "starting ryft1_odbcd with $ryft1_odbcd_startCommand"
	${ryft1_odbcd_startCommand}
}
ryft1_odbcd_stop() {
	echo "--------------------"
	echo "stoppng ryft1_odbcd with $ryft1_odbcd_stopCommand"
	${ryft1_odbcd_stopCommand}
}
show_ryft1_odbcd_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* ryft1_odbcd is not running.${attributesOFF} To start ryft1_odbcd, issue command"
	echo "	'$ryft1_odbcd_startCommand'"
	#echo "or one of following:"
	#echo "	'su ryftuser -c /usr/local/ryft/bin/x8664/ryft1_odbcctl -s"
	#echo "	'sudo service ryft1_odbcd start'"
}

#
consul=NotInstalled
test -d /opt/consul/bin
if [ $? == 0 ] 
then
	consul=Installed
fi
if [ $debug != 0 ]
then
	echo "consul=$consul"
fi
consul_boot=`ryft_boot_enabled consul`
consul_status=0
consul_error=0

consul_start() {
	echo "--------------------"
	echo "starting consul with $consul_startCommand"
	${consul_startCommand}
}
consul_stop() {
	echo "--------------------"
	echo "stopping consul with $consul_stopCommand"
	${consul_stopCommand}
}
show_consul_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* consul is not running.${attributesOFF} To start consul, issue command: "
	echo "	'$consul_startCommand'"
}

#
consulAlerts=NotInstalled
test -f /etc/init/consul-alerts.conf
if [ $? == 0 ] 
then
	consulAlerts=Installed
fi
if [ $debug != 0 ]
then
	echo "consulAlerts=$consulAlerts"
fi
consulAlerts_boot=`ryft_boot_enabled consul-alerts`
consulAlerts_status=0
consulAlerts_error=0
consulAlerts_start() {
	echo "--------------------"
	echo "starting consul-alerts with $consulAlerts_startCommand"
	${consulAlerts_startCommand}
}
consulAlerts_stop() {
	echo "--------------------"
	echo "stopping consul-alerts with $consulAlerts_stopCommand"
	${consulAlerts_stopCommand}
}
show_consulAlerts_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* consul-alerts is not running.${attributesOFF} To start consul-alerts, issue command: "
	echo "	'$consulAlerts_startCommand'"
}
#echo "TBD consulAlerts=$consulAlerts, consulAlerts_boot=$consulAlerts_boot, consulAlerts_status=$consulAlerts_status"

#
apidemo=NotInstalled
test -d ~ryftuser/ryft/apidemo || test -d /opt/ryft-demo
if [ $? == 0 ] 
then
	apidemo=Installed
fi
if [ $debug != 0 ]
then
	echo "apidemo=$apidemo"
fi
apidemo_boot=`ryft_boot_enabled ryftwebapidemo`
apidemo_status=0
apidemo_error=0
apidemo_start() {
	echo "--------------------"
	echo "starting apidemo with $apidemo_startCommand"
	${apidemo_startCommand}
}
apidemo_stop() {
	echo "--------------------"
	echo "stopping apidemo with $apidemo_stopCommand"
	${apidemo_stopCommand}
}
show_apidemo_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* apidemo is not running.${attributesOFF} To start, issue command:"
	echo "	'$apidemo_startCommand'"
}

#
elasticsearch=NotInstalled
test -e /etc/init/elasticsearch.conf
if [ $? != 0 ]
then
    test -e /usr/share/elasticsearch/elasticsearch.conf
fi
if [ $? == 0 ] 
then
	elasticsearch=Installed
fi
if [ $debug != 0 ]
then
	echo "elasticsearch=$elasticsearch"
fi
elasticsearch_boot=`ryft_boot_enabled elasticsearch`
elasticsearch_status=0
elasticsearch_error=0
elasticsearch_start() {
	echo "--------------------"
	echo "starting elasticsearch with $elasticsearch_startCommand"
	${elasticsearch_startCommand}
}
elasticsearch_stopCommand="sudo service elasticsearch stop"
elasticsearch_stop() {
	echo "--------------------"
	echo "stopping elasticsearch with $elasticsearch_stopCommand"
	${elasticsearch_stopCommand}
}
show_elasticsearch_error () {
	problemCounter=$((problemCounter+1))
	echo -e "${redAttributeON}*${problemCounter}* elasticsearch is not running.${attributesOFF} To start, issue command:"
	echo "	'$elasticsearch_startCommand'"
}
#echo "TBD elasticsearch=$elasticsearch, elasticsearch_boot=$elasticsearch_boot, elasticsearch_status=$elasticsearch_status"


showErrorDisplay() {
	echo 
	echo "show error display ---------------------------"
	if [ $ryftServer == "Installed" ]
	then
		show_ryftServer_error 
	fi
	if [ $ryft1_odbcd == "Installed" ]
	then
		show_ryft1_odbcd_error 
	fi
	if [ $consul == "Installed" ]
	then
		show_consul_error
	fi
	if [ $apidemo == "Installed" ]
	then
		show_apidemo_error
	fi
	if [ $elasticsearch == "Installed" ]
	then
		show_elasticsearch_error
	fi

    if [ $rhfs == 1 ]
    then
    	show_tlogd_error
    	show_rhfsd_error
    	show_ccc_mgr_error
    	show_filesystem_error 
    fi       

	echo "show error display ---------------------------"
}
showCommandDisplay() {
	echo 
	echo "show command display ---------------------------"

	echo

	echo "ryftwebapidemo start/stop process"
	echo "  $apidemo_startCommand"
	echo "  $apidemo_stopCommand"
	echo "ryftwebapidemo boot_on/boot_off process"
    if [ $OSVersionMajor == 14 ]
    then
    	echo "  sudo rm -f /etc/init/ryftwebapidemo.override"
    	echo "  echo \"manual\" | sudo tee /etc/init/ryftwebapidemo.override"
    else
        x=ryftwebapidemo           
        echo "  sudo systemctl enable $x.service"
        echo "  sudo systemctl disable $x.service"
    fi

	echo
	
	echo "ryft-server-d start/stop process"
	echo "  $ryftServer_startCommand"
	echo "  $ryftServer_stopCommand"
	echo "ryft-server-d boot_on/boot_off process"
    if [ $OSVersionMajor == 14 ]
    then
    	echo "	sudo rm -f /etc/init/ryft-server-d.override"
    	echo "	echo \"manual\" | sudo tee /etc/init/ryft-server-d.override"
    else
        x=ryft-server-d
        echo "  sudo systemctl enable $x.service"
        echo "  sudo systemctl disable $x.service"
    fi


	echo

	echo "consul start/stop process"
    echo "  $consul_startCommand"
	echo "  $consul_stopCommand"
	echo "consul boot_on/boot_off process"
    if [ $OSVersionMajor == 14 ]
    then
    	echo "  sudo rm -f /etc/init/consul.override"
    	echo "	echo \"manual\" | sudo tee /etc/init/consul.override"
    else
        x=consul
        echo "  sudo systemctl enable $x.service"
        echo "  sudo systemctl disable $x.service"
    fi

	echo 

	echo "ryft1_odbcd start/stop process"
	echo "  $ryft1_odbcd_startCommand"
	echo "  $ryft1_odbcd_stopCommand"
	echo "ryft1_odbcd boot_on/boot_off process"
    if [ $OSVersionMajor == 14 ]
    then
    	echo "	 sudo rm -f /etc/init/ryft1_odbcd.override"
    	echo "	 echo \"manual\" | sudo tee /etc/init/ryft1_odbcd.override"
    else
        x=ryft1_odbcd
        echo "  sudo systemctl enable $x.service"
        echo "  sudo systemctl disable $x.service"
    fi
	
    echo 
	
    echo "elasticsearch start/stop process"
	echo "  $elasticsearch_startCommand"
	echo "  $elasticsearch_stopCommand"
	echo "elasticsearch boot_on/boot_off process"
    x=elasticsearch
    if [ $OSVersionMajor == 14 ]
    then
    	echo "	 sudo rm -f /etc/init/$x.override"
    	echo "	 echo \"manual\" | sudo tee /etc/init/$x.override"
    else
        echo "  sudo systemctl enable $x.service"
        echo "  sudo systemctl disable $x.service"
    fi

	echo
    echo "show command display ---------------------------"
}


if [ $helpFlag = 1 ]
then
	usage
	showErrorDisplay
	showCommandDisplay
	exit 0
fi

ryft_statusX() {
	problemCounter=0

	expectedProcessCount=3		# rhfsd, ccc_mgr, tlogd

	#
	# start status colleciton
	#
	ryft_ps >$ryft_ps_filename

	#
	# reset status and error conditions
	#
	status=0

	filesystem_filecount_reset

	filesystem_status=0
	filesystem_error=0
    smoke_error=0

	tlogd_status_reset

	rhfsd_status=0
	rhfsd_error=0

	ccc_mgr_status=0
	ccc_mgr_error=0

	ryftServer_status=0
	ryftServer_error=0
	ryftServer_boot=`ryft_boot_enabled ryft-server-d`
	if [ $ryftServer_boot = 1 ]
	then
		expectedProcessCount=$((expectedProcessCount+1))
	fi

	ryft1_odbcd_status=0
	ryft1_odbcd_error=0
	ryft1_odbcd_boot=`ryft_boot_enabled ryftodbcd`
	if [ $ryft1_odbcd_boot = 1 ]
	then
		expectedProcessCount=$((expectedProcessCount+1))
	fi

	consul_status=0
	consul_error=0
	consul_boot=`ryft_boot_enabled consul`
	if [ $consul_boot = 1 ]
	then
		expectedProcessCount=$((expectedProcessCount+1))
	fi
	
	consulAlerts_status=0
	consulAlerts_error=0
	consulAlerts_boot=`ryft_boot_enabled consul-alerts`
	if [ $consulAlerts_boot = 1 ]
	then
		expectedProcessCount=$((expectedProcessCount+1))
	fi

	apidemo_status=0
	apidemo_error=0
	apidemo_boot=`ryft_boot_enabled ryftwebapidemo`
    #echo "TBD apidemo_boot=$apidemo_boot"
	if [ $apidemo_boot = 1 ]
	then
		expectedProcessCount=$((expectedProcessCount+1))
	fi
	
	elasticsearch_status=0
	elasticsearch_error=0
	elasticsearch_boot=`ryft_boot_enabled elasticsearch`
    #echo "TBD elasticsearch_boot=$elasticsearch_boot"
	if [ $elasticsearch_boot = 1 ]
	then
		expectedProcessCount=$((expectedProcessCount+1))
	fi

	ryft_statusCount=$((ryft_statusCount+1))
	if [ $ryft_statusCount != 1 ]
	then
		#echo "--------------------"
		echo "$hostname status"
		echo "--------------------"
	fi

	#
	# /ryftone filesystem status
	#
	#echo
	(echo "$hostname Filesystem" `date` 
	df -h /storage/* /ryftone >$ryft_status_filename 2>/dev/null
	cat $ryft_status_filename
	)>>$ryft_status_verbose
	ryftoneMounted=`cat $ryft_status_filename|grep "/ryftone"|grep "/dev/fuse"|wc -l`
	if [ $rhfs == 1 -a $ryftoneMounted != 1 ]
	then
		filesystem_error=1
		status=$((status+1))

		filesystem_filecount=`find /ryftone 2>/dev/null|wc -l`
		if [ $filesystem_filecount != 1 ]
		then
			#status=$((status+1))
			find /ryftone/ >$ryft_ryftone_files 2>/dev/null
		fi
	fi
	
	#
	# ryft process status
	#
	(echo
	processCount=`cat $ryft_ps_filename|tail -n +1|wc -l`
	if [ $processCount != $expectedProcessCount ]
	then
		echo "$hostname Processes processCount=$processCount, but expecting $expectedProcessCount processes" 
	else
		echo "$hostname Processes" 
	fi
	cat $ryft_ps_filename 
	)>>$ryft_status_verbose
	
	tlogd_status=`detect_process "tlogd"`
	#echo "tlogd_status=$tlogd_status"
	rhfsd_status=`detect_process "rhfsd"`
	# echo "rhfsd_status=$rhfsd_status"
	ccc_mgr_status=`detect_process "ccc_mgr"`
	# echo "ccc_mgr_status=$ccc_mgr_status"
	ryftServer_status=`detect_process "ryft-server"`
	#echo "ryftServer_status=$ryftServer_status"
	ryft1_odbcd_status=`detect_process "ryft1_odbcd"`
	# echo "ryft1_odbcd_status=$ryft1_odbcd_status"
	consul_status=`detect_process "/opt/consul/bin/consul agent"`
	# echo "consul_status=$consul_status"
	consulAlerts_status=`detect_process "/opt/consul/bin/consul-alerts start"`
	# echo "consulAlerts_status=$consulAlerts_status"
	apidemo_status=`detect_process 'java\s+-cp\s+conf:lib/\*\s+com.metasys.ryft.DemoApp'`
	#echo "apidemo_status=$apidemo_status"
	# echo "elasticsearch_status=$elasticsearch_status"
	elasticsearch_status=`detect_process "(/usr/lib/jvm/java-1.8.0|/usr/bin/java).*-cp
    (/opt/elasticsearch|/usr/share/elasticsearch)"`
	
	if [ $tlogd_status = 0 ]
	then
		tlogd_error=1
		status=$((status+1))
	fi
	if [ $rhfsd_status = 0 ]
	then
		rhfsd_error=1
		if [ $filesystem_filecount = 1 ]
		then
			status=$((status+1))
		fi
	fi
	if [ $ccc_mgr_status = 0 ]
	then
		ccc_mgr_error=1
		status=$((status+1))
	fi

	#echo "TBD ryftServer=$ryftServer, ryftServer_boot=$ryftServer_boot, ryftServer_status=$ryftServer_status"
	if [ $ryftServer = "Installed"  -a $ryftServer_boot != 0  -a $ryftServer_status = 0 ]
	then
		ryftServer_error=1
		status=$((status+1))
	fi

	#echo "TBD ryft1_odbcd=$ryft1_odbcd, ryft1_odbcd_boot=$ryft1_odbcd_boot, ryft1_odbcd_status=$ryft1_odbcd_status"
	if [ $ryft1_odbcd = "Installed" -a $ryft1_odbcd_boot != 0 -a $ryft1_odbcd_status = 0 ]
	then
		ryft1_odbcd_error=1
		status=$((status+1))
	fi

	#echo "TBD consul=$consul, consul_boot=$consul_boot, consul_status=$consul_status"
	if [ $consul = "Installed"      -a $consul_boot != 0      -a $consul_status = 0 ]
	then
		consul_error=1
		status=$((status+1))
	fi
	
	#echo "TBD consulAlerts=$consulAlerts, consulAlerts_boot=$consulAlerts_boot, consulAlerts_status=$consulAlerts_status"
	if [ $consulAlerts = "Installed" -a $consulAlerts_boot != 0 -a $consulAlerts_status = 0 ]
	then
		consulAlerts_error=1
		status=$((status+1))
	fi

	#echo "TBD apidemo=$apidemo, apidemo_boot=$apidemo_boot, apidemo_status=$apidemo_status"
	if [ $apidemo = "Installed"      -a $apidemo_boot != 0    -a $apidemo_status = 0 ]
	then
		apidemo_error=1
		status=$((status+1))
	fi
	
	#echo "TBD elasticsearch=$elasticsearch, elasticsearch_boot=$elasticsearch_boot, elasticsearch_status=$elasticsearch_status"
	if [ $elasticsearch = "Installed"      -a $elasticsearch_boot != 0    -a $elasticsearch_status = 0 ]
	then
		elasticsearch_error=1
		status=$((status+1))
	fi

	#
	# ryft memory status
	#	
	(echo 
	echo "$hostname Memory" 
	free -h 
	)>>$ryft_status_verbose

	if [ $verbose = 1 ]
	then
		cat $ryft_status_verbose
	fi

	#
	# -smoke only processed when requested AND when other things look ok
	#
	if [ "$smokePath" != "" -a $smokeFlag = 1 -a $tlogd_status != 0 -a $rhfsd_status != 0 -a $ccc_mgr_status != 0 ]
	then
		$smokePath|tee $ryft_status_filename
		faildetect=`cat $ryft_status_filename|grep FAILED|wc -l`
	        if [ $rhfs == 1 ]
	        then
			passdetect=`cat $ryft_status_filename|egrep "PASSED"|wc -l`
	        else
			passdetect=`cat $ryft_status_filename|egrep "PASSED"|wc -l`
	        fi 
		if [ $faildetect != 0 -o $passdetect = 0 ]
		then
			echo "*** smoke.sh failed ***"
			smoke_error=1
			filesystem_error=1
			status=$((status+1))
		fi
	fi


	if [ $status = 0 ]
	then
		#
		# OKAY
		#
		#echo -e "$hostname ryft_status " ${greenAttributeON}OKAY${attributesOFF}
		echo
		echo -e "${greenAttributeON}$hostname ryft_status OKAY${attributesOFF}"
	else
		#
		# PROBLEMS
		#
		echo
		PROBLEMS=`[ $status = 1 ] && echo "PROBLEM" || echo "PROBLEMS"`
		#echo -e "$hostname ryft_status " "found ${redAttributeON}$status $PROBLEMS${attributesOFF}"
		echo -e "${redAttributeON}$hostname ryft_status found $status $PROBLEMS${attributesOFF}"

		#
		# error handling
		#
		if [ $filesystem_filecount -gt 1 ]
		then
			show_filesystem_filecount_error
		else
			if [ $rhfs == 1 -a $filesystem_error != 0 ]
			then
				show_filesystem_error
			fi
            if [ $rhfs == 0 -a $smoke_error != 0 ]
            then
                show_smoke_error
            fi
			if [ $rhfsd_error != 0 ]
			then
				show_rhfsd_error
			fi
		fi
		if [ $ccc_mgr_error != 0 ]
		then
			show_ccc_mgr_error
		fi
		if [ $tlogd_error != 0 ]
		then
			show_tlogd_error
		fi
	
		if [ $ryftServer_error != 0 ]
		then
			show_ryftServer_error
		fi
		if [ $ryft1_odbcd_error != 0 ]
		then
			show_ryft1_odbcd_error
		fi
		if [ $consul_error != 0 ]
		then
			show_consul_error
		fi
		if [ $consulAlerts_error != 0 ]
		then
			show_consulAlerts_error
		fi
		if [ $apidemo_error != 0 ]
		then
			show_apidemo_error
		fi
		if [ $elasticsearch_error != 0 ]
		then
			show_elasticsearch_error
		fi
		
		count=`echo "$ryftServer_error + $ryft1_odbcd_error + $consul_error + $consulAlerts_error + $apidemo_error + $elasticsearch_error" | bc` 
		message=""
		#echo "### count=$count"
		if [ $count != 0 -a $tlogd_error = 0 -a $filesystem_error = 0 -a $rhfsd_error = 0 -a $ccc_mgr_error = 0 ] 
		then
			message="( try '${redAttributeON}ryft_status -start${attributesOFF}' to correct. )"
	
		fi
		#echo "### message=$message"
		#echo -e "$hostname ryft_status " "found ${redAttributeON}$status $PROBLEMS${attributesOFF} $message"
		echo
		echo -e "${redAttributeON}$hostname ryft_status found $status $PROBLEMS${attributesOFF} $message"
	fi
}
ryft_statusX


#
# stopFlag detection
#
if [ $stopFlag = 1 ]
then
	#
	# any processes we can stop?
	#
	#echo "TBD ryftServer_status=$ryftServer_status + ryft1_odbcd_status=$ryft1_odbcd_status + consul_status=$consul_status + consulAlerts_status=$consulAlerts_status + apidemo_status=$apidemo_status + elasticsearch_status=$elasticsearch_status" 
	count=`echo "$ryftServer_status + $ryft1_odbcd_status + $consul_status + $consulAlerts_status + $apidemo_status + $elasticsearch_status" | bc` 
	echo "********************"
	echo -e "${redAttributeON}$hostname Stopping $count services${attributesOFF}"
	echo "********************"
	finalStatus=1
	if [ $count != 0 ]
		then
	
		if [ $ryftServer_error = 0 -a $stopFlag = 1 ]
		then
			ryftServer_stop
		fi
		if [ $ryft1_odbcd = "Installed" -a $ryft1_odbcd_error = 0 -a $stopFlag = 1 ]
		then
			ryft1_odbcd_stop
		fi
		if [ $consul = "Installed" -a $consul_error = 0 -a $stopFlag = 1 ]
		then
			consul_stop
		fi
		if [ $consulAlerts = "Installed" -a $consulAlerts_error = 0 -a $stopFlag = 1 ]
		then
			consulAlerts_stop
		fi
		if [ $apidemo = "Installed" -a $apidemo_error = 0 -a $stopFlag = 1 ]
		then
			apidemo_stop
		fi
		if [ $elasticsearch = "Installed" -a $elasticsearch_error = 0 -a $stopFlag = 1 ]
		then
			elasticsearch_stop
		fi
	fi
	if [ $count != 0 ]
	then
		sleep $sleepValue 
		finalStatus=0
		ryft_statusX
	fi
fi

#
# fixFlag detection
#
if [ $fixFlag = 1 ]
then
	#
	# fix case where /ryftone will not mount due to files present 
	#
	if [ $rhfs == 1 -a $filesystem_filecount != 1 -a $filesystem_error != 0 -a $rhfsd_error != 0 ] 
	then
		filesystem_filecount_fix

		sleep $sleepValue 
		finalStatus=0

		ryft_statusX
	fi

	#
	# fix by starting missing processes
	#
	count=`echo "$ryftServer_error + $ryft1_odbcd_error + $consul_error + $consulAlerts_error + $apidemo_error + $elasticsearch_error" | bc` 
	if [ $count != 0 -a $filesystem_error = 0 -a $rhfsd_error = 0 -a $ccc_mgr_error = 0 ] 
	then
		if [ $ryftServer_error != 0 ]
		then
			ryftServer_start
		fi
		if [ $ryft1_odbcd_error != 0 ]
		then
			ryft1_odbcd_start
		fi
		if [ $consul_error != 0 ]
		then
			consul_start
		fi
		if [ $consulAlerts_error != 0 ]
		then
			consulAlerts_start
		fi
		if [ $apidemo_error != 0 ]
		then
			apidemo_start
		fi
		if [ $elasticsearch_error != 0 ]
		then
			elasticsearch_start
		fi

		ryft_statusX
	fi
fi

#
# startFlag detection
#
if [ $startFlag = 1 ]
then
	echo "********************"
	#
	# requested to start problem processes
	#
	okayToStart=0
	count=`echo "$ryftServer_error + $ryft1_odbcd_error + $consul_error + $consulAlerts_error + $apidemo_error + $elasticsearch_error" | bc` 
	if [ $filesystem_error = 0 -a $rhfsd_error = 0 -a $ccc_mgr_error = 0 ] 
	then
		# should be okay to start since filesystem, rhfsd and ccc_mgr appear okay
		okayToStart=1
		echo -e "${redAttributeON}$hostname Starting $count services${attributesOFF}"
	else
		echo -e "${redAttributeON}$hostname Unable to process -start when filesystem, rhfsd, or ccc_mgr have problems${attributesOFF}"
	fi
	echo "********************"
	finalStatus=1
	if [ $okayToStart = 1 -a $count != 0 ]
	then
		if [ $ryftServer_error != 0 -a $startFlag = 1 ]
		then
			ryftServer_start
		fi
		if [ $ryft1_odbcd_error != 0 -a $startFlag = 1 ]
		then
			ryft1_odbcd_start
		fi
		if [ $consul_error != 0 -a $startFlag = 1 ]
		then
			consul_start
		fi
		if [ $consulAlerts_error != 0 -a $startFlag = 1 ]
		then
			consulAlerts_start
		fi
		if [ $apidemo_error != 0 -a $startFlag = 1 ]
		then
			apidemo_start
		fi
		if [ $elasticsearch_error != 0 -a $startFlag = 1 ]
		then
			elasticsearch_start
		fi
	fi

	if [ $okayToStart = 1 -a $count != 0 ]
	then
		sleep $sleepValue 
		finalStatus=0
		ryft_statusX
	fi

fi

cleanup

if [ $finalStatus = 1 ]
then
	if [ $status = 0 ]
	then
		#
		# OKAY
		#
		#echo -e "$hostname ryft_status " ${greenAttributeON}OKAY${attributesOFF}
		echo	
		echo -e "${greenAttributeON}$hostname ryft_status OKAY${attributesOFF}"
	else
		#
		# PROBLEMS
		#
		PROBLEMS=`[ $status = 1 ] && echo "PROBLEM" || echo "PROBLEMS"`
		#echo -e "$hostname ryft_status " "found ${redAttributeON}$status $PROBLEMS${attributesOFF}"
		echo
		echo -e "${redAttributeON}$hostname ryft_status found $status $PROBLEMS${attributesOFF}"
	fi
fi
exit $status


