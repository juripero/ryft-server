#!/bin/bash

DEBUG=0
#
# Shell script to return Ryft product versions
#
scriptVersion="02-12-2019 12:00:00"

# Set defaults
PLATFORM="Undetermined"
DISK_CFG="mdadm"
serialNo="Undetermined"
AWSCommand="wget -q -O - http://169.254.169.254/latest/meta-data"
AWSInstance="false"
versText=""
serverRev="Unknown"
ODBCVersion="Not Installed"
webApiDemoVersion="Not Installed"
Repository="Not Installed"
Firmware="Not Installed"
ryftxVersion="Not Installed"
ryftPCAPVersion="Not Installed"
ryftPCRE2Version="Not Installed"

verbose(){
    if [ "${DEBUG}" -gt 0 ]; then
        echo -e "${1}"
    fi
}

# Function: setVersText
# Purpose:  Find the old Ryft version text and set it
setVersText(){
    versText=""
    if [ -f "/usr/bin/vers" ]; then
        versText=`vers`
    elif [ -f "/home/ryftuser/bin/vers" ]; then
	versText=`sudo /home/ryftuser/bin/vers`
    fi
}

# Function: determinePlatform
# Purpose: determine what type of platform we are on
#          Ryftone - RHFS
#          Ryftone - mdadm
#          AWS - F1
#          AWS - CPU
#          Xilinx VCU1523
#          Other
# Sets: PLATFORM, DISK_CFG
#
determinePlatform(){

    test -e /dev/smca
    if [ $? == 0 ]; then 
        PLATFORM="RyftONE"
        DF=`df | grep "/dev/smca"`
        if [ "${DF}" != "" ]; then
            DISK_CFG="RHFS"
        fi
        verbose "Device is a RyftONE"
    else
        UUID_NO=`sudo cat /sys/devices/virtual/dmi/id/product_uuid`
        if [[ "${UUID_NO}" =~ ^EC2.* ]]; then
            verbose "Device is AWS Instance"
            AWSInstance="true"
            serialNo=`${AWSCommand}/instance-id`
            PLATFORM=`${AWSCommand}/instance-type`
            ryftone=0
            AMIId=`${AWSCommand}/ami-id`
            if [ "${PLATFORM:0:2}" == "f1" ]; then
                fpgaVersion=`sudo fpga-describe-local-image -S 0`
                AFIId=`echo -e ${fpgaVersion} | cut -d' ' -f3`
                AFIShell=`echo -e ${fpgaVersion} | cut -d' ' -f8`
            fi
        else
            PLATFORM=`xbsak list 2>&1`
            if [ "$?" -ne 0 ]; then
                verbose "Unknown platform"
                PLATFORM="Unknown"
            else
                PLATFORM=`echo "$PLATFORM" | grep -v "^INFO" | cut -d' ' -f2`
                serialNo="Unknown"
            fi
        fi
    fi
}
    
hostName=`hostname`
OS_TYPE=`lsb_release -d | sed -e "s/Description:[[:space:]]*\(.*\)/\1/"`

# Function: setEngineeringProducts
# Purpose:  Get the revisions of the engineering products when available
#
setEngineeringProducts() {
    if [ "${#versText}" -gt 0 ]; then
        # Pull information from the "vers" command if available and other sources if not.

        Repository=`echo -e ${versText} | sed -e "s/.*\(repository Revision: \)\([0-9]*\).*/\2/"`
        if [ ${#Repository} -gt 30 ]; then
            Repository="Not Available"
        fi

        Firmware=`echo -e ${versText} | sed -e "s/.*\(primitive firmware: \)\([_A-Za-z0-9]*\).*/\2/"`
        if [ "${AWSInstance}" == "false" ]; then
    	    serialNo=`echo -e ${versText} | sed -e "s#.*\(S/N: \)\([0-9]*\).*#\2#"`
        fi
    fi

    # If firmware version is not available on F1 instance, use ryftprim version.

    if [ "${Firmware}" == "Not Installed" -o ${#Firmware} -gt 21 ]; then
        #ryftprim is versioned by date as YYYYMMDD: 20170329
        if [ -f "/usr/bin/ryftprim" ]; then
    	    Firmware=`ryftprim --version | tr -d '\n\r' | \
                      sed -e "s/.*\(YYYYMMDD: \)\([_A-Z0-9]*\).*/\2/"`
        fi
    fi

    tmpRyftxVersion=`ryftx --version 2>/dev/null`
    if [ ${#tmpRyftxVersion} -gt 0 ]; then
        ryftxVersion=`echo -e ${tmpRyftxVersion} | \
                      sed -e "s/.*\(Systems, Inc[^_0-9]*\)\([_0-9]*\).*/\2/"`
        ryftxVersion=`echo -e ${ryftxVersion} | sed -e "s/.*\(version: \)\([_0-9]*\).*/\2/"`
        ryftxArchitecture=`echo -e ${tmpRyftxVersion} | \
                           sed -e "s/.*\(architecture: \)\([^[:space:]]*\).*/\2/"`
    fi

    tmpRyftPCAPVersion=`ryftx_pcap --version 2>/dev/null`
    if [ ${#tmpRyftPCAPVersion} -gt 0 ]; then
        ryftPCAPVersion=`echo -e ${tmpRyftPCAPVersion} | sed -e "s/.*\(version: \)\([_0-9]*\).*/\2/"`
    fi

    tmpRyftPCRE2Version=`ryftpcre2 --version 2>/dev/null`
    if [ ${#tmpRyftPCRE2Version} -gt 0 ]; then
        ryftPCRE2Version=`echo -e ${tmpRyftPCRE2Version} | sed -e "s/.*\(version: \)\([_0-9]*\).*/\2/"`
    fi
}

# Function: getLayeredProducts
# Purpose:  Get the versions of the BlackLynx layered products
#               ryft-server, ODBC, web API
# Sets:     serverRev,
# Get running ryft-server version number, but fall back to "vers" command if not running
#
getLayeredProducts(){
    
    # Figure out Ryft-Server version.  Note: curl will fail if not running.
    tempServerRev=`echo -e ${versText} | sed -e "s/.*\(ryft-server \)\([.0-9]*\).*/\2/"`
    serverRev=`curl -s http://localhost:8765/version 2>/dev/null | \
               sed -e "s/.*\(\"version\":\"\)\([^\"]*\).*/\2/"`
    if [ "${serverRev}" == "" ]; then
       serverRev="${tempServerRev}"
    fi

    # Get ODBC version

    if [ -f "/usr/local/ryft/bin/x8664/ryft1_odbcctl" ]; then
        ODBCVersion=`/usr/local/ryft/bin/x8664/ryft1_odbcctl -v`
    fi

    # Get web API version. Looking for base nginx install.  May fail for apache install.
    # lrwxrwxrwx  1 root     root       29 Apr 16 14:00 html -> /var/www/blacklynxWebUI-1.0.2

    test -d /var/www
    if [ $? == 0 ]
    then
	    tempWebApiDemoVersion=`ls -al /var/www | grep -e "html.*blacklynxWebUI" | \
		                       sed -e "s/.*blacklynxWebUI-\([0-9.]*\).*/\1/"`
    fi

    if [ "${tempWebApiDemoVersion}" != "" ]; then
        webApiDemoVersion="${tempWebApiDemoVersion}"
    fi

    # get ryft-pcap version
    ryftPcapVersion=`dpkg -l 2>/dev/null | grep ryft-pcap | \
                      sed "s/^.*ryft-pcap[[:space:]]*\([0-9.][0-9.]*\).*/\1/"`
    if [[ "${ryftPcapVersion}" =~ ^[0-9][0-9.]*$ ]]; then
        :
    else
        ryftPcapVersion=`yum list installed 2>/dev/null | grep ryft-pcap | \
                      sed "s/^.*ryft-pcap\.[^-0-9.]*\([0-9.][-0-9.]*\).*/\1/"`
        if [[ "${ryftPcapVersion}" =~ ^[0-9][-0-9.]*$ ]]; then
            :
        else
            ryftPcapVersion="Not Installed"
        fi
    fi
}


# Function: getThirdPartyProducts
# Purpose:  set the versions for 3rd party products
#           consul, Elastic Search 
#
getThirdPartyProducts(){
    cVersAlerts=`/opt/consul/bin/consul-alerts --version 2>/dev/null`
    if [ "${cVersAlerts}" == "" ]; then
        consulAlertsVersion="Not Installed"
    else
        consulAlertsVersion=`echo -e ${cVersAlerts} | sed -e "s/Consul Alerts //"`
    fi

    # For consul use version, but also return compatibility information.

    cVers=`/opt/consul/bin/consul --version 2>/dev/null`
    if [ "${cVers}" == "" ]; then
        consulVersion="Not Installed"
        cp1=""
        cp2=""
    else
        consulVersion=`echo -e ${cVers} | sed -e "s/Consul *//g;s/Protocol.*//;s/v//"`
        consulProtocol=`echo -e ${cVers} | sed -e "s/.*\(Protocol.*\)/\1/"`
        if [ ${#consulProtocol} -gt 60 ]; then
            cp1=`echo -e ${consulProtocol} | sed -e "s/\(.\{,60\}[^ ]\).*/\1/"`
            cp2=`echo -e ${consulProtocol} | sed -e "s/.\{,60\}[^ ]* \(.*\)/\1/"`
        else
            cp1="${consulProtocol}"
            cp2=""
        fi
    fi

    elasticVersion=`/opt/elasticsearch/bin/elasticsearch --version 2>/dev/null`
    if [ "${elasticVersion}" == "" ]; then
        elasticVersion=`/usr/share/elasticsearch/bin/elasticsearch --version 2>/dev/null`
    fi
    if [ "${elasticVersion}" == "" ]; then
        elasticV="Not Installed"
        ev1=""
        ev2=""
    else
        #Version: 2.4.1, Build: c67dc32/2016-09-27T18:57:55Z, JVM: 1.7.0_131
        elasticV=`echo -e ${elasticVersion} | sed -e "s/\(Version: \)\([0-9.]*\).*/\2/"`
        ev1=`echo -e ${elasticVersion} | sed -e "s/.*\(Build: [^,]*\).*/\1/"`
        ev2=`echo -e ${elasticVersion} | sed -e "s/.*\(JVM: [0-9_.]*\).*/\1/"`
    fi
}

setVersText
determinePlatform
setEngineeringProducts
getLayeredProducts
getThirdPartyProducts

echo ""
echo "ryft-versions: ${scriptVersion}"
echo "Hostname:      ${hostName}"
echo "OS Level:      ${OS_TYPE}"
echo "Platform:      ${PLATFORM}" 
echo "File System:   ${DISK_CFG}"
if [ "${AWSInstance}" == "true" ]; then
    echo "AWS Instance:  ${serialNo}"
    echo "AMI ID:        ${AMIId}"
    if [ "${PLATFORM:0:2}" == "f1" ]; then
        echo "AFI ID:        ${AFIId}  (SHELL: ${AFIShell})"
    fi
else
    echo "S/N:           ${serialNo}"
fi
echo ""
echo "Repository:    ${Repository}"
echo "Firmware:      ${Firmware}"
if [ "${ryftxVersion}" == "Not Installed" ]; then
    echo "ryftx:         ${ryftxVersion}"
else
    echo "ryftx:         ${ryftxVersion} (${ryftxArchitecture})"
fi
echo "ryftx_pcap:    ${ryftPCAPVersion}"
echo "ryftpcre2:     ${ryftPCRE2Version}"
echo ""
echo "ryft-server:   ${serverRev}"
echo "Ryft ODBC:     ${ODBCVersion}"
echo "ryft-pcap:     ${ryftPcapVersion}"
echo "Web API Demo:  ${webApiDemoVersion}"
echo ""
echo "Consul:        ${consulVersion}"
if [ ${#cp1} -gt 0 ]; then
    echo "               ${cp1}"
fi
if [ ${#cp2} -gt 0 ]; then
    echo "               ${cp2}"
fi
echo "Consul Alerts: ${consulAlertsVersion}"
echo "Elastic:       ${elasticV}"
if [ ${#ev1} -gt 0 ]; then
    echo "               ${ev1}"
fi
if [ ${#ev2} -gt 0 ]; then
    echo "               ${ev2}"
fi
echo ""

