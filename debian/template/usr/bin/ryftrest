#!/bin/bash

# print usage info
usage() {
    cat <<EOF
ryftrest is a ryftprim equivalent, it uses ryft-server as a backend.

Usage: $0 [options]

Search specific:
-h|--help          Prints this short help message.
-p|--mode=<mode>   Specifies the search mode to run, which can be one of:
                     - es for exact search (used by default)
                     - fhs for fuzzy hamming search
                     - feds for fuzzy edit distance search
                     - ds for date search
                     - ts for time search
                     - ns for numeric search
                     - cs for currency search
                     - ipv4 for IPv4 search
                     - ipv6 for IPv6 search
                     - pcre2 for PCRE2 regex search
-f|--file=<path>   Specifies an input filename.
-c|--catalog=<path> Specifies an input catalog name.
-i                 Specifies case-insensitive analysis for supported primitives.
-r|--reduce        Reduce the duplicates for FEDS (by default)
--no-reduce        Do not reduce the duplicates for FEDS
-n|--nodes=<N>     Specifies 1-4 RCAB processing nodes to use (default is 4).
-d|--fuzziness=<D> Specifies the fuzzy search distance.
-w|--width=<W>     Specifies the surrounding width.
--line             Specifies the surrounding whole line (the same as -w=line).
-e|--delimiter=<E> Specifies the delimiter used between found records.
                   For example pass Windows new line as -e $'\r\n'.
-s|-q=<query>      Specifies the search/query expression to use.
  |--query=<query>
-od|--data=<file>  Used to keep a data results file.
-oi|--index=<file> Used to keep an index results file.
-ov|--view=<file>  Used to keep a view results file. To speed up /search/show.
--lifetime=<T>     Used to automatically cleanup results files. Examples: 1h, 1m, 20s.
--backend=<X>      Used to select "ryftprim" or "ryftx" backend.
--backend-option=<opt> Additional backend option. Depends on selected --backend.

REST specific:
-a|--address=<addr> Specifies the ryft-server address.
                      "http://localhost:8765" by default.
-u|--user=<cred> Use user credentials, "username:password".
  |--auth
--search         Use /search endpoint to print all found items.
--count          Use /count endpoint instead of /search to print just statistics (default).
--dry|--dry-run  Do a "dry-run" (do not call Ryft hardware).
--limit=N        Specifies the limit on total number of records printed (used with /search).
--local          Specifies the local search. Opposite to --cluster. (default)
--cluster        Specifies the cluster search. Opposite to --local.
--format=<fmt>   Specifies format of the result records, can be:
                     - raw - base-64 encoded data, by default.
                     - xml - decode XML records
                     - json - decode JSON objects
                     - utf8 - for text search get utf-8 string
                              instead of base-64 encoded raw bytes
                     - null|none - ignores all data
--fields=<list>  Specifies comma-separated list of fields to return.
                 This parameter is useful with XML and JSON formats.
--transform=<tx> Specifies custom post-process transformation.
                 Should be one of:
                     - match("expr") - regexp to match "expr"
                     - replace("expr", "template") - regexp to replace
                     - script("name") - call an external script
                 Several transformations can be specified.
                 Can be provided multiple
--share-mode     Sharing mode. Can be "ignore", "skip" or "wait-10s".
--no-stats       Disable statistics output.
--stream         Use stream output format. Provides a sequence of JSON
                 "tag-object" pairs to be able to decode input data on the fly
                 (is used for node communication within cluster).
--performance    Add performance metrics to the output statistics.
--accept=<fmt>   Accept format can be "json" or "csv".
-b|--body        Additional request body in JSON format.

-v|--verbose     Tells curl to be verbose.
-vv|--pretty     Get pretty (properly indented) formatting with jq tool.
--drate          Reformat output to add Data Rate
--details        Reformat output to add Data Rate and details on intermediate results


Examples:

$0 -q 'Joe' -f '*.txt' -vv --search
  will search and print all 'Joe' occurences in text files.

$0 -q 'Joe' -f '*.txt' -vv --count
  will just print the number of matches and some performance numbers.

$0 -q '(RECORD.id CONTAINS "100310")' -f '*.pcrime' --format=xml --fields=ID,Date -vv
  will launch a structured search in pcrime files.
EOF
}

# print error message $1 and exit
fail() {
    echo "ERROR: $1"
    exit 1
}

# encode with URL escaping
urlencode() {
  local LANG=C
  local ch i N="${#1}"
  for (( i = 0; i < N; i++ )); do
    ch="${1:i:1}"
    case "$ch" in
      [a-zA-Z0-9.~_-]) printf "$ch" ;;
      *) printf '%%%02X' "'$ch" ;;
    esac
  done
}

# default values
MODE=
FILES=()
CATALOGS=()
CASE="true"
REDUCE=true
NODES=
FUZZINESS=
SURROUNDING=
DELIMITER=$'\r\n'
TRANSFORMS=()
SHARE_MODE=
QUERY=
DATA=
INDEX=
VIEW=
LIFETIME=
BACKEND=
BACKEND_OPTS=()

ADDRESS=http://localhost:8765
AUTH_USER=
ENDPOINT=/count
DRYRUN=
LIMIT=
LOCAL=true
FORMAT=
FIELDS=
STATS=true
STREAM=
SPARK=
PERFORMANCE=
ACCEPT=json
BODY=

# be silent by default

VERBOSE=-s
PRETTY=
ADD_DRATE=
ADD_DETAILS=
HIDE_HOSTNAME=true
JQ_STR=

# parse options
while [[ $# > 0 ]]; do
    case "$1" in
    -p=*|--mode=*)
        MODE="${1#*=}"
        shift
        ;;
    -p|--mode)
        MODE="$2"
        shift 2
        ;;
    -f=*|--file=*)
        FILES=("${FILES[@]}" "${1#*=}")
        shift
        ;;
    -f|--file)
        FILES=("${FILES[@]}" "$2")
        shift 2
        ;;
    -c=*|--catalog=*)
        CATALOGS=("${CATALOGS[@]}" "${1#*=}")
        shift
        ;;
    -c|--catalog)
        CATALOGS=("${CATALOGS[@]}" "$2")
        shift 2
        ;;
    -i)
        CASE="false"
        shift
        ;;
    -r|--reduce)
        REDUCE="true"
        shift
        ;;
    --no-reduce)
        REDUCE="false"
        shift
        ;;
    -n=*|--nodes=*)
        NODES="${1#*=}"
        shift
        ;;
    -n|--nodes)
        NODES="$2"
        shift 2
        ;;
    -d=*|--fuzziness=*)
        FUZZINESS="${1#*=}"
        shift
        ;;
    -d|--fuzziness)
        FUZZINESS="$2"
        shift 2
        ;;
    -w=*|--width=*)
        SURROUNDING="${1#*=}"
        shift
        ;;
    -w|--width)
        SURROUNDING="$2"
        shift 2
        ;;
    --line)
        SURROUNDING="line"
        shift
        ;;
    -e=*|--delimiter=*)
        DELIMITER="${1#*=}"
        shift
        ;;
    -e|--delimiter)
        DELIMITER="$2"
        shift 2
        ;;
    -s=*|-q=*|--query=*)
        QUERY="${1#*=}"
        shift
        ;;
    -s|-q|--query)
        QUERY="$2"
        shift 2
        ;;
    -od=*|--data=*)
        DATA="${1#*=}"
        shift
        ;;
    -od|--data)
        DATA="$2"
        shift 2
        ;;
    -oi=*|--index=*)
        INDEX="${1#*=}"
        shift
        ;;
    -oi|--index)
        INDEX="$2"
        shift 2
        ;;
    -ov=*|--view=*)
        VIEW="${1#*=}"
        shift
        ;;
    -ov|--view)
        VIEW="$2"
        shift 2
        ;;
    --lifetime=*)
        LIFETIME="${1#*=}"
        shift
        ;;
    --lifetime)
        LIFETIME="$2"
        shift 2
        ;;
    --backend=*)
        BACKEND="${1#*=}"
        shift
        ;;
    --backend)
        BACKEND="$2"
        shift 2
        ;;
    --backend-option=*|--backend-opt=*)
        BACKEND_OPTS=("${BACKEND_OPTS[@]}" "${1#*=}")
        shift
        ;;
    --backend-option|--backend-opt)
        BACKEND_OPTS=("${BACKEND_OPTS[@]}" "$2")
        shift 2
        ;;
    -a=*|--address=*)
        ADDRESS="${1#*=}"
        shift
        ;;
    -a|--address)
        ADDRESS="$2"
        shift 2
        ;;
    -u=*|--user=*|--auth=*)
        AUTH_USER="${1#*=}"
        shift
        ;;
    -u|--user|--auth)
        AUTH_USER="$2"
        shift 2
        ;;
    --search)
        ENDPOINT="/search"
        shift
        ;;
    --count)
        ENDPOINT="/count"
        shift
        ;;
    --dry-run|--dry)
        DRYRUN="/dry-run"
        shift
        ;;
    --limit=*)
        LIMIT="${1#*=}"
        shift
        ;;
    --limit)
        LIMIT="$2"
        shift 2
        ;;
    --local)
        LOCAL="true"
        shift
        ;;
    --cluster)
        LOCAL="false"
        HIDE_HOSTNAME=
        shift
        ;;
    --format=*)
        FORMAT="${1#*=}"
        shift
        ;;
    --format)
        FORMAT="$2"
        shift 2
        ;;
    --fields=*)
        FIELDS="${1#*=}"
        shift
        ;;
    --fields)
        FIELDS="$2"
        shift 2
        ;;
    --transform=*)
        TRANSFORMS=("${TRANSFORMS[@]}" "${1#*=}")
        shift
        ;;
    --transform)
        TRANSFORMS=("${TRANSFORMS[@]}" "$2")
        shift 2
        ;;
    --share-mode=*)
        SHARE_MODE="${1#*=}"
        shift
        ;;
    --share-mode)
        SHARE_MODE="$2"
        shift 2
        ;;
    --no-stats)
        STATS="false"
        shift
        ;;
    --stream)
        STREAM="true"
        shift
        ;;
    --spark)
        SPARK="true"
        shift
        ;;
    --performance)
        PERFORMANCE="true"
        shift
        ;;
    --accept=*)
        ACCEPT="${1#*=}"
        shift
        ;;
    --accept)
        ACCEPT="$2"
        shift 2
        ;;
    -b=*|--body=*)
        BODY="${1#*=}"
        shift
        ;;
    -b|--body)
        BODY="$2"
        shift 2
        ;;
    -vvv)
        VERBOSE="-s" # tell curl to be silent
        PRETTY=simple
        JQ_STR="."
        shift
        ;;
    -vv|--pretty)
        VERBOSE="-s" # tell curl to be silent
        PRETTY=true
        shift
        ;;
    -v|--verbose)
        VERBOSE="-v"
        PRETTY=""
        shift
        ;;
    --drate)
        VERBOSE="-s"
        PRETTY=true
        ADD_DRATE=true
        shift
        ;;
    --details)
        VERBOSE="-s" # tell curl to be silent
        PRETTY=true
        ADD_DETAILS=true
        shift
        ;;
    -h|--help)
        usage
        exit 0
        ;;
    *) # unknown option
        fail "'$1' is unknown option, run '$0 --help' for help"
        ;;
    esac
done

case "$ACCEPT" in
    csv)
        ACCEPT="Accept: text/csv"
        ;;
    json)
        ACCEPT="Accept: application/json"
        ;;
    msgpack)
        ACCEPT="Accept: application/msgpack"
        ;;
    *)
        fail "'$ACCEPT' is unknown accept mode, run '$0 --help' for help"
esac

[[ -z "$QUERY" && -z "$BODY" ]] && fail "no search query provided, run '$0 --help' for help"
[[ -z "${FILES[@]}" && -z "${CATALOGS[@]}" && -z "$BODY" ]] && fail "no file or catalog provided, run '$0 --help' for help"

# build the URL
CURL_OPTS=(--compressed)
URL_QUERY=(local=$(urlencode "$LOCAL"))
[[ ! -z "$AUTH_USER" ]] && CURL_OPTS=("${CURL_OPTS[@]}" -u "$AUTH_USER")
[[ ! -z "$QUERY" ]] && URL_QUERY=("${URL_QUERY[@]}" query=$(urlencode "$QUERY"))
for file in "${FILES[@]}"; do
    [[ ! -z "$file" ]] && URL_QUERY=("${URL_QUERY[@]}" file=$(urlencode "$file"))
done
for catalog in "${CATALOGS[@]}"; do
    [[ ! -z "$catalog" ]] && URL_QUERY=("${URL_QUERY[@]}" catalog=$(urlencode "$catalog"))
done
[[ ! -z "$CASE" ]] && URL_QUERY=("${URL_QUERY[@]}" cs=$(urlencode "$CASE"))
[[ ! -z "$REDUCE" ]] && URL_QUERY=("${URL_QUERY[@]}" reduce=$(urlencode "$REDUCE"))
[[ ! -z "$NODES" ]] && URL_QUERY=("${URL_QUERY[@]}" nodes=$(urlencode "$NODES"))
[[ ! -z "$FUZZINESS" ]] && URL_QUERY=("${URL_QUERY[@]}" fuzziness=$(urlencode "$FUZZINESS"))
[[ ! -z "$SURROUNDING" ]] && URL_QUERY=("${URL_QUERY[@]}" surrounding=$(urlencode "$SURROUNDING"))
[[ ! -z "$DELIMITER" ]] && URL_QUERY=("${URL_QUERY[@]}" delimiter=$(urlencode "$DELIMITER"))
[[ ! -z "$MODE" ]] && URL_QUERY=("${URL_QUERY[@]}" mode=$(urlencode "$MODE"))
[[ ! -z "$LIMIT" ]] && URL_QUERY=("${URL_QUERY[@]}" limit=$(urlencode "$LIMIT"))
[[ ! -z "$DATA" ]] && URL_QUERY=("${URL_QUERY[@]}" data=$(urlencode "$DATA"))
[[ ! -z "$INDEX" ]] && URL_QUERY=("${URL_QUERY[@]}" index=$(urlencode "$INDEX"))
[[ ! -z "$VIEW" ]] && URL_QUERY=("${URL_QUERY[@]}" view=$(urlencode "$VIEW"))
[[ ! -z "$LIFETIME" ]] && URL_QUERY=("${URL_QUERY[@]}" lifetime=$(urlencode "$LIFETIME"))
[[ ! -z "$BACKEND" ]] && URL_QUERY=("${URL_QUERY[@]}" backend=$(urlencode "$BACKEND"))
for opt in "${BACKEND_OPTS[@]}"; do
    [[ ! -z "$opt" ]] && URL_QUERY=("${URL_QUERY[@]}" backend-option=$(urlencode "$opt"))
done
[[ ! -z "$FORMAT" ]] && URL_QUERY=("${URL_QUERY[@]}" format=$(urlencode "$FORMAT"))
[[ ! -z "$FIELDS" ]] && URL_QUERY=("${URL_QUERY[@]}" fields=$(urlencode "$FIELDS"))
for tx in "${TRANSFORMS[@]}"; do
    [[ ! -z "$tx" ]] && URL_QUERY=("${URL_QUERY[@]}" transform=$(urlencode "$tx"))
done
[[ ! -z "$SHARE_MODE" ]] && URL_QUERY=("${URL_QUERY[@]}" share-mode=$(urlencode "$SHARE_MODE"))
[[ ! -z "$STATS" ]] && URL_QUERY=("${URL_QUERY[@]}" stats=$(urlencode "$STATS"))
[[ ! -z "$STREAM" ]] && URL_QUERY=("${URL_QUERY[@]}" stream=$(urlencode "$STREAM"))
[[ ! -z "$SPARK" ]] && URL_QUERY=("${URL_QUERY[@]}" spark=$(urlencode "$SPARK"))
[[ ! -z "$PERFORMANCE" ]] && URL_QUERY=("${URL_QUERY[@]}" performance=$(urlencode "$PERFORMANCE"))
[[ ! -z "$BODY" ]] && CURL_OPTS=("${CURL_OPTS[@]}" --data-binary "$BODY")

# check dependencies
[[ -z `which curl` ]] && fail "no curl found, run 'apt-get install curl' to install it"
[[ ! -z "$PRETTY" ]] && [[ -z `which jq` ]] && fail "no jq found, run 'apt-get install jq' to install it"

if [[ "$PRETTY" = "true" ]]; then
# setup jq filter based on user inputs
# check for query error; if local, remove hosts; if not dataRate, remove data rate; and normalize measurements
# Build up the filtering string

#
# individual pieces jq formatting to add units of measurment for demo displays
#
UNITS1=' if .duration >= 1000 then
             {"Duration(sec)         ": ((.duration / 1000)|.*10+0.5|floor|./10)}
        else {"Duration(msec)        ": .duration}
        end
        + if .totalBytes >= 1099511627776 then
             {"Total Bytes(TB)       ": ((.totalBytes / 1024 / 1024 / 1024 / 1024)|.*100+0.005|floor|./100)}
        elif .totalBytes >= 1073741824 then
             {"Total Bytes(GB)       ": ((.totalBytes / 1024 / 1024 / 1024)|.*100+0.005|floor|./100)}
        elif .totalBytes >= 1048576 then
             {"Total Bytes(MB)       ": ((.totalBytes / 1024 / 1024)|.*100+0.005|floor|./100)}
        elif .totalBytes >= 1024 then
             {"Total Bytes(KB)       ": ((.totalBytes / 1024)|.*100+0.005|floor|./100)}
        else {"Total Bytes           ": .totalBytes}
        end'

UNITS_DR=' + if .dataRate >= 1024 then
             {"Data Rate(GB/s)       ": ((.dataRate / 1024)|.*100+0.005|floor|./100)}
        elif .dataRate < 0.001 then
             {"Data Rate(KB/s)       ": ((.dataRate * 1024)|.*100+0.005|floor|./100)}
        else {"Data Rate(MB/s)       ": (.dataRate |.*100+0.005|floor|./100)}
        end'

UNITS2=' + {"Matches               ": .matches}
        + if .fabricDataRate >= 1024 then
             {"Fabric Data Rate(GB/s)": ((.fabricDataRate / 1024)|.*100+0.005|floor|./100)}
        elif .fabricDataRate < 0.001 then
             {"Fabric Data Rate(KB/s)": ((.fabricDataRate * 1024)|.*100+0.005|floor|./100)}
        else {"Fabric Data Rate(MB/s)": .fabricDataRate}
        end
        + if .fabricDuration >= 1000 then
             {"Fabric Duration(sec)  ": ((.fabricDuration / 1000)|.*100+0.005|floor|./100)}
        else {"Fabric Duration(msec) ": .fabricDuration}
        end'

UNITS_H=' + {"Host                  ": .host}'

    JQ_STR=". | .message // ( .stats | ${UNITS1} ${UNITS_DR} ${UNITS2} ${UNITS_H} + {details}"
    if [[ ! -z "$HIDE_HOSTNAME" ]]; then
        JQ_STR="$JQ_STR | del(.[\"Host                  \"])"
    fi
    if [[ -z "$ADD_DRATE" ]]; then
        JQ_STR="$JQ_STR | del(.[\"Data Rate(GB/s)       \"],.[\"Data Rate(MB/s)       \"],.[\"Data Rate(KB/s)       \"])"
        JQ_STR="$JQ_STR | del(.[\"Fabric Data Rate(GB/s)\"],.[\"Fabric Data Rate(MB/s)\"],.[\"Fabric Data Rate(KB/s)\"])"
    fi
    if [[ -z "$ADD_DETAILS" ]]; then
        JQ_STR="$JQ_STR | del(.details)"
    fi
    JQ_STR="$JQ_STR )"
fi

# for "dry-run" always use jq .
if [[ ! -z "$DRYRUN" ]]; then
    PRETTY=simple
    JQ_STR="."
fi

# do the search and print error/results
if [[ -z "$PRETTY" ]]; then
    # Flat output for feeding into other processes
    curl $VERBOSE "${CURL_OPTS[@]}" -H "$ACCEPT" "$ADDRESS$ENDPOINT$DRYRUN?$(IFS='&' ; echo "${URL_QUERY[*]}")"
else
    # Prettified output without data rate or details
    curl $VERBOSE "${CURL_OPTS[@]}" -H "$ACCEPT" "$ADDRESS$ENDPOINT$DRYRUN?$(IFS='&' ; echo "${URL_QUERY[*]}")" | jq "$JQ_STR"
fi
