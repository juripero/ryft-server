{
  "swagger": "2.0",
  "info": {
    "description": "This is a REST API for the RyftOne Server and Cluster. It provides methods to list files and folders stored on server or cluster and execute search and count requests. Both RAW_TEXT and RECORD searches supported. Please explore API below for details and examples.",
    "title": "RyftOne REST API",
    "version": "0.14.0"
  },
  "paths": {
    "/search": {
      "get": {
        "operationId": "search",
        "description": "Endpoint for the search. Does the text or structured search.",
        "summary": "Text or structured search",
        "tags": [ "search" ],
        "produces": [ "application/json", "text/csv" ],
        "parameters": [
          { "$ref": "#/parameters/SearchQuery" },
          { "$ref": "#/parameters/SearchFile" },
          { "$ref": "#/parameters/IgnoreMissingFiles" },
          { "$ref": "#/parameters/SearchMode" },
          { "$ref": "#/parameters/Surrounding" },
          { "$ref": "#/parameters/Fuzziness" },
          { "$ref": "#/parameters/SearchFormat" },
          { "$ref": "#/parameters/SearchCase" },
          { "$ref": "#/parameters/SearchReduce" },
          { "$ref": "#/parameters/SearchFields" },
          { "$ref": "#/parameters/SearchBackend" },
          { "$ref": "#/parameters/SearchBackendMode" },
          { "$ref": "#/parameters/SearchBackendOption" },
          { "$ref": "#/parameters/SaveData" },
          { "$ref": "#/parameters/SaveIndex" },
          { "$ref": "#/parameters/SaveView" },
          { "$ref": "#/parameters/Delimiter" },
          { "$ref": "#/parameters/Lifetime" },
          { "$ref": "#/parameters/ReadShareMode" },
          { "$ref": "#/parameters/SearchNodes" },
          { "$ref": "#/parameters/Local" },
          { "$ref": "#/parameters/SearchStat" },
          { "$ref": "#/parameters/Performance" },
          { "$ref": "#/parameters/SearchLimit" },
          { "$ref": "#/parameters/Transform" }
        ],
        "responses": {
          "200": {
            "description": "Search result contains all found records and search statistics.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "post": {
        "description": "Does the text or structured search. The same as `GET /search` but uses JSON object in request's body to specify search parameters.",
        "tags": [ "search" ],
        "produces": [ "application/json", "text/csv" ],
        "summary": "Text or structured search",
        "operationId": "searchPost",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": { "$ref": "#/definitions/SearchRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Search result contains all found records and search statistics.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/count": {
      "get": {
        "description": "Endpoint for the count. Does the search but returns just statistics.",
        "tags": [ "search" ],
        "summary": "Count the number of matches",
        "operationId": "count",
        "produces": [ "application/json", "text/csv" ],
        "parameters": [
          { "$ref": "#/parameters/SearchQuery" },
          { "$ref": "#/parameters/SearchFile" },
          { "$ref": "#/parameters/IgnoreMissingFiles" },
          { "$ref": "#/parameters/SearchMode" },
          { "$ref": "#/parameters/Surrounding" },
          { "$ref": "#/parameters/Fuzziness" },
          { "$ref": "#/parameters/SearchCase" },
          { "$ref": "#/parameters/SearchReduce" },
          { "$ref": "#/parameters/SearchBackend" },
          { "$ref": "#/parameters/SearchBackendMode" },
          { "$ref": "#/parameters/SearchBackendOption" },
          { "$ref": "#/parameters/SaveData" },
          { "$ref": "#/parameters/SaveIndex" },
          { "$ref": "#/parameters/SaveView" },
          { "$ref": "#/parameters/Delimiter" },
          { "$ref": "#/parameters/Lifetime" },
          { "$ref": "#/parameters/ReadShareMode" },
          { "$ref": "#/parameters/SearchNodes" },
          { "$ref": "#/parameters/Local" },
          { "$ref": "#/parameters/Performance" }
        ],
        "responses": {
          "200": {
            "description": "Search result contains search statistics only.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "post": {
        "description": "Does the search but returns just statistics. The same as `GET /count` but uses JSON object in request's body to specify search parameters.",
        "tags": [ "search" ],
        "summary": "Count the number of matches",
        "operationId": "countPost",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": { "$ref": "#/definitions/CountRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Search result contains search statistics only.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/search/show": {
      "get": {
        "description": "Endpoint to access search results. Reads already existing search results.",
        "tags": [ "search" ],
        "produces": [ "application/json", "text/csv" ],
        "summary": "Read the search results",
        "operationId": "searchShow",
        "parameters": [
          { "$ref": "#/parameters/ShowOffset" },
          { "$ref": "#/parameters/ShowCount" },
          { "$ref": "#/parameters/SearchFormat" },
          { "$ref": "#/parameters/SearchFields" },
          { "$ref": "#/parameters/UseSession" },
          { "$ref": "#/parameters/UseData" },
          { "$ref": "#/parameters/UseIndex" },
          { "$ref": "#/parameters/UseView" },
          { "$ref": "#/parameters/Delimiter" },
          { "$ref": "#/parameters/Local" },
          { "$ref": "#/parameters/Performance" }
        ],
        "responses": {
          "200": {
            "description": "Search result contains all requested records.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/search/aggs": {
      "post": {
        "description": "Endpoint to calculate aggregations on search results (Should be prepared with `/search` or `/count`).",
        "tags": [ "search" ],
        "produces": [ "application/json", "text/csv" ],
        "summary": "Calculate aggregations on search results",
        "operationId": "searchAggsPost",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": { "$ref": "#/definitions/AggregationRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Search result contains all calculated aggregations.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/run": {
      "get": {
        "tags": [ "misc" ],
        "summary": "Run custom command on server side",
        "description": "Endpoint to run custom command on server side. Is used for custom post-processing.",
        "operationId": "run",
        "parameters": [
          {
            "name": "image",
            "type": "string",
            "description": "The Docker image to run command in.",
            "required": false,
            "in": "query"
          },
          {
            "name": "command",
            "type": "string",
            "description": "Command or script to run.",
            "required": false,
            "in": "query"
          },
          {
            "in": "query",
            "type": "array",
            "items": { "type": "string" },
            "name": "arg",
            "description": "Set of arguments.",
            "collectionFormat": "multi",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "STDOUT and STDERR combined output of the command",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/rename": {
      "put": {
        "tags": [ "files" ],
        "summary": "Rename file or directory",
        "description": "Endpoint for the file/directory renaming. Catalogs are also supported.",
        "operationId": "renameFile",
        "parameters": [
          { "$ref": "#/parameters/FilePath" },
          { "$ref": "#/parameters/DirPath" },
          { "$ref": "#/parameters/CatalogPath" },
          {
            "name": "new",
            "type": "string",
            "description": "The new name for a file/directory/catalog or file inside catalog.",
            "required": true,
            "in": "query"
          },
          { "$ref": "#/parameters/Local" }
        ],
        "responses": {
          "200": {
            "description": "Rename status for each item.",
            "schema": { "$ref": "#/definitions/RenameResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/file": {
      "get": {
        "tags": [ "files" ],
        "summary": "Download a file",
        "description": "Endpoint to download a file",
        "operationId": "getFile",
        "parameters": [
          { "$ref": "#/parameters/DirPath" },
          { "$ref": "#/parameters/CatalogPath" },
          { "$ref": "#/parameters/FilePath" },
          { "$ref": "#/parameters/Local" }
        ],
        "responses": {
          "200": {
            "description": "File content",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "post": {
        "tags": [ "files" ],
        "summary": "Upload a file",
        "description": "Endpoint to upload a file.",
        "operationId": "postFile",
        "consumes": [ "multipart/form-data" ],
        "parameters": [
          {
            "in": "formData",
            "name": "content",
            "type": "file",
            "description": "File content to upload",
            "required": true
          },
          { "$ref": "#/parameters/NewFilePath" },
          { "$ref": "#/parameters/CatalogPath" },
          { "$ref": "#/parameters/FileDelimiter" },
          { "$ref": "#/parameters/FileOffset" },
          { "$ref": "#/parameters/FileLength" },
          { "$ref": "#/parameters/FileLifetime" },
          { "$ref": "#/parameters/WriteShareMode" },
          { "$ref": "#/parameters/Local" }
        ],
        "responses": {
          "200": {
            "description": "Status of files uploaded.",
            "schema": { "$ref": "#/definitions/PostFileResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [ "files" ],
        "summary": "List a directory or catalog content",
        "description": "Endpoint to query node/cluster file system structure",
        "operationId": "getFiles",
        "parameters": [
          { "$ref": "#/parameters/DirPath" },
          { "$ref": "#/parameters/CatalogPath" },
          {
            "name": "hidden",
            "type": "boolean",
            "description": "Report hidden files",
            "in": "query"
          },
          { "$ref": "#/parameters/Local" }
        ],
        "responses": {
          "200": {
            "description": "List of files and directories for node/cluster",
            "schema": { "$ref": "#/definitions/GetFilesResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "delete": {
        "tags": [ "files" ],
        "summary": "Delete file or directory",
        "description": "Endpoint to delete node's directories and files",
        "operationId": "deleteFiles",
        "parameters": [
          {
            "name": "dir",
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi",
            "description": "The directory path to delete. Wildcards are supported.",
            "in": "query"
          },
          {
            "name": "file",
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi",
            "description": "The file path to delete. Wildcards are supported.",
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi",
            "description": "The catalog path to delete. Wildcards are supported.",
            "in": "query"
          },
          { "$ref": "#/parameters/Local" }
        ],
        "responses": {
          "200": {
            "description": "Status of files and directories deleted.",
            "schema": { "$ref": "#/definitions/DeleteFilesResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/raw": {
      "post": {
        "tags": [ "files" ],
        "summary": "Upload a RAW octet stream",
        "description": "Endpoint to upload RAW octet stream",
        "operationId": "postRawFile",
        "consumes": [ "application/octet-stream" ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "schema": {
              "type": "string",
              "format": "byte"
            },
            "description": "Byte content to upload",
            "required": true
          },
          { "$ref": "#/parameters/NewFilePath" },
          { "$ref": "#/parameters/CatalogPath" },
          { "$ref": "#/parameters/FileDelimiter" },
          { "$ref": "#/parameters/FileOffset" },
          { "$ref": "#/parameters/FileLength" },
          { "$ref": "#/parameters/FileLifetime" },
          { "$ref": "#/parameters/WriteShareMode" },
          { "$ref": "#/parameters/Local" }
        ],
        "responses": {
          "200": {
            "description": "Status of files uploaded.",
            "schema": { "$ref": "#/definitions/PostFileResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [ "misc" ],
        "summary": "Get server's version.",
        "description": "This endpoint reports the version of the REST service.",
        "operationId": "version",
        "security": [],
        "responses": {
          "200": {
            "description": "REST service version.",
            "schema": { "$ref": "#/definitions/Version" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [ "login" ],
        "summary": "Authentication",
        "description": "Endpoint to authenticate an user",
        "operationId": "login",
        "security": [],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "description": "User's credentials",
            "required": true,
            "schema": { "$ref": "#/definitions/Credentials" }
          }
        ],
        "responses": {
          "200": {
            "description": "JWT",
            "schema": { "$ref": "#/definitions/JwtToken" }
          },
          "404": {
            "description": "Authentication is disabled.",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        },
        "security": []
      }
    },
    "/token/refresh": {
      "get": {
        "tags": [ "login" ],
        "summary": "Refresh authentication",
        "description": "Endpoint to refresh existing authentication token",
        "operationId": "token_refresh",
        "security": [ {"jwt":[]} ],
        "responses": {
          "200": {
            "description": "JWT",
            "schema": { "$ref": "#/definitions/JwtToken" }
          },
          "404": {
            "description": "Authentication is disabled.",
            "schema": { "$ref": "#/definitions/Error" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": [ "users" ],
        "summary": "Get users",
        "description": "Get users and its properties.",
        "operationId": "getUsers",
        "parameters": [
          { "$ref": "#/parameters/UserNames" }
        ],
        "responses": {
          "200": {
            "description": "List of requested users",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/UserInfo" }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "post": {
        "tags": [ "users" ],
        "summary": "Create new",
        "description": "Create new user.",
        "operationId": "createUser",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User's properties",
            "required": true,
            "schema": { "$ref": "#/definitions/UserInfo" }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Created user",
            "schema": { "$ref": "#/definitions/UserInfo" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      },
      "put": {
        "tags": [ "users" ],
        "summary": "Change user",
        "description": "Change user properties.",
        "operationId": "changeUser",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User's properties",
            "required": true,
            "schema": { "$ref": "#/definitions/UserInfo" }
          }
        ],
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Updated user",
            "schema": { "$ref": "#/definitions/UserInfo" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }

      },
      "delete": {
        "tags": [ "users" ],
        "summary": "Delete users",
        "description": "Delete users.",
        "operationId": "deleteUsers",
        "parameters": [
          { "$ref": "#/parameters/UserNames" }
        ],
        "responses": {
          "200": {
            "description": "List of deleted users",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/UserInfo" }
            }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/Error" }
          }
        }
      }
    }
  },
  "parameters": {
    "SearchQuery": {
      "in": "query",
      "name": "query",
      "type": "string",
      "description": "What to search. Could be simple pain text like `hello` or Ryft search query like `(RECORD.body CONTAINS \"night\")`.",
      "required": true
    },
    "SearchFile": {
      "in": "query",
      "name": "file",
      "type": "array",
      "items": { "type": "string" },
      "description": "Set of files or catalogs to search. The path should be designated relative to `/ryftone`. Wildcards are supported, for example: `*.txt`",
      "collectionFormat": "multi",
      "required": true
    },
    "IgnoreMissingFiles": {
      "in": "query",
      "name": "ignore-missing-files",
      "type": "boolean",
      "description": "If `true` report empty statistics instead of error."
    },
    "SearchMode": {
      "in": "query",
      "name": "mode",
      "type": "string",
      "description": "Search mode. Could be one of:\n- `es` - exact search\n- `fhs` - fuzzy hamming search\n- `feds` - fuzzy edit distance search\n- `ds` - date search\n- `ts` - time search\n- `ns` - numeric search\n- `cs` - currency search\n- `ipv4` - IPv4 search\n- `ipv6` - IPv6 search\n- `pcre2` - RegExp search",
      "enum": [ "es", "fhs", "feds", "ds", "ts", "ns", "cs", "ipv4", "ipv6", "pcre2" ]
    },
    "Surrounding": {
      "in": "query",
      "name": "surrounding",
      "type": "string",
      "description": "Number of characters before the match and after the match that will be returned. Can be `line` to get whole line. This parameter is used with RAW text search."
    },
    "Fuzziness": {
      "in": "query",
      "name": "fuzziness",
      "type": "integer",
      "format": "uint8",
      "maximum": 255,
      "minimum": 0,
      "description": "Fuzziness of the search. Measured as the maximum Hamming distance for `fhs` mode or edit distance for `feds` mode."
    },
    "SearchFormat": {
      "in": "query",
      "name": "format",
      "type": "string",
      "description": "Input data format. Parameter is used with structured or RAW text search.",
      "enum": [ "raw", "xml", "json", "utf8", "null" ]
    },
    "SearchCase": {
      "in": "query",
      "name": "cs",
      "type": "boolean",
      "default": true,
      "description": "Case sensitivity flag."
    },
    "SearchReduce": {
      "in": "query",
      "name": "reduce",
      "type": "boolean",
      "default": true,
      "description": "Reduce flag for fuzzy edit distance search."
    },
    "SearchFields": {
      "in": "query",
      "name": "fields",
      "type": "string",
      "description": "Coma-separated list of requested fields. If omitted all fields are used. Parameter is used with structured search to minimize output."
    },
    "SearchBackend": {
      "in": "query",
      "name": "backend",
      "type": "string",
      "description": "Optional backend tool to run search.",
      "enum": [ "ryftprim", "ryftx", "ryftpcre2" ]
    },
    "SearchBackendMode": {
      "in": "query",
      "type": "string",
      "name": "backend-mode",
      "description": "Backend mode (default, high-performance, etc)."
    },
    "SearchBackendOption":{
      "in": "query",
      "type": "array",
      "name": "backend-option",
      "description": "Optional list of backend options",
      "items": { "type": "string" },
      "collectionFormat": "multi"
    },
    "UseSession": {
      "in": "query",
      "name": "session",
      "type": "string",
      "description": "Session token to access search results. Can be used to specify DATA,INDEX,VIEW files and delimiter instead of corresponding parameters."
    },
    "SaveData": {
      "in": "query",
      "name": "data",
      "type": "string",
      "description": "Name of DATA file to keep. `{{random}}` keyword is replaced with unique number. **WARNING**: file will be overriden!"
    },
    "UseData": {
      "in": "query",
      "name": "data",
      "type": "string",
      "description": "Name of DATA file to read."
    },
    "SaveIndex": {
      "in": "query",
      "name": "index",
      "type": "string",
      "description": "Name of INDEX file to keep. `{{random}}` keyword is replaced with unique number. **WARNING**: file will be overriden!"
    },
    "UseIndex": {
      "in": "query",
      "name": "index",
      "type": "string",
      "description": "Name of INDEX file to read."
    },
    "SaveView": {
      "in": "query",
      "name": "view",
      "type": "string",
      "description": "Name of VIEW file (cache to access DATA&INDEX) to produce. `{{random}}` keyword is replaced with unique number. **WARNING**: file will be overriden!"
    },
    "UseView": {
      "in": "query",
      "name": "view",
      "type": "string",
      "description": "Name of VIEW file to read."
    },
    "Delimiter": {
      "in": "query",
      "name": "delimiter",
      "type": "string",
      "description": "The delimiter is used to place between records in DATA file."
    },
    "Lifetime": {
      "in": "query",
      "name": "lifetime",
      "type": "string",
      "description": "The output files lifetime (DATA, INDEX, VIEW), for example `2h`."
    },
    "ReadShareMode": {
      "in": "query",
      "name": "share-mode",
      "type": "string",
      "description": "Sharing mode used to access data files. Can be `wait-10s`, `skip` or `ignore`. By default `wait-0s` is used."
    },
    "WriteShareMode": {
      "in": "query",
      "name": "share-mode",
      "type": "string",
      "description": "Sharing mode used to write data files. Can be `wait-10s`, `ignore`. By default `wait-0s` is used."
    },
    "SearchNodes": {
      "in": "query",
      "name": "nodes",
      "type": "integer",
      "format": "uint8",
      "maximum": 4,
      "minimum": 0,
      "description": "Specifies 1-4 RCAB processing nodes to use. If omitted all nodes are used.",
      "enum": [ 1, 2, 3, 4 ]
    },
    "Local": {
      "in": "query",
      "name": "local",
      "type": "boolean",
      "default": false,
      "description": "Perform search only on this cluster node."
    },
    "SearchStat": {
      "in": "query",
      "name": "stats",
      "type": "boolean",
      "default": false,
      "description": "Include search statistics in response."
    },
    "Performance": {
      "in": "query",
      "name": "performance",
      "type": "boolean",
      "default": false,
      "description": "Include performance metrics in response."
    },
    "SearchLimit": {
      "in": "query",
      "name": "limit",
      "type": "integer",
      "format": "uint64",
      "description": "Limit the total number of records reported."
    },
    "ShowOffset": {
      "in": "query",
      "name": "offset",
      "type": "integer",
      "format": "uint64",
      "description": "Offset of first record to report."
    },
    "ShowCount": {
      "in": "query",
      "name": "count",
      "type": "integer",
      "format": "uint64",
      "description": "Total number of records to report."
    },
    "Transform": {
      "in": "query",
      "name": "transform",
      "type": "array",
      "items": { "type": "string" },
      "collectionFormat": "multi",
      "description": "Additional data transformation. Could be:\n- `match(\"^.*$\")` to match text,\n- `replace(\"^(.*)apple(.*)$\", \"$1orange$2\")` to replace text,\n- `script(\"filter_position\")` to run custom script"
    },
    "FilePath": {
      "in": "query",
      "name": "file",
      "type": "string",
      "description": "The path to a file."
    },
    "NewFilePath": {
      "in": "query",
      "name": "file",
      "type": "string",
      "description": "The path to an uploading file. Use `{{random}}` for random names.",
      "required": true
    },
    "DirPath": {
      "in": "query",
      "name": "dir",
      "type": "string",
      "description": "The path to a directory."
    },
    "CatalogPath": {
      "in": "query",
      "name": "catalog",
      "type": "string",
      "description": "The path to a catalog."
    },
    "FileDelimiter": {
      "in": "query",
      "name": "delimiter",
      "type": "string",
      "description": "The delimiter is used between file parts in catalog."
    },
    "FileOffset": {
      "in": "query",
      "name": "offset",
      "type": "integer",
      "format": "int64",
      "description": "The optional file part offset."
    },
    "FileLength": {
      "in": "query",
      "name": "length",
      "type": "integer",
      "format": "int64",
      "description": "The optional file part length."
    },
    "FileLifetime": {
      "in": "query",
      "type": "string",
      "name": "lifetime",
      "description": "The file or catalog lifetime, for example `2h`."
    },
    "UserNames": {
      "in": "query",
      "name": "name",
      "type": "array",
      "items": { "type": "string" },
      "collectionFormat": "multi",
      "description": "The set of user names."
    }
  },
  "definitions": {
    "CountResponse": {
      "type": "object",
      "required": [
        "matches"
      ],
      "properties": {
        "dataRate": {
          "description": "Data rate, MB/s",
          "type": "string"
        },
        "duration": {
          "description": "Duration, milliseconds",
          "type": "number",
          "format": "int64"
        },
        "fabricDataRate": {
          "description": "Fabric data rate, MB/s",
          "type": "string"
        },
        "matches": {
          "description": "Total number of records found",
          "type": "number",
          "format": "int64"
        },
        "totalBytes": {
          "description": "Total number of bytes processed",
          "type": "number",
          "format": "int64"
        },
        "fabricDuration": {
          "description": "Fabric duration, milliseconds",
          "type": "number",
          "format": "int64"
        },
        "host": {
          "description": "Cluster node name",
          "type": "string"
        },
        "details": {
          "description": "Processing details",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {}
          }
        },
        "extra": {
          "description": "Extra information",
          "type": "object",
          "properties": {
            "backend": {
              "description": "Backend tool used",
              "type": "string"
            },
            "session": {
              "description": "Session identifier",
              "type": "string"
            },
            "aggregations": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "debug": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "SearchResponse": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "Set of found records",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "errors": {
          "description": "Set of errors",
          "type": "array",
          "items": { "type": "string" }
        },
        "stats": {
          "$ref": "#/definitions/CountResponse"
        }
      }
    },
    "GetFilesResponse": {
      "type": "object",
      "properties": {
        "folders": {
          "type": "array",
          "items": { "type": "string" }
        },
        "files": {
          "type": "array",
          "items": { "type": "string" }
        },
        "catalogs": {
          "type": "array",
          "items": { "type": "string" }
        },
        "details": {
          "type": "object"
        },
        "dir": {
          "type": "string"
        }
      }
    },
    "Version": {
      "description": "REST service version information.",
      "type": "object",
      "properties": {
        "git-hash": {
          "description": "Git hash of the source tree the REST service is built on.",
          "type": "string"
        },
        "version": {
          "description": "REST service version.",
          "type": "string"
        }
      }
    },
    "Credentials": {
      "description": "User's credentials: name and password.",
      "type": "object",
      "properties": {
        "username": {
          "description": "User's name.",
          "type": "string"
        },
        "password": {
          "description": "User's password.",
          "type": "string"
        }
      }
    },
    "JwtToken": {
      "description": "JWT token information.",
      "type": "object",
      "properties": {
        "expire": {
          "description": "Token expiration datetime (RFC-3339).",
          "type": "string",
          "format": "date-time"
        },
        "token": {
          "description": "JWT token.",
          "type": "string"
        }
      }
    },
    "Error": {
      "description": "Detailed error information.",
      "type": "object",
      "properties": {
        "message": {
          "description": "Short error message.",
          "type": "string"
        },
        "details": {
          "description": "Detailed error description.",
          "type": "string"
        },
        "status": {
          "description": "Corresponding HTTP status code.",
          "type": "integer",
          "required": true
        }
      },
      "additionalProperties": {
        "description": "Extensions.",
        "type": "object"
      }
    },
    "RenameResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "PostFileResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "properties": {
              "length": {
                "type": "integer",
                "format": "int64"
              },
              "offset": {
                "type": "integer",
                "format": "int64"
              },
              "path": {
                "type": "string"
              },
              "error": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DeleteFilesResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "SearchRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "What to search. Could be simple pain text like `hello` or Ryft search query like `(RECORD.body CONTAINS \"night\")`."
        },
        "files": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Set of files or catalogs to search. The path should be designated relative to `/ryftone`. Wildcards are supported, for example: `*.txt`"
        },
        "ignore-missing-files": {
          "type": "boolean",
          "description": "If `true` report empty statistics instead of error."
        },
        "mode": {
          "type": "string",
          "description": "Search mode. Could be one of:\n- `es` - exact search\n- `fhs` - fuzzy hamming search\n- `feds` - fuzzy edit distance search\n- `ds` - date search\n- `ts` - time search\n- `ns` - numeric search\n- `cs` - currency search\n- `ipv4` - IPv4 search\n- `ipv6` - IPv6 search\n- `pcre2` - RegExp search",
          "enum": [ "es", "fhs", "feds", "ds", "ts", "ns", "cs", "ipv4", "ipv6", "pcre2" ]
        },
        "surrounding": {
          "type": "string",
          "description": "Number of characters before the match and after the match that will be returned. Can be `line` to get whole line. This parameter is used with RAW text search."
        },
        "fuzziness": {
          "type": "integer",
          "format": "uint8",
          "maximum": 255,
          "minimum": 0,
          "description": "Fuzziness of the search. Measured as the maximum Hamming distance for `fhs` mode or edit distance for `feds` mode."
        },
        "format": {
          "type": "string",
          "description": "Input data format. Parameter is used with structured or RAW text search.",
          "enum": [ "raw", "xml", "json", "utf8", "null" ]
        },
        "cs": {
          "type": "boolean",
          "default": true,
          "description": "Case sensitivity flag."
         },
        "reduce": {
          "type": "boolean",
          "default": true,
          "description": "Reduce flag for fuzzy edit distance search."
        },
        "fields": {
          "type": "string",
          "description": "Coma-separated list of requested fields. If omitted all fields are used. Parameter is used with structured search to minimize output."
        },
        "backend": {
          "type": "string",
          "description": "Optional backend tool to run search.",
          "enum": [ "ryftprim", "ryftx", "ryftpcre2" ]
        },
        "backend-mode": {
          "type": "string",
          "description": "Backend mode (default, high-performance, etc)."
        },
        "backend-options": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Optional list of backend options"
        },
        "data": {
          "type": "string",
          "description": "Name of DATA file to keep. `{{random}}` keyword is replaced with unique number. **WARNING**: file will be overriden!"
        },
        "index": {
          "type": "string",
          "description": "Name of INDEX file to keep. `{{random}}` keyword is replaced with unique number. **WARNING**: file will be overriden!"
        },
        "view": {
          "type": "string",
          "description": "Name of VIEW file (cache to access DATA&INDEX) to produce. `{{random}}` keyword is replaced with unique number. **WARNING**: file will be overriden!"
        },
        "delimiter": {
          "type": "string",
          "description": "The delimiter is used to place between records in DATA file."
        },
        "lifetime": {
          "type": "string",
          "description": "The output files lifetime (DATA, INDEX, VIEW), for example `2h`."
        },
        "share-mode": {
          "type": "string",
          "description": "Sharing mode used to access data files. Can be `wait-10s`, `skip` or `ignore`. By default `wait-0s` is used."
        },
        "nodes": {
          "type": "integer",
          "format": "uint8",
          "maximum": 4,
          "minimum": 0,
          "description": "Specifies 1-4 RCAB processing nodes to use. If omitted all nodes are used.",
          "enum": [ 1, 2, 3, 4 ]
        },
        "local": {
          "type": "boolean",
          "default": false,
          "description": "Perform search only on this cluster node."
        },
        "stats": {
          "type": "boolean",
          "default": false,
          "description": "Include search statistics in response."
        },
        "performance": {
          "type": "boolean",
          "default": false,
          "description": "Include performance metrics in response."
        },
        "limit": {
          "type": "integer",
          "format": "uint64",
          "description": "Limit the total number of records reported."
        },
        "transforms": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Additional data transformation. Could be:\n- `match(\"^.*$\")` to match text,\n- `replace(\"^(.*)apple(.*)$\", \"$1orange$2\")` to replace text,\n- `script(\"filter_position\")` to run custom script"
        },
        "aggs": {
          "description": "Custom aggregations",
          "type": "object"
        }
      }
    },
    "CountRequest": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "What to search. Could be simple pain text like `hello` or Ryft search query like `(RECORD.body CONTAINS \"night\")`."
         },
        "files": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Set of files or catalogs to search. The path should be designated relative to `/ryftone`. Wildcards are supported, for example: `*.txt`"
        },
        "ignore-missing-files": {
          "type": "boolean",
          "description": "If `true` report empty statistics instead of error."
        },
        "mode": {
          "type": "string",
          "description": "Search mode. Could be one of:\n- `es` - exact search\n- `fhs` - fuzzy hamming search\n- `feds` - fuzzy edit distance search\n- `ds` - date search\n- `ts` - time search\n- `ns` - numeric search\n- `cs` - currency search\n- `ipv4` - IPv4 search\n- `ipv6` - IPv6 search\n- `pcre2` - RegExp search",
          "enum": [ "es", "fhs", "feds", "ds", "ts", "ns", "cs", "ipv4", "ipv6", "pcre2" ]
        },
        "surrounding": {
          "type": "string",
          "description": "Number of characters before the match and after the match that will be returned. Can be `line` to get whole line. This parameter is used with RAW text search."
        },
        "fuzziness": {
          "type": "integer",
          "format": "uint8",
          "maximum": 255,
          "minimum": 0,
          "description": "Fuzziness of the search. Measured as the maximum Hamming distance for `fhs` mode or edit distance for `feds` mode."
        },
        "cs": {
          "type": "boolean",
          "default": true,
          "description": "Case sensitivity flag."
        },
        "reduce": {
          "type": "boolean",
          "default": true,
          "description": "Reduce flag for fuzzy edit distance search."
        },
        "backend": {
          "type": "string",
          "description": "Optional backend tool to run search.",
          "enum": [ "ryftprim", "ryftx", "ryftpcre2" ]
        },
        "backend-mode": {
          "type": "string",
          "description": "Backend mode (default, high-performance, etc)."
        },
        "backend-options": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Optional list of backend options"
        },
        "data": {
          "type": "string",
          "description": "Name of DATA file to keep. `{{random}}` keyword is replaced with unique number. **WARNING**: file will be overriden!"
        },
        "index": {
          "type": "string",
          "description": "Name of INDEX file to keep. `{{random}}` keyword is replaced with unique number. **WARNING**: file will be overriden!"
        },
        "view": {
          "type": "string",
          "description": "Name of VIEW file (cache to access DATA&INDEX) to produce. `{{random}}` keyword is replaced with unique number. **WARNING**: file will be overriden!"
        },
        "delimiter": {
          "type": "string",
          "description": "The delimiter is used to place between records in DATA file."
        },
        "lifetime": {
          "type": "string",
          "description": "The output files lifetime (DATA, INDEX, VIEW), for example `2h`."
        },
        "share-mode": {
          "type": "string",
          "description": "Sharing mode used to access data files. Can be `wait-10s`, `skip` or `ignore`. By default `wait-0s` is used."
        },
        "nodes": {
          "type": "integer",
          "format": "uint8",
          "maximum": 4,
          "minimum": 0,
          "description": "Specifies 1-4 RCAB processing nodes to use. If omitted all nodes are used.",
          "enum": [ 1, 2, 3, 4 ]
        },
        "local": {
          "type": "boolean",
          "default": false,
          "description": "Perform search only on this cluster node."
        },
        "performance": {
          "type": "boolean",
          "default": false,
          "description": "Include performance metrics in response."
        },
        "aggs": {
          "description": "Custom aggregations",
          "type": "object"
        }
      }
    },
    "AggregationRequest": {
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "description": "Input data format. Parameter is used with structured or RAW text search.",
          "enum": [ "raw", "xml", "json", "utf8", "null" ]
        },
        "session": {
          "type": "string",
          "description": "Session token to access search results. Can be used to specify DATA,INDEX,VIEW files and delimiter instead of corresponding parameters."
        },
        "data": {
          "type": "string",
          "description": "Name of DATA file to read."
        },
        "index": {
          "type": "string",
          "description": "Name of INDEX file to read."
        },
        "delimiter": {
          "type": "string",
          "description": "The delimiter is used to place between records in DATA file."
        },
        "local": {
          "type": "boolean",
          "default": false,
          "description": "Perform search only on this cluster node."
        },
        "performance": {
          "type": "boolean",
          "default": false,
          "description": "Include performance metrics in response."
        },
        "aggs": {
          "description": "Custom aggregations",
          "type": "object"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "username": {
          "description": "Unique user name",
          "type": "string"
        },
        "password": {
          "description": "User's password",
          "type": "string"
        },
        "roles": {
          "description": "Set of user's roles",
          "type": "array",
          "items": { "type": "string" }
        },
        "home": {
          "description": "User's home directory inside `/ryftone` partition",
          "type": "string"
        },
        "cluster-tag": {
          "description": "Partitioning tag used in cluster mode",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic": [],
      "jwt": []
    }
  ]
}
