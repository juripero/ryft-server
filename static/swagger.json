{
  "swagger": "2.0",
  "info": {
    "description": "This is a REST API for the RyftOne Server and Cluster. It provides methods to list files and folders stored on server or cluster and execute search and count requests. Both RAW_TEXT and RECORD searches supported. Please explore API below for details and examples.",
    "title": "RyftOne REST API",
    "version": "0.12.0"
  },
  "paths": {
    "/search": {
      "get": {
        "description": "Endpoint for the search. Does the text or structured search.",
        "tags": [
          "search"
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "summary": "Text or structured search",
        "operationId": "search",
        "parameters": [
          {
            "in": "query",
            "type": "string",
            "name": "query",
            "x-go-name": "Query",
            "description": "Search query, for example: (RAW_TEXT CONTAINS \"night\")",
            "required": true
          },
          {
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "file",
            "x-go-name": "File",
            "description": "Set of files or catalogs to search. The path should be designated relative to /ryftone. Wildcards are supported, for example: *.txt",
            "collectionFormat": "multi",
            "required": true
          },
          {
            "in": "query",
            "type": "string",
            "name": "mode",
            "x-go-name": "Mode",
            "description": "Search mode. Could be exact search (es), fuzzy hamming search (fhs), fuzzy edit distance search (feds), date search (ds), time search (ts), currency or numeric search (ns), regex search (rs), IPv4 search (ipv4), IPv6 search (ipv6)",
            "enum": ["es", "fhs", "feds", "ds", "ts", "ns", "rs", "ipv4", "ipv6"]
          },
          {
            "in": "query",
            "type": "string",
            "name": "surrounding",
            "x-go-name": "Surrounding",
            "description": "Number of characters before the match and after the match that will be returned. Can be surrounding=line to get whole line. This parameter is used with RAW text search."
          },
          {
            "in": "query",
            "type": "integer",
            "format": "uint8",
            "maximum": 255,
            "minimum": 0,
            "name": "fuzziness",
            "x-go-name": "Fuzziness",
            "description": "Fuzziness of the search. Measured as the maximum Hamming distance for \"fhs\" mode or edit distance for \"feds\" mode."
          },
          {
            "in": "query",
            "type": "string",
            "name": "format",
            "x-go-name": "Format",
            "description": "Input data format. Parameter is used with structured or RAW text search.",
            "enum": ["raw", "xml", "json", "utf8", "null"]
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "cs",
            "x-go-name": "CaseSensitive",
            "description": "Case sensitive flag"
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "reduce",
            "default": true,
            "x-go-name": "Reduce",
            "description": "Reduce flag for fuzzy edit distance search"
          },
          {
            "in": "query",
            "type": "string",
            "name": "fields",
            "x-go-name": "Fields",
            "description": "Coma-separated list of requested fields. If omitted all fields are used. Parameter is used with structured search to minimize output."
          },
          {
            "in": "query",
            "type": "string",
            "x-go-name": "Backend",
            "name": "backend",
            "description": "Optional backend tool.",
            "enum": ["ryftprim", "ryftx"]
          },
          {
            "in": "query",
            "type": "string",
            "x-go-name": "Data",
            "name": "data",
            "description": "Name of DATA file to keep. \"{{random}}\" keyword is replaced with unique number. WARNING: file will be overriden!"
          },
          {
            "in": "query",
            "type": "string",
            "name": "index",
            "x-go-name": "Index",
            "description": "Name of INDEX file to keep. \"{{random}}\" keyword is replaced with unique number. WARNING: file will be overriden!"
          },
          {
            "in": "query",
            "type": "string",
            "name": "view",
            "x-go-name": "View",
            "description": "Name of VIEW file (cache to access DATA&INDEX) to produce. \"{{random}}\" keyword is replaced with unique number. WARNING: file will be overriden!"
          },
          {
            "in": "query",
            "type": "string",
            "name": "delimiter",
            "x-go-name": "Delimiter",
            "description": "The delimiter is used between found records in DATA file."
          },
          {
            "in": "query",
            "type": "string",
            "name": "lifetime",
            "x-go-name": "Lifetime",
            "description": "The output files lifetime (DATA, INDEX, VIEW), for example \"2h\"."
          },
          {
            "in": "query",
            "type": "string",
            "name": "share-mode",
            "x-go-name": "ShareMode",
            "description": "Sharing mode used to access data files. Can be \"wait-10s\", \"skip\" or \"ignore\". By default \"wait-0s\" is used."
          },
          {
            "in": "query",
            "type": "integer",
            "format": "uint8",
            "maximum": 4,
            "minimum": 0,
            "name": "nodes",
            "x-go-name": "Nodes",
            "description": "Specifies 1-4 RCAB processing nodes to use. If omitted all nodes are used.",
            "enum": [1, 2, 3, 4]
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "local",
            "x-go-name": "Local",
            "description": "Perform search only on this cluster member. Default 'false'."
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "stats",
            "x-go-name": "Stats",
            "description": "Include search statistics in response. Default 'false'."
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "performance",
            "x-go-name": "Performance",
            "description": "Include performance metrics in response. Default 'false'."
          },
          {
            "in": "query",
            "type": "integer",
            "format": "uint",
            "name": "limit",
            "x-go-name": "Limit",
            "description": "Limit the total number of records reported."
          },
          {
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "name": "transform",
            "description": "Additional data transformation. Could be match(\"^.*$\"), replace(\"^(.*)apple(.*)$\", \"$1orange$2\") or script(\"filter_position\")"
          }
        ],
        "responses": {
          "200": {
            "description": "SearchResponseOK is a search result in an array with an elements of various structure",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/count": {
      "get": {
        "description": "Endpoint for the count. Does the search but returns just statistics.",
        "tags": [
          "search"
        ],
        "summary": "Count the search matches",
        "operationId": "count",
        "parameters": [
          {
            "in": "query",
            "type": "string",
            "name": "query",
            "x-go-name": "Query",
            "description": "Search query, for example: (RAW_TEXT CONTAINS \"night\")",
            "required": true
          },
          {
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "file",
            "x-go-name": "File",
            "description": "Set of files or catalogs to search. The path should be designated relative to /ryftone. Wildcards are supported, for example: *.txt",
            "collectionFormat": "multi",
            "required": true
          },
          {
            "in": "query",
            "type": "string",
            "name": "mode",
            "x-go-name": "Mode",
            "description": "Search mode. Could be exact search (es), fuzzy hamming search (fhs), fuzzy edit distance search (feds), date search (ds), time search (ts), currency or numeric search (ns), regex search (rs), IPv4 search (ipv4), IPv6 search (ipv6)",
            "enum": ["es", "fhs", "feds", "ds", "ts", "ns", "rs", "ipv4", "ipv6"]
          },
          {
            "in": "query",
            "type": "string",
            "name": "surrounding",
            "x-go-name": "Surrounding",
            "description": "Number of characters before the match and after the match that will be returned. Can be surrounding=line to get whole line. This parameter is used with RAW text search."
          },
          {
            "in": "query",
            "type": "integer",
            "format": "uint8",
            "maximum": 255,
            "minimum": 0,
            "name": "fuzziness",
            "x-go-name": "Fuzziness",
            "description": "Fuzziness of the search. Measured as the maximum Hamming distance for \"fhs\" mode or edit distance for \"feds\" mode."
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "cs",
            "x-go-name": "CaseSensitive",
            "description": "Case sensitive flag"
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "reduce",
            "default": true,
            "x-go-name": "Reduce",
            "description": "Reduce flag for fuzzy edit distance search"
          },
          {
            "in": "query",
            "type": "string",
            "x-go-name": "Backend",
            "name": "backend",
            "description": "Optional backend tool.",
            "enum": ["ryftprim", "ryftx"]
          },
          {
            "in": "query",
            "type": "string",
            "x-go-name": "Data",
            "name": "data",
            "description": "Name of DATA file to keep. \"{{random}}\" keyword is replaced with unique number. WARNING: file will be overriden!"
          },
          {
            "in": "query",
            "type": "string",
            "name": "index",
            "x-go-name": "Index",
            "description": "Name of INDEX file to keep. \"{{random}}\" keyword is replaced with unique number. WARNING: file will be overriden!"
          },
          {
            "in": "query",
            "type": "string",
            "name": "view",
            "x-go-name": "View",
            "description": "Name of VIEW file (cache to access DATA&INDEX) to produce. \"{{random}}\" keyword is replaced with unique number. WARNING: file will be overriden!"
          },
          {
            "in": "query",
            "type": "string",
            "name": "delimiter",
            "x-go-name": "Delimiter",
            "description": "The delimiter is used between found records in DATA file."
          },
          {
            "in": "query",
            "type": "string",
            "name": "lifetime",
            "x-go-name": "Lifetime",
            "description": "The output files lifetime (DATA, INDEX, VIEW), for example \"2h\"."
          },
          {
            "in": "query",
            "type": "string",
            "name": "share-mode",
            "x-go-name": "ShareMode",
            "description": "Sharing mode used to access data files. Can be \"wait-10s\", \"skip\" or \"ignore\". By default \"wait-0s\" is used."
          },
          {
            "in": "query",
            "type": "integer",
            "format": "uint8",
            "maximum": 4,
            "minimum": 0,
            "name": "nodes",
            "x-go-name": "Nodes",
            "description": "Specifies 1-4 RCAB processing nodes to use. If omitted all nodes are used.",
            "enum": [1, 2, 3, 4]
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "local",
            "x-go-name": "Local",
            "description": "Perform search only on this cluster member. Default 'false'."
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "performance",
            "x-go-name": "Performance",
            "description": "Include performance metrics in response. Default 'false'."
          }
        ],
        "responses": {
          "200": {
            "description": "SearchResponseOK is a search result in an array with an elements of various structure",
            "schema": {
              "$ref": "#/definitions/CountResponse"
            }
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/search/show": {
      "get": {
        "description": "Endpoint to access search results. Reads already existing search results.",
        "tags": [
          "search"
        ],
        "produces": [
          "application/json",
          "text/csv"
        ],
        "summary": "Read search results",
        "operationId": "searchShow",
        "parameters": [
          {
            "in": "query",
            "type": "integer",
            "format": "uint",
            "name": "offset",
            "x-go-name": "Offset",
            "description": "Offset of first record to report."
          },
          {
            "in": "query",
            "type": "integer",
            "format": "uint",
            "name": "count",
            "x-go-name": "Count",
            "description": "Total number of records to report."
          },
          {
            "in": "query",
            "type": "string",
            "name": "format",
            "x-go-name": "Format",
            "description": "Input data format. Parameter is used with structured or RAW text search.",
            "enum": ["raw", "xml", "json", "utf8", "null"]
          },
          {
            "in": "query",
            "type": "string",
            "name": "fields",
            "x-go-name": "Fields",
            "description": "Coma-separated list of requested fields. If omitted all fields are used. Parameter is used with structured search to minimize output."
          },
          {
            "in": "query",
            "type": "string",
            "x-go-name": "Session",
            "name": "session",
            "description": "Session token to access search results."
          },
          {
            "in": "query",
            "type": "string",
            "x-go-name": "Data",
            "name": "data",
            "description": "Name of DATA file to read."
          },
          {
            "in": "query",
            "type": "string",
            "name": "index",
            "x-go-name": "Index",
            "description": "Name of INDEX file to read."
          },
          {
            "in": "query",
            "type": "string",
            "name": "view",
            "x-go-name": "View",
            "description": "Name of VIEW file to read."
          },
          {
            "in": "query",
            "type": "string",
            "name": "delimiter",
            "x-go-name": "Delimiter",
            "description": "The delimiter is used between found records in DATA file."
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "local",
            "x-go-name": "Local",
            "description": "Perform search only on this cluster member. Default 'false'."
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "performance",
            "x-go-name": "Performance",
            "description": "Include performance metrics in response. Default 'false'."
          }
        ],
        "responses": {
          "200": {
            "description": "SearchResponseOK is a search result in an array with an elements of various structure",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/run": {
      "get": {
        "tags": [
          "run"
        ],
        "summary": "Run custom command on server side",
        "description": "Endpoint to run custom command",
        "operationId": "run",
        "parameters": [
          {
            "name": "image",
            "type": "string",
            "description": "The Docker image to run command in.",
            "required": false,
            "in": "query"
          },
          {
            "name": "command",
            "type": "string",
            "description": "Command to run.",
            "required": false,
            "in": "query"
          },
          {
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "arg",
            "description": "Set of arguments.",
            "collectionFormat": "multi",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "STDOUT and STDERR combined output of the command"
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/rename": {
      "put": {
        "tags": [
          "files"
        ],
        "summary": "Change file/directory/catalog name or file name in catalog",
        "description": "Endpoint for the file renaming",
        "operationId": "updateFiles",
        "parameters": [
          {
            "name": "file",
            "type": "string",
            "description": "The uploading filename.",
            "required": false,
            "in": "query"
          },
          {
            "name": "dir",
            "type": "string",
            "description": "Directory name.",
            "required": false,
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "string",
            "description": "Catalog name.",
            "required": false,
            "in": "query"
          },
          {
            "name": "new",
            "type": "string",
            "description": "New name for a file/directore/catalog or file inside catalog.",
            "required": true,
            "in": "query"
          },
          {
          "in": "query",
            "type": "boolean",
            "name": "local",
            "description": "Perform action only on this cluster member. Default 'false'."
          }
        ],
        "responses": {
          "200": {
            "description": "Map of file/dir/catalog and its status",
            "schema": {
              "$ref": "#/definitions/RenameResponse"
            }
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List a directory content or download a file",
        "description": "Endpoint to query node/cluster file system structure or download a file",
        "operationId": "getFiles",
        "parameters": [
          {
            "name": "dir",
            "type": "string",
            "description": "The folder path to return child items of. Default '/'",
            "in": "query"
          },
          {
            "name": "hidden",
            "type": "boolean",
            "description": "Report hidden files",
            "in": "query"
          },
          {
            "name": "local",
            "type": "boolean",
            "description": "Return file structure from local node only or whole cluster",
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "string",
            "description": "The path to catalog to download file of",
            "in": "query"
          },
          {
            "name": "file",
            "type": "string",
            "description": "The filepath to download",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of files and directories for node/cluster",
            "schema": {
              "$ref": "#/definitions/GetFilesResponse"
            }
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload files",
        "description": "Endpoint to upload files",
        "operationId": "postFiles",
        "consumes": [
          "application/octet-stream",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "content",
            "in": "formData",
            "type": "file",
            "description": "File content to upload",
            "required": true
          },
          {
            "name": "file",
            "type": "string",
            "description": "The uploading filename. Use {{random}} for random names.",
            "required": true,
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "string",
            "description": "The catalog to append file to.",
            "in": "query"
          },
          {
            "in": "query",
            "type": "string",
            "name": "delimiter",
            "description": "The delimiter is used between file parts in catalog."
          },
          {
            "name": "offset",
            "type": "integer",
            "format": "int64",
            "description": "The optional file part offset.",
            "in": "query"
          },
          {
            "name": "length",
            "type": "integer",
            "format": "int64",
            "description": "The optional file part length.",
            "in": "query"
          },
          {
            "in": "query",
            "type": "string",
            "name": "lifetime",
            "description": "The file or catalog lifetime, for example \"2h\"."
          },
          {
            "in": "query",
            "type": "string",
            "name": "share-mode",
            "x-go-name": "ShareMode",
            "description": "Sharing mode used to access data files. Can be \"wait-10s\" or \"ignore\". By default \"wait-0s\" is used."
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "local",
            "description": "Perform action only on this cluster member. Default 'false'."
          }
        ],
        "responses": {
          "200": {
            "description": "Map of files and directories uploaded",
            "schema": {
              "$ref": "#/definitions/PostFilesResponse"
            }
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Delete directories and files",
        "description": "Endpoint to delete node's directories and files",
        "operationId": "deleteFiles",
        "parameters": [
          {
            "name": "dir",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "The directory path to delete. Wildcards are supported.",
            "in": "query"
          },
          {
            "name": "file",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "The file path to delete. Wildcards are supported.",
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "The catalog path to delete. Wildcards are supported.",
            "in": "query"
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "local",
            "x-go-name": "Local",
            "description": "Perform action only on this cluster member. Default 'false'."
          }
        ],
        "responses": {
          "200": {
            "description": "Map of files and directories deleted",
            "schema": {
              "$ref": "#/definitions/DeleteFilesResponse"
            }
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Get server's version",
        "description": "Endpoint to query current build version",
        "operationId": "version",
        "responses": {
          "200": {
            "description": "Hash and version",
            "schema": {
              "$ref": "#/definitions/VersionResponse"
            }
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "login"
        ],
        "summary": "Authentication",
        "description": "Endpoint to authenticate an user",
        "operationId": "login",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User's credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JWT",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        },
        "security": []
      }
    },
    "/token/refresh": {
      "get": {
        "tags": [
          "login"
        ],
        "summary": "Refresh authentication",
        "description": "Endpoint to refresh existing authentication token",
        "operationId": "token_refresh",
        "responses": {
          "200": {
            "description": "JWT",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "default": {
            "description": "Error responses",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CountResponse": {
      "type": "object",
      "required": [
        "matches"
      ],
      "properties": {
        "dataRate": {
          "type": "string"
        },
        "duration": {
          "type": "number",
          "format": "int32"
        },
        "fabricDataRate": {
          "type": "string"
        },
        "matches": {
          "type": "number",
          "format": "int32"
        },
        "totalBytes": {
          "type": "number",
          "format": "int32"
        }
      }
    },
    "SearchResponse": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "stats": {
          "$ref": "#/definitions/CountResponse"
        }
      }
    },
    "FilesResponse": {
      "type": "object",
      "properties": {
        "folders": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "files": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "catalogs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "details": {
          "type": "object"
        },
        "dir": {
          "type": "string"
        }
      }
    },
    "VersionResponse": {
      "type": "object",
      "properties": {
        "git-hash": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "expire": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "properties": {
        "message": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "RenameResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "PostFilesResponse": {
      "type": "object",
      "properties": {
        "length": {
          "type": "integer"
        },
        "offset": {
          "type": "integer"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "DeleteFilesResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "GetFilesResponse": {
      "type":"string"
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "jwt": []
    }
  ]
}
