{
  "swagger": "2.0",
  "info": {
    "description": "This is a REST API for the RyftOne Server and Cluster. It provides methods to list files and folders stored on server or cluster and execute search and count requests. Both RAW_TEXT and RECORD searches supported. Please explore API below for details and examples.",
    "title": "RyftOne REST API",
    "version": "0.14.0"
  },
  "paths": {
    "/search": {
      "get": {
        "operationId": "search",
        "description": "Endpoint for the search. Does the text or structured search.",
        "summary": "Text or structured search",
        "tags": [ "search" ],
        "produces": [ "application/json", "text/csv" ],
        "parameters": [
          { "$ref": "#/parameters/SearchQuery" },
          { "$ref": "#/parameters/SearchFile" },
          { "$ref": "#/parameters/SearchMode" },
          { "$ref": "#/parameters/Surrounding" },
          { "$ref": "#/parameters/Fuzziness" },
          { "$ref": "#/parameters/SearchFormat" },
          { "$ref": "#/parameters/SearchCase" },
          { "$ref": "#/parameters/SearchReduce" },
          { "$ref": "#/parameters/SearchFields" },
          { "$ref": "#/parameters/SearchBackend" },
          { "$ref": "#/parameters/SaveData" },
          { "$ref": "#/parameters/SaveIndex" },
          { "$ref": "#/parameters/SaveView" },
          { "$ref": "#/parameters/Delimiter" },
          { "$ref": "#/parameters/Lifetime" },
          { "$ref": "#/parameters/ShareMode" },
          { "$ref": "#/parameters/SearchNodes" },
          { "$ref": "#/parameters/Local" },
          { "$ref": "#/parameters/SearchStat" },
          { "$ref": "#/parameters/Performance" },
          { "$ref": "#/parameters/SearchLimit" },
          { "$ref": "#/parameters/Transform" }
        ],
        "responses": {
          "200": {
            "description": "Search result contains all found records and search statistics.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "description": "Does the text or structured search. The same as `GET /search` but uses JSON object in request's body to specify search parameters.",
        "tags": [ "search" ],
        "produces": [ "application/json", "text/csv" ],
        "summary": "Text or structured search",
        "operationId": "searchPost",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": { "$ref": "#/definitions/SearchRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Search result contains all found records and search statistics.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/count": {
      "get": {
        "description": "Endpoint for the count. Does the search but returns just statistics.",
        "tags": [ "search" ],
        "summary": "Count the number of matches",
        "operationId": "count",
        "produces": [ "application/json", "text/csv" ],
        "parameters": [
          { "$ref": "#/parameters/SearchQuery" },
          { "$ref": "#/parameters/SearchFile" },
          { "$ref": "#/parameters/SearchMode" },
          { "$ref": "#/parameters/Surrounding" },
          { "$ref": "#/parameters/Fuzziness" },
          { "$ref": "#/parameters/SearchCase" },
          { "$ref": "#/parameters/SearchReduce" },
          { "$ref": "#/parameters/SearchBackend" },
          { "$ref": "#/parameters/SaveData" },
          { "$ref": "#/parameters/SaveIndex" },
          { "$ref": "#/parameters/SaveView" },
          { "$ref": "#/parameters/Delimiter" },
          { "$ref": "#/parameters/Lifetime" },
          { "$ref": "#/parameters/ShareMode" },
          { "$ref": "#/parameters/SearchNodes" },
          { "$ref": "#/parameters/Local" },
          { "$ref": "#/parameters/Performance" }
        ],
        "responses": {
          "200": {
            "description": "Search result contains search statistics only.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "description": "Does the search but returns just statistics. The same as `GET /count` but uses JSON object in request's body to specify search parameters.",
        "tags": [ "search" ],
        "summary": "Count the number of matches",
        "operationId": "countPost",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": { "$ref": "#/definitions/CountRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Search result contains search statistics only.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/search/show": {
      "get": {
        "description": "Endpoint to access search results. Reads already existing search results.",
        "tags": [ "search" ],
        "produces": [ "application/json", "text/csv" ],
        "summary": "Read search results",
        "operationId": "searchShow",
        "parameters": [
          { "$ref": "#/parameters/ShowOffset" },
          { "$ref": "#/parameters/ShowCount" },
          { "$ref": "#/parameters/SearchFormat" },
          { "$ref": "#/parameters/SearchFields" },
          { "$ref": "#/parameters/UseSession" },
          { "$ref": "#/parameters/UseData" },
          { "$ref": "#/parameters/UseIndex" },
          { "$ref": "#/parameters/UseView" },
          { "$ref": "#/parameters/Delimiter" },
          { "$ref": "#/parameters/Local" },
          { "$ref": "#/parameters/Performance" }
        ],
        "responses": {
          "200": {
            "description": "Search result contains all requested records.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/search/aggs": {
      "post": {
        "description": "Endpoint to calculate aggregations on search results (Should be prepared with `/search` or `/count`).",
        "tags": [ "search" ],
        "produces": [ "application/json", "text/csv" ],
        "summary": "Calculate aggregations on search results",
        "operationId": "searchAggsPost",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": { "$ref": "#/definitions/AggregationRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "Search result contains all calculated aggregations.",
            "schema": { "$ref": "#/definitions/SearchResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/run": {
      "get": {
        "tags": [ "run" ],
        "summary": "Run custom command on server side",
        "description": "Endpoint to run custom command",
        "operationId": "run",
        "parameters": [
          {
            "name": "image",
            "type": "string",
            "description": "The Docker image to run command in.",
            "required": false,
            "in": "query"
          },
          {
            "name": "command",
            "type": "string",
            "description": "Command to run.",
            "required": false,
            "in": "query"
          },
          {
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            },
            "name": "arg",
            "description": "Set of arguments.",
            "collectionFormat": "multi",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "STDOUT and STDERR combined output of the command",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/rename": {
      "put": {
        "tags": [ "files" ],
        "summary": "Change file/directory/catalog name or file name in catalog",
        "description": "Endpoint for the file renaming",
        "operationId": "updateFiles",
        "parameters": [
          {
            "name": "file",
            "type": "string",
            "description": "The uploading filename.",
            "required": false,
            "in": "query"
          },
          {
            "name": "dir",
            "type": "string",
            "description": "Directory name.",
            "required": false,
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "string",
            "description": "Catalog name.",
            "required": false,
            "in": "query"
          },
          {
            "name": "new",
            "type": "string",
            "description": "New name for a file/directore/catalog or file inside catalog.",
            "required": true,
            "in": "query"
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "local",
            "description": "Perform action only on this cluster member. Default 'false'."
          }
        ],
        "responses": {
          "200": {
            "description": "Map of file/dir/catalog and its status",
            "schema": { "$ref": "#/definitions/RenameResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/file": {
      "get": {
        "tags": [ "files" ],
        "summary": "Download a file",
        "description": "Endpoint to download a file",
        "operationId": "getFile",
        "parameters": [
          {
            "name": "dir",
            "type": "string",
            "description": "The folder path where file is located. Default '/'",
            "in": "query"
          },
          {
            "name": "local",
            "type": "boolean",
            "description": "Return file structure from local node only or whole cluster",
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "string",
            "description": "The path to catalog to download file of",
            "in": "query"
          },
          {
            "name": "file",
            "type": "string",
            "description": "The filepath to download",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "File content",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "post": {
        "tags": [ "files" ],
        "summary": "Upload a file",
        "description": "Endpoint to upload a file",
        "operationId": "postFile",
        "consumes": [ "multipart/form-data" ],
        "parameters": [
          {
            "name": "content",
            "in": "formData",
            "type": "file",
            "description": "File content to upload",
            "required": true
          },
          {
            "name": "file",
            "type": "string",
            "description": "The uploading filename. Use {{random}} for random names.",
            "required": true,
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "string",
            "description": "The catalog to append file to.",
            "in": "query"
          },
          {
            "in": "query",
            "type": "string",
            "name": "delimiter",
            "description": "The delimiter is used between file parts in catalog."
          },
          {
            "name": "offset",
            "type": "integer",
            "format": "int64",
            "description": "The optional file part offset.",
            "in": "query"
          },
          {
            "name": "length",
            "type": "integer",
            "format": "int64",
            "description": "The optional file part length.",
            "in": "query"
          },
          {
            "in": "query",
            "type": "string",
            "name": "lifetime",
            "description": "The file or catalog lifetime, for example \"2h\"."
          },
          {
            "in": "query",
            "type": "string",
            "name": "share-mode",
            "x-go-name": "ShareMode",
            "description": "Sharing mode used to access data files. Can be \"wait-10s\" or \"ignore\". By default \"wait-0s\" is used."
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "local",
            "description": "Perform action only on this cluster member. Default 'false'."
          }
        ],
        "responses": {
          "200": {
            "description": "Map of files and directories uploaded",
            "schema": { "$ref": "#/definitions/PostFileResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [ "files" ],
        "summary": "List a directory or catalog content",
        "description": "Endpoint to query node/cluster file system structure",
        "operationId": "getFiles",
        "parameters": [
          {
            "name": "dir",
            "type": "string",
            "description": "The folder path to return child items of. Default '/'",
            "in": "query"
          },
          {
            "name": "hidden",
            "type": "boolean",
            "description": "Report hidden files",
            "in": "query"
          },
          {
            "name": "local",
            "type": "boolean",
            "description": "Return file structure from local node only or whole cluster",
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "string",
            "description": "The path to catalog to get content of",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of files and directories for node/cluster",
            "schema": { "$ref": "#/definitions/GetFilesResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      },
      "delete": {
        "tags": [ "files" ],
        "summary": "Delete directories and files",
        "description": "Endpoint to delete node's directories and files",
        "operationId": "deleteFiles",
        "parameters": [
          {
            "name": "dir",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "The directory path to delete. Wildcards are supported.",
            "in": "query"
          },
          {
            "name": "file",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "The file path to delete. Wildcards are supported.",
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "The catalog path to delete. Wildcards are supported.",
            "in": "query"
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "local",
            "x-go-name": "Local",
            "description": "Perform action only on this cluster member. Default 'false'."
          }
        ],
        "responses": {
          "200": {
            "description": "Map of files and directories deleted",
            "schema": { "$ref": "#/definitions/DeleteFilesResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/raw": {
      "post": {
        "tags": [ "files" ],
        "summary": "Upload a RAW octet stream",
        "description": "Endpoint to upload RAW octet stream",
        "operationId": "postRawFile",
        "consumes": [ "application/octet-stream" ],
        "parameters": [
          {
            "name": "content",
            "in": "body",
            "schema": {
              "type": "string",
              "format": "byte"
            },
            "description": "Byte content to upload",
            "required": true
          },
          {
            "name": "file",
            "type": "string",
            "description": "The uploading filename. Use {{random}} for random names.",
            "required": true,
            "in": "query"
          },
          {
            "name": "catalog",
            "type": "string",
            "description": "The catalog to append file to.",
            "in": "query"
          },
          {
            "in": "query",
            "type": "string",
            "name": "delimiter",
            "description": "The delimiter is used between file parts in catalog."
          },
          {
            "name": "offset",
            "type": "integer",
            "format": "int64",
            "description": "The optional file part offset.",
            "in": "query"
          },
          {
            "name": "length",
            "type": "integer",
            "format": "int64",
            "description": "The optional file part length.",
            "in": "query"
          },
          {
            "in": "query",
            "type": "string",
            "name": "lifetime",
            "description": "The file or catalog lifetime, for example \"2h\"."
          },
          {
            "in": "query",
            "type": "string",
            "name": "share-mode",
            "x-go-name": "ShareMode",
            "description": "Sharing mode used to access data files. Can be \"wait-10s\" or \"ignore\". By default \"wait-0s\" is used."
          },
          {
            "in": "query",
            "type": "boolean",
            "name": "local",
            "description": "Perform action only on this cluster member. Default 'false'."
          }
        ],
        "responses": {
          "200": {
            "description": "Map of files and directories uploaded",
            "schema": { "$ref": "#/definitions/PostFileResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [ "misc" ],
        "summary": "Get server's version",
        "description": "Endpoint to query current build version",
        "operationId": "version",
        "responses": {
          "200": {
            "description": "Hash and version",
            "schema": { "$ref": "#/definitions/VersionResponse" }
          },
          "default": {
            "description": "Error response.",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [ "login" ],
        "summary": "Authentication",
        "description": "Endpoint to authenticate an user",
        "operationId": "login",
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User's credentials",
            "required": true,
            "schema": { "$ref": "#/definitions/LoginRequest" }
          }
        ],
        "responses": {
          "200": {
            "description": "JWT",
            "schema": { "$ref": "#/definitions/LoginResponse" }
          },
          "default": {
            "description": "Error responses",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        },
        "security": []
      }
    },
    "/token/refresh": {
      "get": {
        "tags": [ "login" ],
        "summary": "Refresh authentication",
        "description": "Endpoint to refresh existing authentication token",
        "operationId": "token_refresh",
        "responses": {
          "200": {
            "description": "JWT",
            "schema": { "$ref": "#/definitions/LoginResponse" }
          },
          "default": {
            "description": "Error responses",
            "schema": { "$ref": "#/definitions/ErrorResponse" }
          }
        }
      }
    }
  },
  "parameters": {
    "SearchQuery": {
      "in": "query",
      "name": "query",
      "type": "string",
      "description": "Search query, for example: (RAW_TEXT CONTAINS \"night\")",
      "required": true
    },
    "SearchFile": {
      "in": "query",
      "name": "file",
      "type": "array",
      "items": { "type": "string" },
      "description": "Set of files or catalogs to search. The path should be designated relative to /ryftone. Wildcards are supported, for example: *.txt",
      "collectionFormat": "multi",
      "required": true
    },
    "SearchMode": {
      "in": "query",
      "name": "mode",
      "type": "string",
      "description": "Search mode. Could be exact search (es), fuzzy hamming search (fhs), fuzzy edit distance search (feds), date search (ds), time search (ts), currency or numeric search (ns), regex search (rs), IPv4 search (ipv4), IPv6 search (ipv6), RegExp search (pcre2)",
      "enum": [ "es", "fhs", "feds", "ds", "ts", "ns", "rs", "ipv4", "ipv6", "pcre2" ]
    },
    "Surrounding": {
      "in": "query",
      "name": "surrounding",
      "type": "string",
      "description": "Number of characters before the match and after the match that will be returned. Can be surrounding=line to get whole line. This parameter is used with RAW text search."
    },
    "Fuzziness": {
      "in": "query",
      "name": "fuzziness",
      "type": "integer",
      "format": "uint8",
      "maximum": 255,
      "minimum": 0,
      "description": "Fuzziness of the search. Measured as the maximum Hamming distance for \"fhs\" mode or edit distance for \"feds\" mode."
    },
    "SearchFormat": {
      "in": "query",
      "name": "format",
      "type": "string",
      "description": "Input data format. Parameter is used with structured or RAW text search.",
      "enum": [ "raw", "xml", "json", "utf8", "null" ]
    },
    "SearchCase": {
      "in": "query",
      "name": "cs",
      "type": "boolean",
      "default": true,
      "description": "Case sensitive flag"
    },
    "SearchReduce": {
      "in": "query",
      "name": "reduce",
      "type": "boolean",
      "default": true,
      "description": "Reduce flag for fuzzy edit distance search"
    },
    "SearchFields": {
      "in": "query",
      "name": "fields",
      "type": "string",
      "description": "Coma-separated list of requested fields. If omitted all fields are used. Parameter is used with structured search to minimize output."
    },
    "SearchBackend": {
      "in": "query",
      "name": "backend",
      "type": "string",
      "description": "Optional backend tool to run search.",
      "enum": [ "ryftprim", "ryftx", "ryftpcre2" ]
    },
    "UseSession": {
      "in": "query",
      "name": "session",
      "type": "string",
      "description": "Session token to access search results. Can be used to specify DATA,INDEX,VIEW files and delimiter instead of corresponding parameters."
    },
    "SaveData": {
      "in": "query",
      "name": "data",
      "type": "string",
      "description": "Name of DATA file to keep. `{{random}}` keyword is replaced with unique number. WARNING: file will be overriden!"
    },
    "UseData": {
      "in": "query",
      "name": "data",
      "type": "string",
      "description": "Name of DATA file to read."
    },
    "SaveIndex": {
      "in": "query",
      "name": "index",
      "type": "string",
      "description": "Name of INDEX file to keep. `{{random}}` keyword is replaced with unique number. WARNING: file will be overriden!"
    },
    "UseIndex": {
      "in": "query",
      "name": "index",
      "type": "string",
      "description": "Name of INDEX file to read."
    },
    "SaveView": {
      "in": "query",
      "name": "view",
      "type": "string",
      "description": "Name of VIEW file (cache to access DATA&INDEX) to produce. `{{random}}` keyword is replaced with unique number. WARNING: file will be overriden!"
    },
    "UseView": {
      "in": "query",
      "name": "view",
      "type": "string",
      "description": "Name of VIEW file to read."
    },
    "Delimiter": {
      "in": "query",
      "name": "delimiter",
      "type": "string",
      "description": "The delimiter is used to place between records in DATA file."
    },
    "Lifetime": {
      "in": "query",
      "name": "lifetime",
      "type": "string",
      "description": "The output files lifetime (DATA, INDEX, VIEW), for example \"2h\"."
    },
    "ShareMode": {
      "in": "query",
      "name": "share-mode",
      "type": "string",
      "description": "Sharing mode used to access data files. Can be \"wait-10s\", \"skip\" or \"ignore\". By default \"wait-0s\" is used."
    },
    "SearchNodes": {
      "in": "query",
      "name": "nodes",
      "type": "integer",
      "format": "uint8",
      "maximum": 4,
      "minimum": 0,
      "description": "Specifies 1-4 RCAB processing nodes to use. If omitted all nodes are used.",
      "enum": [ 1, 2, 3, 4 ]
    },
    "Local": {
      "in": "query",
      "name": "local",
      "type": "boolean",
      "default": false,
      "description": "Perform search only on this cluster member."
    },
    "SearchStat": {
      "in": "query",
      "name": "stats",
      "type": "boolean",
      "default": false,
      "description": "Include search statistics in response."
    },
    "Performance": {
      "in": "query",
      "name": "performance",
      "type": "boolean",
      "default": false,
      "description": "Include performance metrics in response. Default 'false'."
    },
    "SearchLimit": {
      "in": "query",
      "name": "limit",
      "type": "integer",
      "format": "uint64",
      "description": "Limit the total number of records reported."
    },
    "ShowOffset": {
      "in": "query",
      "name": "offset",
      "type": "integer",
      "format": "uint64",
      "description": "Offset of first record to report."
    },
    "ShowCount": {
      "in": "query",
      "name": "count",
      "type": "integer",
      "format": "uint64",
      "description": "Total number of records to report."
    },
    "Transform": {
      "in": "query",
      "name": "transform",
      "type": "array",
      "items": { "type": "string" },
      "collectionFormat": "multi",
      "description": "Additional data transformation. Could be match(\"^.*$\"), replace(\"^(.*)apple(.*)$\", \"$1orange$2\") or script(\"filter_position\")"
    }
  },
  "definitions": {
    "CountResponse": {
      "type": "object",
      "required": [
        "matches"
      ],
      "properties": {
        "dataRate": {
          "description": "Data rate, MB/s",
          "type": "string"
        },
        "duration": {
          "description": "Duration, milliseconds",
          "type": "number",
          "format": "int64"
        },
        "fabricDataRate": {
          "description": "Fabric data rate, MB/s",
          "type": "string"
        },
        "matches": {
          "description": "Total number of records found",
          "type": "number",
          "format": "int64"
        },
        "totalBytes": {
          "description": "Total number of bytes processed",
          "type": "number",
          "format": "int64"
        },
        "fabricDuration": {
          "description": "Fabric duration, milliseconds",
          "type": "number",
          "format": "int64"
        },
        "host": {
          "description": "Cluster node name",
          "type": "string"
        },
        "details": {
          "description": "Processing details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CountResponse"
          }
        },
        "extra": {
          "description": "Extra information",
          "type": "object",
          "properties": {
            "backend": {
              "description": "Backend tool used",
              "type": "string"
            },
            "session": {
              "description": "Session identifier",
              "type": "string"
            },
            "aggregations": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        }
      }
    },
    "SearchResponse": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "required": [
        "results"
      ],
      "properties": {
        "results": {
          "description": "Set of found records",
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "errors": {
          "description": "Set of errors",
          "type": "array",
          "items": { "type": "string" }
        },
        "stats": {
          "$ref": "#/definitions/CountResponse"
        }
      }
    },
    "GetFilesResponse": {
      "type": "object",
      "properties": {
        "folders": {
          "type": "array",
          "items": { "type": "string" }
        },
        "files": {
          "type": "array",
          "items": { "type": "string" }
        },
        "catalogs": {
          "type": "array",
          "items": { "type": "string" }
        },
        "details": {
          "type": "object"
        },
        "dir": {
          "type": "string"
        }
      }
    },
    "VersionResponse": {
      "type": "object",
      "properties": {
        "git-hash": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "LoginRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "expire": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      },
      "properties": {
        "message": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "RenameResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "PostFileResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "properties": {
              "length": {
                "type": "integer",
                "format": "int64"
              },
              "offset": {
                "type": "integer",
                "format": "int64"
              },
              "path": {
                "type": "string"
              },
              "error": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "DeleteFilesResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "details": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "SearchRequest": {
      "type": "object",
      "properties": {
        "query": { "$ref": "#/parameters/SearchQuery" },
        "files": { "$ref": "#/parameters/SearchFile" },
        "mode": { "$ref": "#/parameters/SearchMode" },
        "surrounding": { "$ref": "#/parameters/Surrounding" },
        "fuzziness": { "$ref": "#/parameters/Fuzziness" },
        "format": { "$ref": "#/parameters/SearchFormat" },
        "cs": { "$ref": "#/parameters/SearchCase" },
        "reduce": { "$ref": "#/parameters/SearchReduce" },
        "fields": { "$ref": "#/parameters/SearchFields" },
        "backend": { "$ref": "#/parameters/SearchBackend" },
        "data": { "$ref": "#/parameters/SaveData" },
        "index": { "$ref": "#/parameters/SaveIndex" },
        "view": { "$ref": "#/parameters/SaveView" },
        "delimiter": { "$ref": "#/parameters/Delimiter" },
        "lifetime": { "$ref": "#/parameters/Lifetime" },
        "share-mode": { "$ref": "#/parameters/ShareMode" },
        "nodes": { "$ref": "#/parameters/SearchNodes" },
        "local": { "$ref": "#/parameters/Local" },
        "stats": { "$ref": "#/parameters/SearchStat" },
        "performance": { "$ref": "#/parameters/Performance" },
        "limit": { "$ref": "#/parameters/SearchLimit" },
        "transform": { "$ref": "#/parameters/Transform" },
        "aggs": {
          "description": "Custom aggregations",
          "type": "object"
        }
      }
    },
    "CountRequest": {
      "type": "object",
      "properties": {
        "query": { "$ref": "#/parameters/SearchQuery" },
        "files": { "$ref": "#/parameters/SearchFile" },
        "mode": { "$ref": "#/parameters/SearchMode" },
        "surrounding": { "$ref": "#/parameters/Surrounding" },
        "fuzziness": { "$ref": "#/parameters/Fuzziness" },
        "cs": { "$ref": "#/parameters/SearchCase" },
        "reduce": { "$ref": "#/parameters/SearchReduce" },
        "backend": { "$ref": "#/parameters/SearchBackend" },
        "data": { "$ref": "#/parameters/SaveData" },
        "index": { "$ref": "#/parameters/SaveIndex" },
        "view": { "$ref": "#/parameters/SaveView" },
        "delimiter": { "$ref": "#/parameters/Delimiter" },
        "lifetime": { "$ref": "#/parameters/Lifetime" },
        "share-mode": { "$ref": "#/parameters/ShareMode" },
        "nodes": { "$ref": "#/parameters/SearchNodes" },
        "local": { "$ref": "#/parameters/Local" },
        "performance": { "$ref": "#/parameters/Performance" },
        "aggs": {
          "description": "Custom aggregations",
          "type": "object"
        }
      }
    },
    "AggregationRequest": {
      "type": "object",
      "properties": {
        "format": { "$ref": "#/parameters/SearchFormat" },
        "session": { "$ref": "#/parameters/UseSession" },
        "data": { "$ref": "#/parameters/UseData" },
        "index": { "$ref": "#/parameters/UseIndex" },
        "delimiter": { "$ref": "#/parameters/Delimiter" },
        "local": { "$ref": "#/parameters/Local" },
        "performance": { "$ref": "#/parameters/Performance" },
        "aggs": {
          "description": "Custom aggregations",
          "type": "object"
        }
      }
    }
  },
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    },
    "basic": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basic": [],
      "jwt": []
    }
  ]
}
